# test_features.uls
# This script tests lists, file I/O, built-in functions, and advanced features
print(" ")
print("=== Testing Basic Data Types and Functions ===")
print(" ")
x = 10
print("x = " + str(x))
print("abs(-5) = " + str(abs(-5)))
print("sqrt(16) = " + str(sqrt(16)))
print("randomint(1,10): " + str(randomint(1,10)))
print(" ")
print("=== Testing Lists ===")
print(" ")
lst = [1, 2, 3]
append(lst, 4)
print("List after append: " + str(lst))
remove(lst, 2)
print("List after remove(2): " + str(lst))
print("length of lst: " + str(len(lst)))
print("sum(lst): " + str(sum(lst)))
print("sorted(lst): " + str(sorted(lst)))
reverse(lst)
print("List after reverse: " + str(lst))
lst2 = ["apple", "banana", "cherry"]
print("random_choice(lst2): " + str(random_choice(lst2)))
random_shuffle(lst2)
print("lst2 after random_shuffle: " + str(lst2))
print(" ")
print("=== Testing Strings ===")
print(" ")
msg = "Hello, World!"
print("upper(msg): " + upper(msg))
print("replace(msg, 'World', 'ULS'): " + replace(msg, "World", "ULS"))
print("substring(msg, 0,5): " + substring(msg, 0,5))
parts = split(msg, " ")
print("split(msg, ' '): " + str(parts))
joined = join("-", parts)
print("join('-', parts): " + joined)
print(" ")
print("=== Testing Control Structures ===")
print(" ")
count = 0
while count < 3 {
    print("While loop count: " + str(count))
    count = count + 1
}

for i in range(1, 6) {
    print("For loop i: " + str(i))
    if i == 3 {
        print("Breaking out of loop at i=3")
        break
    }
}
print(" ")
print("=== Testing Functions ===")
print(" ")
define greet(name) {
    print("Hello, " + str(name) + "!")
}
greet("ULS User")

define add(a, b) {
    result a + b
}
print("add(5,7) = " + str(add(5,7)))

print("=== Testing File I/O ===")
write_file("test_output.txt", "This is a test.\n")
append_file("test_output.txt", "Appended line.\n")
content = read_file("test_output.txt")
print("Content of test_output.txt:")
print(content)
print(" ")
print("=== Testing Python Eval/Exec ===")
print("")

# Test basic python_eval
response1 = python_eval("2 * 3 + 4")
print("python_eval('2 * 3 + 4'): " + str(response1))

# Test string operations
response2 = python_eval("'hello'.upper()")
print("python_eval('hello'.upper()): " + str(response2))

# Test list operations
response3 = python_eval("[1,2,3,4,5][1:4]")
print("python_eval('[1,2,3,4,5][1:4]'): " + str(response3))

# Test math functions
response4 = python_eval("__import__('math').sqrt(16)")
print("python_eval('math.sqrt(16)'): " + str(response4))

print("")
print("=== Testing ULS Eval ===")
print("")

# Test multi-line eval
res1 = eval("x = 10; x + 5")
print("eval('x = 10; x + 5'): " + str(res1))

# Test variable assignment and usage
eval("y = 20")
res2 = eval("y * 2")
print("eval('y * 2') after setting y=20: " + str(res2))

print("")
print("=== Testing Networking Features ===")
print("")

response = http_get("https://api.github.com/zen")
if response {
    print("GitHub Zen: " + str(response))
} else {
    print("HTTP Request failed")
}

# Test JSON handling 
json_str = "{\"name\": \"John\", \"age\": 30}"
parsed = parse_json(json_str)
if parsed {
    print("Parsed JSON: " + str(parsed))
} else {
    print("JSON parsing failed")
}

# Test URL operations
url = parse_url("https://example.com/path?query=value")
print("URL parts: " + str(url))
full_url = join_url("https://example.com", "/api/v1")
print("Joined URL: " + str(full_url))

# Test Socket operations
print("")
print("=== Testing Socket Operations ===")
sock = create_socket()
response = connect_socket(sock, "example.com", 80)
print("Socket connection: " + str(response))
if response {
    send_socket(sock, "GET / HTTP/1.0\r\nHost: example.com\r\n\r\n")
    response = receive_socket(sock)
    print("Socket response preview: " + substring(response, 0, 100))
    close_socket(sock)
}
print("=== End of Tests ===")