Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> assignment
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> function_def
Rule 9     statement -> for_loop
Rule 10    statement -> return_statement
Rule 11    statement -> wait_statement
Rule 12    statement -> block
Rule 13    statement -> expression_statement
Rule 14    expression_statement -> expression
Rule 15    expression -> expression INCREMENT
Rule 16    expression -> expression DECREMENT
Rule 17    expression -> IDENTIFIER PLUS_EQUALS expression
Rule 18    expression -> IDENTIFIER MINUS_EQUALS expression
Rule 19    assignment -> IDENTIFIER EQUALS expression
Rule 20    print_statement -> PRINT LPAREN expression RPAREN
Rule 21    if_statement -> IF expression block
Rule 22    if_statement -> IF expression block ELSE block
Rule 23    for_loop -> FOR IDENTIFIER IN expression block
Rule 24    iterable -> expression
Rule 25    iterable -> RANGE LPAREN expression COMMA expression RPAREN
Rule 26    while_statement -> WHILE expression block
Rule 27    function_def -> DEFINE IDENTIFIER LPAREN RPAREN block
Rule 28    function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block
Rule 29    param_list -> IDENTIFIER
Rule 30    param_list -> param_list COMMA IDENTIFIER
Rule 31    param_list -> empty
Rule 32    statement -> IMPORT IDENTIFIER
Rule 33    return_statement -> RESULT expression
Rule 34    expression -> fstring
Rule 35    expression -> logic_expr
Rule 36    fstring -> F_QUOTE fstring_content QUOTE
Rule 37    fstring_content -> fstring_content fstring_part
Rule 38    fstring_content -> fstring_part
Rule 39    fstring_part -> STRING_CONTENT
Rule 40    fstring_part -> LBRACE expression RBRACE
Rule 41    logic_expr -> logic_expr OR_OP logic_term
Rule 42    logic_expr -> logic_term OR logic_term
Rule 43    logic_expr -> logic_term
Rule 44    logic_term -> logic_term AND_OP equality_expr
Rule 45    logic_term -> logic_term AND equality_expr
Rule 46    logic_term -> equality_expr
Rule 47    equality_expr -> equality_expr EQ relational_expr
Rule 48    equality_expr -> equality_expr NEQ relational_expr
Rule 49    equality_expr -> relational_expr
Rule 50    relational_expr -> relational_expr LT additive_expr
Rule 51    relational_expr -> relational_expr LE additive_expr
Rule 52    relational_expr -> relational_expr GT additive_expr
Rule 53    relational_expr -> relational_expr GE additive_expr
Rule 54    relational_expr -> additive_expr
Rule 55    additive_expr -> additive_expr PLUS term
Rule 56    additive_expr -> additive_expr MINUS term
Rule 57    additive_expr -> term
Rule 58    term -> term TIMES factor
Rule 59    term -> term DIVIDE factor
Rule 60    term -> term MOD factor
Rule 61    term -> factor
Rule 62    factor -> PLUS factor
Rule 63    factor -> MINUS factor
Rule 64    factor -> NOT factor
Rule 65    factor -> primary
Rule 66    primary -> atom member_access_chain
Rule 67    atom -> IDENTIFIER
Rule 68    atom -> NUMBER
Rule 69    atom -> STRING
Rule 70    atom -> TRUE
Rule 71    atom -> FALSE
Rule 72    atom -> LPAREN expression RPAREN
Rule 73    member_access_chain -> member_access_chain member_access
Rule 74    member_access_chain -> empty
Rule 75    member_access -> DOT IDENTIFIER
Rule 76    member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN
Rule 77    member_access -> DOT IDENTIFIER LPAREN RPAREN
Rule 78    wait_statement -> WAIT expression
Rule 79    function_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 80    function_call -> IDENTIFIER LPAREN RPAREN
Rule 81    arg_list -> expression
Rule 82    arg_list -> arg_list COMMA expression
Rule 83    arg_list -> empty
Rule 84    block -> LBRACE RBRACE
Rule 85    block -> LBRACE statement_list RBRACE
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 45
AND_OP               : 44
COMMA                : 25 30 82
DECREMENT            : 16
DEFINE               : 27 28
DIVIDE               : 59
DOT                  : 75 76 77
ELSE                 : 22
EQ                   : 47
EQUALS               : 19
FALSE                : 71
FOR                  : 23
F_QUOTE              : 36
GE                   : 53
GT                   : 52
IDENTIFIER           : 17 18 19 23 27 28 29 30 32 67 75 76 77 79 80
IF                   : 21 22
IMPORT               : 32
IN                   : 23
INCREMENT            : 15
LBRACE               : 40 84 85
LE                   : 51
LPAREN               : 20 25 27 28 72 76 77 79 80
LT                   : 50
MINUS                : 56 63
MINUS_EQUALS         : 18
MOD                  : 60
NEQ                  : 48
NOT                  : 64
NUMBER               : 68
OR                   : 42
OR_OP                : 41
PLUS                 : 55 62
PLUS_EQUALS          : 17
PRINT                : 20
QUOTE                : 36
RANGE                : 25
RBRACE               : 40 84 85
RESULT               : 33
RPAREN               : 20 25 27 28 72 76 77 79 80
STRING               : 69
STRING_CONTENT       : 39
TIMES                : 58
TRUE                 : 70
WAIT                 : 78
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

additive_expr        : 50 51 52 53 54 55 56
arg_list             : 76 79 82
assignment           : 4
atom                 : 66
block                : 12 21 22 22 23 26 27 28
empty                : 31 74 83
equality_expr        : 44 45 46 47 48
expression           : 14 15 16 17 18 19 20 21 22 23 24 25 25 26 33 40 72 78 81 82
expression_statement : 13
factor               : 58 59 60 61 62 63 64
for_loop             : 9
fstring              : 34
fstring_content      : 36 37
fstring_part         : 37 38
function_call        : 
function_def         : 8
if_statement         : 6
iterable             : 
logic_expr           : 35 41
logic_term           : 41 42 42 43 44 45
member_access        : 73
member_access_chain  : 66 73
param_list           : 28 30
primary              : 65
print_statement      : 5
program              : 0
relational_expr      : 47 48 49 50 51 52 53
return_statement     : 10
statement            : 2 3
statement_list       : 1 2 85
term                 : 55 56 57 58 59 60
wait_statement       : 11
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (32) statement -> . IMPORT IDENTIFIER
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (26) while_statement -> . WHILE expression block
    (27) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN expression block
    (33) return_statement -> . RESULT expression
    (78) wait_statement -> . WAIT expression
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IMPORT          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    DEFINE          shift and go to state 21
    FOR             shift and go to state 22
    RESULT          shift and go to state 23
    WAIT            shift and go to state 24
    LBRACE          shift and go to state 25
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 16
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (32) statement -> . IMPORT IDENTIFIER
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (26) while_statement -> . WHILE expression block
    (27) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN expression block
    (33) return_statement -> . RESULT expression
    (78) wait_statement -> . WAIT expression
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    IMPORT          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    DEFINE          shift and go to state 21
    FOR             shift and go to state 22
    RESULT          shift and go to state 23
    WAIT            shift and go to state 24
    LBRACE          shift and go to state 25
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    statement                      shift and go to state 44
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 16
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 3

    (3) statement_list -> statement .

    IMPORT          reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    DEFINE          reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    RESULT          reduce using rule 3 (statement_list -> statement .)
    WAIT            reduce using rule 3 (statement_list -> statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement .)
    F_QUOTE         reduce using rule 3 (statement_list -> statement .)
    PLUS            reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    NOT             reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    STRING          reduce using rule 3 (statement_list -> statement .)
    TRUE            reduce using rule 3 (statement_list -> statement .)
    FALSE           reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    IMPORT          reduce using rule 4 (statement -> assignment .)
    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    DEFINE          reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    RESULT          reduce using rule 4 (statement -> assignment .)
    WAIT            reduce using rule 4 (statement -> assignment .)
    LBRACE          reduce using rule 4 (statement -> assignment .)
    F_QUOTE         reduce using rule 4 (statement -> assignment .)
    PLUS            reduce using rule 4 (statement -> assignment .)
    MINUS           reduce using rule 4 (statement -> assignment .)
    NOT             reduce using rule 4 (statement -> assignment .)
    NUMBER          reduce using rule 4 (statement -> assignment .)
    STRING          reduce using rule 4 (statement -> assignment .)
    TRUE            reduce using rule 4 (statement -> assignment .)
    FALSE           reduce using rule 4 (statement -> assignment .)
    LPAREN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print_statement .

    IMPORT          reduce using rule 5 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    WHILE           reduce using rule 5 (statement -> print_statement .)
    DEFINE          reduce using rule 5 (statement -> print_statement .)
    FOR             reduce using rule 5 (statement -> print_statement .)
    RESULT          reduce using rule 5 (statement -> print_statement .)
    WAIT            reduce using rule 5 (statement -> print_statement .)
    LBRACE          reduce using rule 5 (statement -> print_statement .)
    F_QUOTE         reduce using rule 5 (statement -> print_statement .)
    PLUS            reduce using rule 5 (statement -> print_statement .)
    MINUS           reduce using rule 5 (statement -> print_statement .)
    NOT             reduce using rule 5 (statement -> print_statement .)
    NUMBER          reduce using rule 5 (statement -> print_statement .)
    STRING          reduce using rule 5 (statement -> print_statement .)
    TRUE            reduce using rule 5 (statement -> print_statement .)
    FALSE           reduce using rule 5 (statement -> print_statement .)
    LPAREN          reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IMPORT          reduce using rule 6 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    DEFINE          reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    RESULT          reduce using rule 6 (statement -> if_statement .)
    WAIT            reduce using rule 6 (statement -> if_statement .)
    LBRACE          reduce using rule 6 (statement -> if_statement .)
    F_QUOTE         reduce using rule 6 (statement -> if_statement .)
    PLUS            reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    STRING          reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> while_statement .

    IMPORT          reduce using rule 7 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> while_statement .)
    PRINT           reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    DEFINE          reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    RESULT          reduce using rule 7 (statement -> while_statement .)
    WAIT            reduce using rule 7 (statement -> while_statement .)
    LBRACE          reduce using rule 7 (statement -> while_statement .)
    F_QUOTE         reduce using rule 7 (statement -> while_statement .)
    PLUS            reduce using rule 7 (statement -> while_statement .)
    MINUS           reduce using rule 7 (statement -> while_statement .)
    NOT             reduce using rule 7 (statement -> while_statement .)
    NUMBER          reduce using rule 7 (statement -> while_statement .)
    STRING          reduce using rule 7 (statement -> while_statement .)
    TRUE            reduce using rule 7 (statement -> while_statement .)
    FALSE           reduce using rule 7 (statement -> while_statement .)
    LPAREN          reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    RBRACE          reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> function_def .

    IMPORT          reduce using rule 8 (statement -> function_def .)
    IDENTIFIER      reduce using rule 8 (statement -> function_def .)
    PRINT           reduce using rule 8 (statement -> function_def .)
    IF              reduce using rule 8 (statement -> function_def .)
    WHILE           reduce using rule 8 (statement -> function_def .)
    DEFINE          reduce using rule 8 (statement -> function_def .)
    FOR             reduce using rule 8 (statement -> function_def .)
    RESULT          reduce using rule 8 (statement -> function_def .)
    WAIT            reduce using rule 8 (statement -> function_def .)
    LBRACE          reduce using rule 8 (statement -> function_def .)
    F_QUOTE         reduce using rule 8 (statement -> function_def .)
    PLUS            reduce using rule 8 (statement -> function_def .)
    MINUS           reduce using rule 8 (statement -> function_def .)
    NOT             reduce using rule 8 (statement -> function_def .)
    NUMBER          reduce using rule 8 (statement -> function_def .)
    STRING          reduce using rule 8 (statement -> function_def .)
    TRUE            reduce using rule 8 (statement -> function_def .)
    FALSE           reduce using rule 8 (statement -> function_def .)
    LPAREN          reduce using rule 8 (statement -> function_def .)
    $end            reduce using rule 8 (statement -> function_def .)
    RBRACE          reduce using rule 8 (statement -> function_def .)


state 9

    (9) statement -> for_loop .

    IMPORT          reduce using rule 9 (statement -> for_loop .)
    IDENTIFIER      reduce using rule 9 (statement -> for_loop .)
    PRINT           reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    DEFINE          reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    RESULT          reduce using rule 9 (statement -> for_loop .)
    WAIT            reduce using rule 9 (statement -> for_loop .)
    LBRACE          reduce using rule 9 (statement -> for_loop .)
    F_QUOTE         reduce using rule 9 (statement -> for_loop .)
    PLUS            reduce using rule 9 (statement -> for_loop .)
    MINUS           reduce using rule 9 (statement -> for_loop .)
    NOT             reduce using rule 9 (statement -> for_loop .)
    NUMBER          reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    LPAREN          reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    RBRACE          reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> return_statement .

    IMPORT          reduce using rule 10 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> return_statement .)
    PRINT           reduce using rule 10 (statement -> return_statement .)
    IF              reduce using rule 10 (statement -> return_statement .)
    WHILE           reduce using rule 10 (statement -> return_statement .)
    DEFINE          reduce using rule 10 (statement -> return_statement .)
    FOR             reduce using rule 10 (statement -> return_statement .)
    RESULT          reduce using rule 10 (statement -> return_statement .)
    WAIT            reduce using rule 10 (statement -> return_statement .)
    LBRACE          reduce using rule 10 (statement -> return_statement .)
    F_QUOTE         reduce using rule 10 (statement -> return_statement .)
    PLUS            reduce using rule 10 (statement -> return_statement .)
    MINUS           reduce using rule 10 (statement -> return_statement .)
    NOT             reduce using rule 10 (statement -> return_statement .)
    NUMBER          reduce using rule 10 (statement -> return_statement .)
    STRING          reduce using rule 10 (statement -> return_statement .)
    TRUE            reduce using rule 10 (statement -> return_statement .)
    FALSE           reduce using rule 10 (statement -> return_statement .)
    LPAREN          reduce using rule 10 (statement -> return_statement .)
    $end            reduce using rule 10 (statement -> return_statement .)
    RBRACE          reduce using rule 10 (statement -> return_statement .)


state 11

    (11) statement -> wait_statement .

    IMPORT          reduce using rule 11 (statement -> wait_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> wait_statement .)
    PRINT           reduce using rule 11 (statement -> wait_statement .)
    IF              reduce using rule 11 (statement -> wait_statement .)
    WHILE           reduce using rule 11 (statement -> wait_statement .)
    DEFINE          reduce using rule 11 (statement -> wait_statement .)
    FOR             reduce using rule 11 (statement -> wait_statement .)
    RESULT          reduce using rule 11 (statement -> wait_statement .)
    WAIT            reduce using rule 11 (statement -> wait_statement .)
    LBRACE          reduce using rule 11 (statement -> wait_statement .)
    F_QUOTE         reduce using rule 11 (statement -> wait_statement .)
    PLUS            reduce using rule 11 (statement -> wait_statement .)
    MINUS           reduce using rule 11 (statement -> wait_statement .)
    NOT             reduce using rule 11 (statement -> wait_statement .)
    NUMBER          reduce using rule 11 (statement -> wait_statement .)
    STRING          reduce using rule 11 (statement -> wait_statement .)
    TRUE            reduce using rule 11 (statement -> wait_statement .)
    FALSE           reduce using rule 11 (statement -> wait_statement .)
    LPAREN          reduce using rule 11 (statement -> wait_statement .)
    $end            reduce using rule 11 (statement -> wait_statement .)
    RBRACE          reduce using rule 11 (statement -> wait_statement .)


state 12

    (12) statement -> block .

    IMPORT          reduce using rule 12 (statement -> block .)
    IDENTIFIER      reduce using rule 12 (statement -> block .)
    PRINT           reduce using rule 12 (statement -> block .)
    IF              reduce using rule 12 (statement -> block .)
    WHILE           reduce using rule 12 (statement -> block .)
    DEFINE          reduce using rule 12 (statement -> block .)
    FOR             reduce using rule 12 (statement -> block .)
    RESULT          reduce using rule 12 (statement -> block .)
    WAIT            reduce using rule 12 (statement -> block .)
    LBRACE          reduce using rule 12 (statement -> block .)
    F_QUOTE         reduce using rule 12 (statement -> block .)
    PLUS            reduce using rule 12 (statement -> block .)
    MINUS           reduce using rule 12 (statement -> block .)
    NOT             reduce using rule 12 (statement -> block .)
    NUMBER          reduce using rule 12 (statement -> block .)
    STRING          reduce using rule 12 (statement -> block .)
    TRUE            reduce using rule 12 (statement -> block .)
    FALSE           reduce using rule 12 (statement -> block .)
    LPAREN          reduce using rule 12 (statement -> block .)
    $end            reduce using rule 12 (statement -> block .)
    RBRACE          reduce using rule 12 (statement -> block .)


state 13

    (13) statement -> expression_statement .

    IMPORT          reduce using rule 13 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> expression_statement .)
    PRINT           reduce using rule 13 (statement -> expression_statement .)
    IF              reduce using rule 13 (statement -> expression_statement .)
    WHILE           reduce using rule 13 (statement -> expression_statement .)
    DEFINE          reduce using rule 13 (statement -> expression_statement .)
    FOR             reduce using rule 13 (statement -> expression_statement .)
    RESULT          reduce using rule 13 (statement -> expression_statement .)
    WAIT            reduce using rule 13 (statement -> expression_statement .)
    LBRACE          reduce using rule 13 (statement -> expression_statement .)
    F_QUOTE         reduce using rule 13 (statement -> expression_statement .)
    PLUS            reduce using rule 13 (statement -> expression_statement .)
    MINUS           reduce using rule 13 (statement -> expression_statement .)
    NOT             reduce using rule 13 (statement -> expression_statement .)
    NUMBER          reduce using rule 13 (statement -> expression_statement .)
    STRING          reduce using rule 13 (statement -> expression_statement .)
    TRUE            reduce using rule 13 (statement -> expression_statement .)
    FALSE           reduce using rule 13 (statement -> expression_statement .)
    LPAREN          reduce using rule 13 (statement -> expression_statement .)
    $end            reduce using rule 13 (statement -> expression_statement .)
    RBRACE          reduce using rule 13 (statement -> expression_statement .)


state 14

    (32) statement -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 45


state 15

    (19) assignment -> IDENTIFIER . EQUALS expression
    (17) expression -> IDENTIFIER . PLUS_EQUALS expression
    (18) expression -> IDENTIFIER . MINUS_EQUALS expression
    (67) atom -> IDENTIFIER .

    EQUALS          shift and go to state 46
    PLUS_EQUALS     shift and go to state 47
    MINUS_EQUALS    shift and go to state 48
    DOT             reduce using rule 67 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 67 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 67 (atom -> IDENTIFIER .)
    MOD             reduce using rule 67 (atom -> IDENTIFIER .)
    PLUS            reduce using rule 67 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 67 (atom -> IDENTIFIER .)
    LT              reduce using rule 67 (atom -> IDENTIFIER .)
    LE              reduce using rule 67 (atom -> IDENTIFIER .)
    GT              reduce using rule 67 (atom -> IDENTIFIER .)
    GE              reduce using rule 67 (atom -> IDENTIFIER .)
    EQ              reduce using rule 67 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 67 (atom -> IDENTIFIER .)
    OR              reduce using rule 67 (atom -> IDENTIFIER .)
    AND_OP          reduce using rule 67 (atom -> IDENTIFIER .)
    AND             reduce using rule 67 (atom -> IDENTIFIER .)
    OR_OP           reduce using rule 67 (atom -> IDENTIFIER .)
    INCREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    DECREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    IMPORT          reduce using rule 67 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 67 (atom -> IDENTIFIER .)
    PRINT           reduce using rule 67 (atom -> IDENTIFIER .)
    IF              reduce using rule 67 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 67 (atom -> IDENTIFIER .)
    DEFINE          reduce using rule 67 (atom -> IDENTIFIER .)
    FOR             reduce using rule 67 (atom -> IDENTIFIER .)
    RESULT          reduce using rule 67 (atom -> IDENTIFIER .)
    WAIT            reduce using rule 67 (atom -> IDENTIFIER .)
    LBRACE          reduce using rule 67 (atom -> IDENTIFIER .)
    F_QUOTE         reduce using rule 67 (atom -> IDENTIFIER .)
    NOT             reduce using rule 67 (atom -> IDENTIFIER .)
    NUMBER          reduce using rule 67 (atom -> IDENTIFIER .)
    STRING          reduce using rule 67 (atom -> IDENTIFIER .)
    TRUE            reduce using rule 67 (atom -> IDENTIFIER .)
    FALSE           reduce using rule 67 (atom -> IDENTIFIER .)
    LPAREN          reduce using rule 67 (atom -> IDENTIFIER .)
    $end            reduce using rule 67 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 67 (atom -> IDENTIFIER .)


state 16

    (14) expression_statement -> expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IMPORT          reduce using rule 14 (expression_statement -> expression .)
    IDENTIFIER      reduce using rule 14 (expression_statement -> expression .)
    PRINT           reduce using rule 14 (expression_statement -> expression .)
    IF              reduce using rule 14 (expression_statement -> expression .)
    WHILE           reduce using rule 14 (expression_statement -> expression .)
    DEFINE          reduce using rule 14 (expression_statement -> expression .)
    FOR             reduce using rule 14 (expression_statement -> expression .)
    RESULT          reduce using rule 14 (expression_statement -> expression .)
    WAIT            reduce using rule 14 (expression_statement -> expression .)
    LBRACE          reduce using rule 14 (expression_statement -> expression .)
    F_QUOTE         reduce using rule 14 (expression_statement -> expression .)
    PLUS            reduce using rule 14 (expression_statement -> expression .)
    MINUS           reduce using rule 14 (expression_statement -> expression .)
    NOT             reduce using rule 14 (expression_statement -> expression .)
    NUMBER          reduce using rule 14 (expression_statement -> expression .)
    STRING          reduce using rule 14 (expression_statement -> expression .)
    TRUE            reduce using rule 14 (expression_statement -> expression .)
    FALSE           reduce using rule 14 (expression_statement -> expression .)
    LPAREN          reduce using rule 14 (expression_statement -> expression .)
    $end            reduce using rule 14 (expression_statement -> expression .)
    RBRACE          reduce using rule 14 (expression_statement -> expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 17

    (20) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 51


state 18

    (72) atom -> LPAREN . expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 52
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 19

    (21) if_statement -> IF . expression block
    (22) if_statement -> IF . expression block ELSE block
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 54
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 20

    (26) while_statement -> WHILE . expression block
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 55
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 21

    (27) function_def -> DEFINE . IDENTIFIER LPAREN RPAREN block
    (28) function_def -> DEFINE . IDENTIFIER LPAREN param_list RPAREN block

    IDENTIFIER      shift and go to state 56


state 22

    (23) for_loop -> FOR . IDENTIFIER IN expression block

    IDENTIFIER      shift and go to state 57


state 23

    (33) return_statement -> RESULT . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 58
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 24

    (78) wait_statement -> WAIT . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 59
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 25

    (84) block -> LBRACE . RBRACE
    (85) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (32) statement -> . IMPORT IDENTIFIER
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (26) while_statement -> . WHILE expression block
    (27) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN expression block
    (33) return_statement -> . RESULT expression
    (78) wait_statement -> . WAIT expression
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 60
    IMPORT          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    DEFINE          shift and go to state 21
    FOR             shift and go to state 22
    RESULT          shift and go to state 23
    WAIT            shift and go to state 24
    LBRACE          shift and go to state 25
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    statement_list                 shift and go to state 61
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 16
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 26

    (34) expression -> fstring .

    INCREMENT       reduce using rule 34 (expression -> fstring .)
    DECREMENT       reduce using rule 34 (expression -> fstring .)
    IMPORT          reduce using rule 34 (expression -> fstring .)
    IDENTIFIER      reduce using rule 34 (expression -> fstring .)
    PRINT           reduce using rule 34 (expression -> fstring .)
    IF              reduce using rule 34 (expression -> fstring .)
    WHILE           reduce using rule 34 (expression -> fstring .)
    DEFINE          reduce using rule 34 (expression -> fstring .)
    FOR             reduce using rule 34 (expression -> fstring .)
    RESULT          reduce using rule 34 (expression -> fstring .)
    WAIT            reduce using rule 34 (expression -> fstring .)
    LBRACE          reduce using rule 34 (expression -> fstring .)
    F_QUOTE         reduce using rule 34 (expression -> fstring .)
    PLUS            reduce using rule 34 (expression -> fstring .)
    MINUS           reduce using rule 34 (expression -> fstring .)
    NOT             reduce using rule 34 (expression -> fstring .)
    NUMBER          reduce using rule 34 (expression -> fstring .)
    STRING          reduce using rule 34 (expression -> fstring .)
    TRUE            reduce using rule 34 (expression -> fstring .)
    FALSE           reduce using rule 34 (expression -> fstring .)
    LPAREN          reduce using rule 34 (expression -> fstring .)
    $end            reduce using rule 34 (expression -> fstring .)
    RPAREN          reduce using rule 34 (expression -> fstring .)
    RBRACE          reduce using rule 34 (expression -> fstring .)
    COMMA           reduce using rule 34 (expression -> fstring .)


state 27

    (35) expression -> logic_expr .
    (41) logic_expr -> logic_expr . OR_OP logic_term

    INCREMENT       reduce using rule 35 (expression -> logic_expr .)
    DECREMENT       reduce using rule 35 (expression -> logic_expr .)
    IMPORT          reduce using rule 35 (expression -> logic_expr .)
    IDENTIFIER      reduce using rule 35 (expression -> logic_expr .)
    PRINT           reduce using rule 35 (expression -> logic_expr .)
    IF              reduce using rule 35 (expression -> logic_expr .)
    WHILE           reduce using rule 35 (expression -> logic_expr .)
    DEFINE          reduce using rule 35 (expression -> logic_expr .)
    FOR             reduce using rule 35 (expression -> logic_expr .)
    RESULT          reduce using rule 35 (expression -> logic_expr .)
    WAIT            reduce using rule 35 (expression -> logic_expr .)
    LBRACE          reduce using rule 35 (expression -> logic_expr .)
    F_QUOTE         reduce using rule 35 (expression -> logic_expr .)
    PLUS            reduce using rule 35 (expression -> logic_expr .)
    MINUS           reduce using rule 35 (expression -> logic_expr .)
    NOT             reduce using rule 35 (expression -> logic_expr .)
    NUMBER          reduce using rule 35 (expression -> logic_expr .)
    STRING          reduce using rule 35 (expression -> logic_expr .)
    TRUE            reduce using rule 35 (expression -> logic_expr .)
    FALSE           reduce using rule 35 (expression -> logic_expr .)
    LPAREN          reduce using rule 35 (expression -> logic_expr .)
    $end            reduce using rule 35 (expression -> logic_expr .)
    RPAREN          reduce using rule 35 (expression -> logic_expr .)
    RBRACE          reduce using rule 35 (expression -> logic_expr .)
    COMMA           reduce using rule 35 (expression -> logic_expr .)
    OR_OP           shift and go to state 62


state 28

    (36) fstring -> F_QUOTE . fstring_content QUOTE
    (37) fstring_content -> . fstring_content fstring_part
    (38) fstring_content -> . fstring_part
    (39) fstring_part -> . STRING_CONTENT
    (40) fstring_part -> . LBRACE expression RBRACE

    STRING_CONTENT  shift and go to state 65
    LBRACE          shift and go to state 66

    fstring_content                shift and go to state 63
    fstring_part                   shift and go to state 64

state 29

    (42) logic_expr -> logic_term . OR logic_term
    (43) logic_expr -> logic_term .
    (44) logic_term -> logic_term . AND_OP equality_expr
    (45) logic_term -> logic_term . AND equality_expr

    OR              shift and go to state 67
    OR_OP           reduce using rule 43 (logic_expr -> logic_term .)
    INCREMENT       reduce using rule 43 (logic_expr -> logic_term .)
    DECREMENT       reduce using rule 43 (logic_expr -> logic_term .)
    IMPORT          reduce using rule 43 (logic_expr -> logic_term .)
    IDENTIFIER      reduce using rule 43 (logic_expr -> logic_term .)
    PRINT           reduce using rule 43 (logic_expr -> logic_term .)
    IF              reduce using rule 43 (logic_expr -> logic_term .)
    WHILE           reduce using rule 43 (logic_expr -> logic_term .)
    DEFINE          reduce using rule 43 (logic_expr -> logic_term .)
    FOR             reduce using rule 43 (logic_expr -> logic_term .)
    RESULT          reduce using rule 43 (logic_expr -> logic_term .)
    WAIT            reduce using rule 43 (logic_expr -> logic_term .)
    LBRACE          reduce using rule 43 (logic_expr -> logic_term .)
    F_QUOTE         reduce using rule 43 (logic_expr -> logic_term .)
    PLUS            reduce using rule 43 (logic_expr -> logic_term .)
    MINUS           reduce using rule 43 (logic_expr -> logic_term .)
    NOT             reduce using rule 43 (logic_expr -> logic_term .)
    NUMBER          reduce using rule 43 (logic_expr -> logic_term .)
    STRING          reduce using rule 43 (logic_expr -> logic_term .)
    TRUE            reduce using rule 43 (logic_expr -> logic_term .)
    FALSE           reduce using rule 43 (logic_expr -> logic_term .)
    LPAREN          reduce using rule 43 (logic_expr -> logic_term .)
    $end            reduce using rule 43 (logic_expr -> logic_term .)
    RPAREN          reduce using rule 43 (logic_expr -> logic_term .)
    RBRACE          reduce using rule 43 (logic_expr -> logic_term .)
    COMMA           reduce using rule 43 (logic_expr -> logic_term .)
    AND_OP          shift and go to state 68
    AND             shift and go to state 69


state 30

    (46) logic_term -> equality_expr .
    (47) equality_expr -> equality_expr . EQ relational_expr
    (48) equality_expr -> equality_expr . NEQ relational_expr

    OR              reduce using rule 46 (logic_term -> equality_expr .)
    AND_OP          reduce using rule 46 (logic_term -> equality_expr .)
    AND             reduce using rule 46 (logic_term -> equality_expr .)
    OR_OP           reduce using rule 46 (logic_term -> equality_expr .)
    INCREMENT       reduce using rule 46 (logic_term -> equality_expr .)
    DECREMENT       reduce using rule 46 (logic_term -> equality_expr .)
    IMPORT          reduce using rule 46 (logic_term -> equality_expr .)
    IDENTIFIER      reduce using rule 46 (logic_term -> equality_expr .)
    PRINT           reduce using rule 46 (logic_term -> equality_expr .)
    IF              reduce using rule 46 (logic_term -> equality_expr .)
    WHILE           reduce using rule 46 (logic_term -> equality_expr .)
    DEFINE          reduce using rule 46 (logic_term -> equality_expr .)
    FOR             reduce using rule 46 (logic_term -> equality_expr .)
    RESULT          reduce using rule 46 (logic_term -> equality_expr .)
    WAIT            reduce using rule 46 (logic_term -> equality_expr .)
    LBRACE          reduce using rule 46 (logic_term -> equality_expr .)
    F_QUOTE         reduce using rule 46 (logic_term -> equality_expr .)
    PLUS            reduce using rule 46 (logic_term -> equality_expr .)
    MINUS           reduce using rule 46 (logic_term -> equality_expr .)
    NOT             reduce using rule 46 (logic_term -> equality_expr .)
    NUMBER          reduce using rule 46 (logic_term -> equality_expr .)
    STRING          reduce using rule 46 (logic_term -> equality_expr .)
    TRUE            reduce using rule 46 (logic_term -> equality_expr .)
    FALSE           reduce using rule 46 (logic_term -> equality_expr .)
    LPAREN          reduce using rule 46 (logic_term -> equality_expr .)
    $end            reduce using rule 46 (logic_term -> equality_expr .)
    RPAREN          reduce using rule 46 (logic_term -> equality_expr .)
    RBRACE          reduce using rule 46 (logic_term -> equality_expr .)
    COMMA           reduce using rule 46 (logic_term -> equality_expr .)
    EQ              shift and go to state 70
    NEQ             shift and go to state 71


state 31

    (49) equality_expr -> relational_expr .
    (50) relational_expr -> relational_expr . LT additive_expr
    (51) relational_expr -> relational_expr . LE additive_expr
    (52) relational_expr -> relational_expr . GT additive_expr
    (53) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 49 (equality_expr -> relational_expr .)
    NEQ             reduce using rule 49 (equality_expr -> relational_expr .)
    OR              reduce using rule 49 (equality_expr -> relational_expr .)
    AND_OP          reduce using rule 49 (equality_expr -> relational_expr .)
    AND             reduce using rule 49 (equality_expr -> relational_expr .)
    OR_OP           reduce using rule 49 (equality_expr -> relational_expr .)
    INCREMENT       reduce using rule 49 (equality_expr -> relational_expr .)
    DECREMENT       reduce using rule 49 (equality_expr -> relational_expr .)
    IMPORT          reduce using rule 49 (equality_expr -> relational_expr .)
    IDENTIFIER      reduce using rule 49 (equality_expr -> relational_expr .)
    PRINT           reduce using rule 49 (equality_expr -> relational_expr .)
    IF              reduce using rule 49 (equality_expr -> relational_expr .)
    WHILE           reduce using rule 49 (equality_expr -> relational_expr .)
    DEFINE          reduce using rule 49 (equality_expr -> relational_expr .)
    FOR             reduce using rule 49 (equality_expr -> relational_expr .)
    RESULT          reduce using rule 49 (equality_expr -> relational_expr .)
    WAIT            reduce using rule 49 (equality_expr -> relational_expr .)
    LBRACE          reduce using rule 49 (equality_expr -> relational_expr .)
    F_QUOTE         reduce using rule 49 (equality_expr -> relational_expr .)
    PLUS            reduce using rule 49 (equality_expr -> relational_expr .)
    MINUS           reduce using rule 49 (equality_expr -> relational_expr .)
    NOT             reduce using rule 49 (equality_expr -> relational_expr .)
    NUMBER          reduce using rule 49 (equality_expr -> relational_expr .)
    STRING          reduce using rule 49 (equality_expr -> relational_expr .)
    TRUE            reduce using rule 49 (equality_expr -> relational_expr .)
    FALSE           reduce using rule 49 (equality_expr -> relational_expr .)
    LPAREN          reduce using rule 49 (equality_expr -> relational_expr .)
    $end            reduce using rule 49 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 49 (equality_expr -> relational_expr .)
    RBRACE          reduce using rule 49 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 49 (equality_expr -> relational_expr .)
    LT              shift and go to state 72
    LE              shift and go to state 73
    GT              shift and go to state 74
    GE              shift and go to state 75


state 32

    (54) relational_expr -> additive_expr .
    (55) additive_expr -> additive_expr . PLUS term
    (56) additive_expr -> additive_expr . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LT              reduce using rule 54 (relational_expr -> additive_expr .)
    LE              reduce using rule 54 (relational_expr -> additive_expr .)
    GT              reduce using rule 54 (relational_expr -> additive_expr .)
    GE              reduce using rule 54 (relational_expr -> additive_expr .)
    EQ              reduce using rule 54 (relational_expr -> additive_expr .)
    NEQ             reduce using rule 54 (relational_expr -> additive_expr .)
    OR              reduce using rule 54 (relational_expr -> additive_expr .)
    AND_OP          reduce using rule 54 (relational_expr -> additive_expr .)
    AND             reduce using rule 54 (relational_expr -> additive_expr .)
    OR_OP           reduce using rule 54 (relational_expr -> additive_expr .)
    INCREMENT       reduce using rule 54 (relational_expr -> additive_expr .)
    DECREMENT       reduce using rule 54 (relational_expr -> additive_expr .)
    IMPORT          reduce using rule 54 (relational_expr -> additive_expr .)
    IDENTIFIER      reduce using rule 54 (relational_expr -> additive_expr .)
    PRINT           reduce using rule 54 (relational_expr -> additive_expr .)
    IF              reduce using rule 54 (relational_expr -> additive_expr .)
    WHILE           reduce using rule 54 (relational_expr -> additive_expr .)
    DEFINE          reduce using rule 54 (relational_expr -> additive_expr .)
    FOR             reduce using rule 54 (relational_expr -> additive_expr .)
    RESULT          reduce using rule 54 (relational_expr -> additive_expr .)
    WAIT            reduce using rule 54 (relational_expr -> additive_expr .)
    LBRACE          reduce using rule 54 (relational_expr -> additive_expr .)
    F_QUOTE         reduce using rule 54 (relational_expr -> additive_expr .)
    NOT             reduce using rule 54 (relational_expr -> additive_expr .)
    NUMBER          reduce using rule 54 (relational_expr -> additive_expr .)
    STRING          reduce using rule 54 (relational_expr -> additive_expr .)
    TRUE            reduce using rule 54 (relational_expr -> additive_expr .)
    FALSE           reduce using rule 54 (relational_expr -> additive_expr .)
    LPAREN          reduce using rule 54 (relational_expr -> additive_expr .)
    $end            reduce using rule 54 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 54 (relational_expr -> additive_expr .)
    RBRACE          reduce using rule 54 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 54 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! PLUS            [ reduce using rule 54 (relational_expr -> additive_expr .) ]
  ! MINUS           [ reduce using rule 54 (relational_expr -> additive_expr .) ]


state 33

    (62) factor -> PLUS . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 78
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 34

    (57) additive_expr -> term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . MOD factor

    PLUS            reduce using rule 57 (additive_expr -> term .)
    MINUS           reduce using rule 57 (additive_expr -> term .)
    LT              reduce using rule 57 (additive_expr -> term .)
    LE              reduce using rule 57 (additive_expr -> term .)
    GT              reduce using rule 57 (additive_expr -> term .)
    GE              reduce using rule 57 (additive_expr -> term .)
    EQ              reduce using rule 57 (additive_expr -> term .)
    NEQ             reduce using rule 57 (additive_expr -> term .)
    OR              reduce using rule 57 (additive_expr -> term .)
    AND_OP          reduce using rule 57 (additive_expr -> term .)
    AND             reduce using rule 57 (additive_expr -> term .)
    OR_OP           reduce using rule 57 (additive_expr -> term .)
    INCREMENT       reduce using rule 57 (additive_expr -> term .)
    DECREMENT       reduce using rule 57 (additive_expr -> term .)
    IMPORT          reduce using rule 57 (additive_expr -> term .)
    IDENTIFIER      reduce using rule 57 (additive_expr -> term .)
    PRINT           reduce using rule 57 (additive_expr -> term .)
    IF              reduce using rule 57 (additive_expr -> term .)
    WHILE           reduce using rule 57 (additive_expr -> term .)
    DEFINE          reduce using rule 57 (additive_expr -> term .)
    FOR             reduce using rule 57 (additive_expr -> term .)
    RESULT          reduce using rule 57 (additive_expr -> term .)
    WAIT            reduce using rule 57 (additive_expr -> term .)
    LBRACE          reduce using rule 57 (additive_expr -> term .)
    F_QUOTE         reduce using rule 57 (additive_expr -> term .)
    NOT             reduce using rule 57 (additive_expr -> term .)
    NUMBER          reduce using rule 57 (additive_expr -> term .)
    STRING          reduce using rule 57 (additive_expr -> term .)
    TRUE            reduce using rule 57 (additive_expr -> term .)
    FALSE           reduce using rule 57 (additive_expr -> term .)
    LPAREN          reduce using rule 57 (additive_expr -> term .)
    $end            reduce using rule 57 (additive_expr -> term .)
    RPAREN          reduce using rule 57 (additive_expr -> term .)
    RBRACE          reduce using rule 57 (additive_expr -> term .)
    COMMA           reduce using rule 57 (additive_expr -> term .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82


state 35

    (63) factor -> MINUS . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 83
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 36

    (61) term -> factor .

    TIMES           reduce using rule 61 (term -> factor .)
    DIVIDE          reduce using rule 61 (term -> factor .)
    MOD             reduce using rule 61 (term -> factor .)
    PLUS            reduce using rule 61 (term -> factor .)
    MINUS           reduce using rule 61 (term -> factor .)
    LT              reduce using rule 61 (term -> factor .)
    LE              reduce using rule 61 (term -> factor .)
    GT              reduce using rule 61 (term -> factor .)
    GE              reduce using rule 61 (term -> factor .)
    EQ              reduce using rule 61 (term -> factor .)
    NEQ             reduce using rule 61 (term -> factor .)
    OR              reduce using rule 61 (term -> factor .)
    AND_OP          reduce using rule 61 (term -> factor .)
    AND             reduce using rule 61 (term -> factor .)
    OR_OP           reduce using rule 61 (term -> factor .)
    INCREMENT       reduce using rule 61 (term -> factor .)
    DECREMENT       reduce using rule 61 (term -> factor .)
    IMPORT          reduce using rule 61 (term -> factor .)
    IDENTIFIER      reduce using rule 61 (term -> factor .)
    PRINT           reduce using rule 61 (term -> factor .)
    IF              reduce using rule 61 (term -> factor .)
    WHILE           reduce using rule 61 (term -> factor .)
    DEFINE          reduce using rule 61 (term -> factor .)
    FOR             reduce using rule 61 (term -> factor .)
    RESULT          reduce using rule 61 (term -> factor .)
    WAIT            reduce using rule 61 (term -> factor .)
    LBRACE          reduce using rule 61 (term -> factor .)
    F_QUOTE         reduce using rule 61 (term -> factor .)
    NOT             reduce using rule 61 (term -> factor .)
    NUMBER          reduce using rule 61 (term -> factor .)
    STRING          reduce using rule 61 (term -> factor .)
    TRUE            reduce using rule 61 (term -> factor .)
    FALSE           reduce using rule 61 (term -> factor .)
    LPAREN          reduce using rule 61 (term -> factor .)
    $end            reduce using rule 61 (term -> factor .)
    RPAREN          reduce using rule 61 (term -> factor .)
    RBRACE          reduce using rule 61 (term -> factor .)
    COMMA           reduce using rule 61 (term -> factor .)


state 37

    (64) factor -> NOT . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 84
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 38

    (65) factor -> primary .

    TIMES           reduce using rule 65 (factor -> primary .)
    DIVIDE          reduce using rule 65 (factor -> primary .)
    MOD             reduce using rule 65 (factor -> primary .)
    PLUS            reduce using rule 65 (factor -> primary .)
    MINUS           reduce using rule 65 (factor -> primary .)
    LT              reduce using rule 65 (factor -> primary .)
    LE              reduce using rule 65 (factor -> primary .)
    GT              reduce using rule 65 (factor -> primary .)
    GE              reduce using rule 65 (factor -> primary .)
    EQ              reduce using rule 65 (factor -> primary .)
    NEQ             reduce using rule 65 (factor -> primary .)
    OR              reduce using rule 65 (factor -> primary .)
    AND_OP          reduce using rule 65 (factor -> primary .)
    AND             reduce using rule 65 (factor -> primary .)
    OR_OP           reduce using rule 65 (factor -> primary .)
    INCREMENT       reduce using rule 65 (factor -> primary .)
    DECREMENT       reduce using rule 65 (factor -> primary .)
    IMPORT          reduce using rule 65 (factor -> primary .)
    IDENTIFIER      reduce using rule 65 (factor -> primary .)
    PRINT           reduce using rule 65 (factor -> primary .)
    IF              reduce using rule 65 (factor -> primary .)
    WHILE           reduce using rule 65 (factor -> primary .)
    DEFINE          reduce using rule 65 (factor -> primary .)
    FOR             reduce using rule 65 (factor -> primary .)
    RESULT          reduce using rule 65 (factor -> primary .)
    WAIT            reduce using rule 65 (factor -> primary .)
    LBRACE          reduce using rule 65 (factor -> primary .)
    F_QUOTE         reduce using rule 65 (factor -> primary .)
    NOT             reduce using rule 65 (factor -> primary .)
    NUMBER          reduce using rule 65 (factor -> primary .)
    STRING          reduce using rule 65 (factor -> primary .)
    TRUE            reduce using rule 65 (factor -> primary .)
    FALSE           reduce using rule 65 (factor -> primary .)
    LPAREN          reduce using rule 65 (factor -> primary .)
    $end            reduce using rule 65 (factor -> primary .)
    RPAREN          reduce using rule 65 (factor -> primary .)
    RBRACE          reduce using rule 65 (factor -> primary .)
    COMMA           reduce using rule 65 (factor -> primary .)


state 39

    (66) primary -> atom . member_access_chain
    (73) member_access_chain -> . member_access_chain member_access
    (74) member_access_chain -> . empty
    (86) empty -> .

    DOT             reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MOD             reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NEQ             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND_OP          reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR_OP           reduce using rule 86 (empty -> .)
    INCREMENT       reduce using rule 86 (empty -> .)
    DECREMENT       reduce using rule 86 (empty -> .)
    IMPORT          reduce using rule 86 (empty -> .)
    IDENTIFIER      reduce using rule 86 (empty -> .)
    PRINT           reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    DEFINE          reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    RESULT          reduce using rule 86 (empty -> .)
    WAIT            reduce using rule 86 (empty -> .)
    LBRACE          reduce using rule 86 (empty -> .)
    F_QUOTE         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    NUMBER          reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RBRACE          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

    member_access_chain            shift and go to state 85
    empty                          shift and go to state 86

state 40

    (68) atom -> NUMBER .

    DOT             reduce using rule 68 (atom -> NUMBER .)
    TIMES           reduce using rule 68 (atom -> NUMBER .)
    DIVIDE          reduce using rule 68 (atom -> NUMBER .)
    MOD             reduce using rule 68 (atom -> NUMBER .)
    PLUS            reduce using rule 68 (atom -> NUMBER .)
    MINUS           reduce using rule 68 (atom -> NUMBER .)
    LT              reduce using rule 68 (atom -> NUMBER .)
    LE              reduce using rule 68 (atom -> NUMBER .)
    GT              reduce using rule 68 (atom -> NUMBER .)
    GE              reduce using rule 68 (atom -> NUMBER .)
    EQ              reduce using rule 68 (atom -> NUMBER .)
    NEQ             reduce using rule 68 (atom -> NUMBER .)
    OR              reduce using rule 68 (atom -> NUMBER .)
    AND_OP          reduce using rule 68 (atom -> NUMBER .)
    AND             reduce using rule 68 (atom -> NUMBER .)
    OR_OP           reduce using rule 68 (atom -> NUMBER .)
    INCREMENT       reduce using rule 68 (atom -> NUMBER .)
    DECREMENT       reduce using rule 68 (atom -> NUMBER .)
    IMPORT          reduce using rule 68 (atom -> NUMBER .)
    IDENTIFIER      reduce using rule 68 (atom -> NUMBER .)
    PRINT           reduce using rule 68 (atom -> NUMBER .)
    IF              reduce using rule 68 (atom -> NUMBER .)
    WHILE           reduce using rule 68 (atom -> NUMBER .)
    DEFINE          reduce using rule 68 (atom -> NUMBER .)
    FOR             reduce using rule 68 (atom -> NUMBER .)
    RESULT          reduce using rule 68 (atom -> NUMBER .)
    WAIT            reduce using rule 68 (atom -> NUMBER .)
    LBRACE          reduce using rule 68 (atom -> NUMBER .)
    F_QUOTE         reduce using rule 68 (atom -> NUMBER .)
    NOT             reduce using rule 68 (atom -> NUMBER .)
    NUMBER          reduce using rule 68 (atom -> NUMBER .)
    STRING          reduce using rule 68 (atom -> NUMBER .)
    TRUE            reduce using rule 68 (atom -> NUMBER .)
    FALSE           reduce using rule 68 (atom -> NUMBER .)
    LPAREN          reduce using rule 68 (atom -> NUMBER .)
    $end            reduce using rule 68 (atom -> NUMBER .)
    RPAREN          reduce using rule 68 (atom -> NUMBER .)
    RBRACE          reduce using rule 68 (atom -> NUMBER .)
    COMMA           reduce using rule 68 (atom -> NUMBER .)


state 41

    (69) atom -> STRING .

    DOT             reduce using rule 69 (atom -> STRING .)
    TIMES           reduce using rule 69 (atom -> STRING .)
    DIVIDE          reduce using rule 69 (atom -> STRING .)
    MOD             reduce using rule 69 (atom -> STRING .)
    PLUS            reduce using rule 69 (atom -> STRING .)
    MINUS           reduce using rule 69 (atom -> STRING .)
    LT              reduce using rule 69 (atom -> STRING .)
    LE              reduce using rule 69 (atom -> STRING .)
    GT              reduce using rule 69 (atom -> STRING .)
    GE              reduce using rule 69 (atom -> STRING .)
    EQ              reduce using rule 69 (atom -> STRING .)
    NEQ             reduce using rule 69 (atom -> STRING .)
    OR              reduce using rule 69 (atom -> STRING .)
    AND_OP          reduce using rule 69 (atom -> STRING .)
    AND             reduce using rule 69 (atom -> STRING .)
    OR_OP           reduce using rule 69 (atom -> STRING .)
    INCREMENT       reduce using rule 69 (atom -> STRING .)
    DECREMENT       reduce using rule 69 (atom -> STRING .)
    IMPORT          reduce using rule 69 (atom -> STRING .)
    IDENTIFIER      reduce using rule 69 (atom -> STRING .)
    PRINT           reduce using rule 69 (atom -> STRING .)
    IF              reduce using rule 69 (atom -> STRING .)
    WHILE           reduce using rule 69 (atom -> STRING .)
    DEFINE          reduce using rule 69 (atom -> STRING .)
    FOR             reduce using rule 69 (atom -> STRING .)
    RESULT          reduce using rule 69 (atom -> STRING .)
    WAIT            reduce using rule 69 (atom -> STRING .)
    LBRACE          reduce using rule 69 (atom -> STRING .)
    F_QUOTE         reduce using rule 69 (atom -> STRING .)
    NOT             reduce using rule 69 (atom -> STRING .)
    NUMBER          reduce using rule 69 (atom -> STRING .)
    STRING          reduce using rule 69 (atom -> STRING .)
    TRUE            reduce using rule 69 (atom -> STRING .)
    FALSE           reduce using rule 69 (atom -> STRING .)
    LPAREN          reduce using rule 69 (atom -> STRING .)
    $end            reduce using rule 69 (atom -> STRING .)
    RPAREN          reduce using rule 69 (atom -> STRING .)
    RBRACE          reduce using rule 69 (atom -> STRING .)
    COMMA           reduce using rule 69 (atom -> STRING .)


state 42

    (70) atom -> TRUE .

    DOT             reduce using rule 70 (atom -> TRUE .)
    TIMES           reduce using rule 70 (atom -> TRUE .)
    DIVIDE          reduce using rule 70 (atom -> TRUE .)
    MOD             reduce using rule 70 (atom -> TRUE .)
    PLUS            reduce using rule 70 (atom -> TRUE .)
    MINUS           reduce using rule 70 (atom -> TRUE .)
    LT              reduce using rule 70 (atom -> TRUE .)
    LE              reduce using rule 70 (atom -> TRUE .)
    GT              reduce using rule 70 (atom -> TRUE .)
    GE              reduce using rule 70 (atom -> TRUE .)
    EQ              reduce using rule 70 (atom -> TRUE .)
    NEQ             reduce using rule 70 (atom -> TRUE .)
    OR              reduce using rule 70 (atom -> TRUE .)
    AND_OP          reduce using rule 70 (atom -> TRUE .)
    AND             reduce using rule 70 (atom -> TRUE .)
    OR_OP           reduce using rule 70 (atom -> TRUE .)
    INCREMENT       reduce using rule 70 (atom -> TRUE .)
    DECREMENT       reduce using rule 70 (atom -> TRUE .)
    IMPORT          reduce using rule 70 (atom -> TRUE .)
    IDENTIFIER      reduce using rule 70 (atom -> TRUE .)
    PRINT           reduce using rule 70 (atom -> TRUE .)
    IF              reduce using rule 70 (atom -> TRUE .)
    WHILE           reduce using rule 70 (atom -> TRUE .)
    DEFINE          reduce using rule 70 (atom -> TRUE .)
    FOR             reduce using rule 70 (atom -> TRUE .)
    RESULT          reduce using rule 70 (atom -> TRUE .)
    WAIT            reduce using rule 70 (atom -> TRUE .)
    LBRACE          reduce using rule 70 (atom -> TRUE .)
    F_QUOTE         reduce using rule 70 (atom -> TRUE .)
    NOT             reduce using rule 70 (atom -> TRUE .)
    NUMBER          reduce using rule 70 (atom -> TRUE .)
    STRING          reduce using rule 70 (atom -> TRUE .)
    TRUE            reduce using rule 70 (atom -> TRUE .)
    FALSE           reduce using rule 70 (atom -> TRUE .)
    LPAREN          reduce using rule 70 (atom -> TRUE .)
    $end            reduce using rule 70 (atom -> TRUE .)
    RPAREN          reduce using rule 70 (atom -> TRUE .)
    RBRACE          reduce using rule 70 (atom -> TRUE .)
    COMMA           reduce using rule 70 (atom -> TRUE .)


state 43

    (71) atom -> FALSE .

    DOT             reduce using rule 71 (atom -> FALSE .)
    TIMES           reduce using rule 71 (atom -> FALSE .)
    DIVIDE          reduce using rule 71 (atom -> FALSE .)
    MOD             reduce using rule 71 (atom -> FALSE .)
    PLUS            reduce using rule 71 (atom -> FALSE .)
    MINUS           reduce using rule 71 (atom -> FALSE .)
    LT              reduce using rule 71 (atom -> FALSE .)
    LE              reduce using rule 71 (atom -> FALSE .)
    GT              reduce using rule 71 (atom -> FALSE .)
    GE              reduce using rule 71 (atom -> FALSE .)
    EQ              reduce using rule 71 (atom -> FALSE .)
    NEQ             reduce using rule 71 (atom -> FALSE .)
    OR              reduce using rule 71 (atom -> FALSE .)
    AND_OP          reduce using rule 71 (atom -> FALSE .)
    AND             reduce using rule 71 (atom -> FALSE .)
    OR_OP           reduce using rule 71 (atom -> FALSE .)
    INCREMENT       reduce using rule 71 (atom -> FALSE .)
    DECREMENT       reduce using rule 71 (atom -> FALSE .)
    IMPORT          reduce using rule 71 (atom -> FALSE .)
    IDENTIFIER      reduce using rule 71 (atom -> FALSE .)
    PRINT           reduce using rule 71 (atom -> FALSE .)
    IF              reduce using rule 71 (atom -> FALSE .)
    WHILE           reduce using rule 71 (atom -> FALSE .)
    DEFINE          reduce using rule 71 (atom -> FALSE .)
    FOR             reduce using rule 71 (atom -> FALSE .)
    RESULT          reduce using rule 71 (atom -> FALSE .)
    WAIT            reduce using rule 71 (atom -> FALSE .)
    LBRACE          reduce using rule 71 (atom -> FALSE .)
    F_QUOTE         reduce using rule 71 (atom -> FALSE .)
    NOT             reduce using rule 71 (atom -> FALSE .)
    NUMBER          reduce using rule 71 (atom -> FALSE .)
    STRING          reduce using rule 71 (atom -> FALSE .)
    TRUE            reduce using rule 71 (atom -> FALSE .)
    FALSE           reduce using rule 71 (atom -> FALSE .)
    LPAREN          reduce using rule 71 (atom -> FALSE .)
    $end            reduce using rule 71 (atom -> FALSE .)
    RPAREN          reduce using rule 71 (atom -> FALSE .)
    RBRACE          reduce using rule 71 (atom -> FALSE .)
    COMMA           reduce using rule 71 (atom -> FALSE .)


state 44

    (2) statement_list -> statement_list statement .

    IMPORT          reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    DEFINE          reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 2 (statement_list -> statement_list statement .)
    WAIT            reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    F_QUOTE         reduce using rule 2 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 45

    (32) statement -> IMPORT IDENTIFIER .

    IMPORT          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    PRINT           reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    IF              reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    WHILE           reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    DEFINE          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    FOR             reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    RESULT          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    WAIT            reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    LBRACE          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    F_QUOTE         reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    PLUS            reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    MINUS           reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    NOT             reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    NUMBER          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    STRING          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    TRUE            reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    FALSE           reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    LPAREN          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    $end            reduce using rule 32 (statement -> IMPORT IDENTIFIER .)
    RBRACE          reduce using rule 32 (statement -> IMPORT IDENTIFIER .)


state 46

    (19) assignment -> IDENTIFIER EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 87
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 47

    (17) expression -> IDENTIFIER PLUS_EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 88
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 48

    (18) expression -> IDENTIFIER MINUS_EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 89
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 49

    (15) expression -> expression INCREMENT .

    INCREMENT       reduce using rule 15 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 15 (expression -> expression INCREMENT .)
    IMPORT          reduce using rule 15 (expression -> expression INCREMENT .)
    IDENTIFIER      reduce using rule 15 (expression -> expression INCREMENT .)
    PRINT           reduce using rule 15 (expression -> expression INCREMENT .)
    IF              reduce using rule 15 (expression -> expression INCREMENT .)
    WHILE           reduce using rule 15 (expression -> expression INCREMENT .)
    DEFINE          reduce using rule 15 (expression -> expression INCREMENT .)
    FOR             reduce using rule 15 (expression -> expression INCREMENT .)
    RESULT          reduce using rule 15 (expression -> expression INCREMENT .)
    WAIT            reduce using rule 15 (expression -> expression INCREMENT .)
    LBRACE          reduce using rule 15 (expression -> expression INCREMENT .)
    F_QUOTE         reduce using rule 15 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 15 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 15 (expression -> expression INCREMENT .)
    NOT             reduce using rule 15 (expression -> expression INCREMENT .)
    NUMBER          reduce using rule 15 (expression -> expression INCREMENT .)
    STRING          reduce using rule 15 (expression -> expression INCREMENT .)
    TRUE            reduce using rule 15 (expression -> expression INCREMENT .)
    FALSE           reduce using rule 15 (expression -> expression INCREMENT .)
    LPAREN          reduce using rule 15 (expression -> expression INCREMENT .)
    $end            reduce using rule 15 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 15 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 15 (expression -> expression INCREMENT .)
    COMMA           reduce using rule 15 (expression -> expression INCREMENT .)


state 50

    (16) expression -> expression DECREMENT .

    INCREMENT       reduce using rule 16 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 16 (expression -> expression DECREMENT .)
    IMPORT          reduce using rule 16 (expression -> expression DECREMENT .)
    IDENTIFIER      reduce using rule 16 (expression -> expression DECREMENT .)
    PRINT           reduce using rule 16 (expression -> expression DECREMENT .)
    IF              reduce using rule 16 (expression -> expression DECREMENT .)
    WHILE           reduce using rule 16 (expression -> expression DECREMENT .)
    DEFINE          reduce using rule 16 (expression -> expression DECREMENT .)
    FOR             reduce using rule 16 (expression -> expression DECREMENT .)
    RESULT          reduce using rule 16 (expression -> expression DECREMENT .)
    WAIT            reduce using rule 16 (expression -> expression DECREMENT .)
    LBRACE          reduce using rule 16 (expression -> expression DECREMENT .)
    F_QUOTE         reduce using rule 16 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 16 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 16 (expression -> expression DECREMENT .)
    NOT             reduce using rule 16 (expression -> expression DECREMENT .)
    NUMBER          reduce using rule 16 (expression -> expression DECREMENT .)
    STRING          reduce using rule 16 (expression -> expression DECREMENT .)
    TRUE            reduce using rule 16 (expression -> expression DECREMENT .)
    FALSE           reduce using rule 16 (expression -> expression DECREMENT .)
    LPAREN          reduce using rule 16 (expression -> expression DECREMENT .)
    $end            reduce using rule 16 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 16 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 16 (expression -> expression DECREMENT .)
    COMMA           reduce using rule 16 (expression -> expression DECREMENT .)


state 51

    (20) print_statement -> PRINT LPAREN . expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 90
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 52

    (72) atom -> LPAREN expression . RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          shift and go to state 91
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 53

    (17) expression -> IDENTIFIER . PLUS_EQUALS expression
    (18) expression -> IDENTIFIER . MINUS_EQUALS expression
    (67) atom -> IDENTIFIER .

    PLUS_EQUALS     shift and go to state 47
    MINUS_EQUALS    shift and go to state 48
    DOT             reduce using rule 67 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 67 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 67 (atom -> IDENTIFIER .)
    MOD             reduce using rule 67 (atom -> IDENTIFIER .)
    PLUS            reduce using rule 67 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 67 (atom -> IDENTIFIER .)
    LT              reduce using rule 67 (atom -> IDENTIFIER .)
    LE              reduce using rule 67 (atom -> IDENTIFIER .)
    GT              reduce using rule 67 (atom -> IDENTIFIER .)
    GE              reduce using rule 67 (atom -> IDENTIFIER .)
    EQ              reduce using rule 67 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 67 (atom -> IDENTIFIER .)
    OR              reduce using rule 67 (atom -> IDENTIFIER .)
    AND_OP          reduce using rule 67 (atom -> IDENTIFIER .)
    AND             reduce using rule 67 (atom -> IDENTIFIER .)
    OR_OP           reduce using rule 67 (atom -> IDENTIFIER .)
    RPAREN          reduce using rule 67 (atom -> IDENTIFIER .)
    INCREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    DECREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    LBRACE          reduce using rule 67 (atom -> IDENTIFIER .)
    IMPORT          reduce using rule 67 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 67 (atom -> IDENTIFIER .)
    PRINT           reduce using rule 67 (atom -> IDENTIFIER .)
    IF              reduce using rule 67 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 67 (atom -> IDENTIFIER .)
    DEFINE          reduce using rule 67 (atom -> IDENTIFIER .)
    FOR             reduce using rule 67 (atom -> IDENTIFIER .)
    RESULT          reduce using rule 67 (atom -> IDENTIFIER .)
    WAIT            reduce using rule 67 (atom -> IDENTIFIER .)
    F_QUOTE         reduce using rule 67 (atom -> IDENTIFIER .)
    NOT             reduce using rule 67 (atom -> IDENTIFIER .)
    NUMBER          reduce using rule 67 (atom -> IDENTIFIER .)
    STRING          reduce using rule 67 (atom -> IDENTIFIER .)
    TRUE            reduce using rule 67 (atom -> IDENTIFIER .)
    FALSE           reduce using rule 67 (atom -> IDENTIFIER .)
    LPAREN          reduce using rule 67 (atom -> IDENTIFIER .)
    $end            reduce using rule 67 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 67 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 67 (atom -> IDENTIFIER .)


state 54

    (21) if_statement -> IF expression . block
    (22) if_statement -> IF expression . block ELSE block
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LBRACE          shift and go to state 25

    block                          shift and go to state 92

state 55

    (26) while_statement -> WHILE expression . block
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LBRACE          shift and go to state 25

    block                          shift and go to state 93

state 56

    (27) function_def -> DEFINE IDENTIFIER . LPAREN RPAREN block
    (28) function_def -> DEFINE IDENTIFIER . LPAREN param_list RPAREN block

    LPAREN          shift and go to state 94


state 57

    (23) for_loop -> FOR IDENTIFIER . IN expression block

    IN              shift and go to state 95


state 58

    (33) return_statement -> RESULT expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IMPORT          reduce using rule 33 (return_statement -> RESULT expression .)
    IDENTIFIER      reduce using rule 33 (return_statement -> RESULT expression .)
    PRINT           reduce using rule 33 (return_statement -> RESULT expression .)
    IF              reduce using rule 33 (return_statement -> RESULT expression .)
    WHILE           reduce using rule 33 (return_statement -> RESULT expression .)
    DEFINE          reduce using rule 33 (return_statement -> RESULT expression .)
    FOR             reduce using rule 33 (return_statement -> RESULT expression .)
    RESULT          reduce using rule 33 (return_statement -> RESULT expression .)
    WAIT            reduce using rule 33 (return_statement -> RESULT expression .)
    LBRACE          reduce using rule 33 (return_statement -> RESULT expression .)
    F_QUOTE         reduce using rule 33 (return_statement -> RESULT expression .)
    PLUS            reduce using rule 33 (return_statement -> RESULT expression .)
    MINUS           reduce using rule 33 (return_statement -> RESULT expression .)
    NOT             reduce using rule 33 (return_statement -> RESULT expression .)
    NUMBER          reduce using rule 33 (return_statement -> RESULT expression .)
    STRING          reduce using rule 33 (return_statement -> RESULT expression .)
    TRUE            reduce using rule 33 (return_statement -> RESULT expression .)
    FALSE           reduce using rule 33 (return_statement -> RESULT expression .)
    LPAREN          reduce using rule 33 (return_statement -> RESULT expression .)
    $end            reduce using rule 33 (return_statement -> RESULT expression .)
    RBRACE          reduce using rule 33 (return_statement -> RESULT expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 59

    (78) wait_statement -> WAIT expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IMPORT          reduce using rule 78 (wait_statement -> WAIT expression .)
    IDENTIFIER      reduce using rule 78 (wait_statement -> WAIT expression .)
    PRINT           reduce using rule 78 (wait_statement -> WAIT expression .)
    IF              reduce using rule 78 (wait_statement -> WAIT expression .)
    WHILE           reduce using rule 78 (wait_statement -> WAIT expression .)
    DEFINE          reduce using rule 78 (wait_statement -> WAIT expression .)
    FOR             reduce using rule 78 (wait_statement -> WAIT expression .)
    RESULT          reduce using rule 78 (wait_statement -> WAIT expression .)
    WAIT            reduce using rule 78 (wait_statement -> WAIT expression .)
    LBRACE          reduce using rule 78 (wait_statement -> WAIT expression .)
    F_QUOTE         reduce using rule 78 (wait_statement -> WAIT expression .)
    PLUS            reduce using rule 78 (wait_statement -> WAIT expression .)
    MINUS           reduce using rule 78 (wait_statement -> WAIT expression .)
    NOT             reduce using rule 78 (wait_statement -> WAIT expression .)
    NUMBER          reduce using rule 78 (wait_statement -> WAIT expression .)
    STRING          reduce using rule 78 (wait_statement -> WAIT expression .)
    TRUE            reduce using rule 78 (wait_statement -> WAIT expression .)
    FALSE           reduce using rule 78 (wait_statement -> WAIT expression .)
    LPAREN          reduce using rule 78 (wait_statement -> WAIT expression .)
    $end            reduce using rule 78 (wait_statement -> WAIT expression .)
    RBRACE          reduce using rule 78 (wait_statement -> WAIT expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 60

    (84) block -> LBRACE RBRACE .

    IMPORT          reduce using rule 84 (block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 84 (block -> LBRACE RBRACE .)
    PRINT           reduce using rule 84 (block -> LBRACE RBRACE .)
    IF              reduce using rule 84 (block -> LBRACE RBRACE .)
    WHILE           reduce using rule 84 (block -> LBRACE RBRACE .)
    DEFINE          reduce using rule 84 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 84 (block -> LBRACE RBRACE .)
    RESULT          reduce using rule 84 (block -> LBRACE RBRACE .)
    WAIT            reduce using rule 84 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 84 (block -> LBRACE RBRACE .)
    F_QUOTE         reduce using rule 84 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 84 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 84 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 84 (block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 84 (block -> LBRACE RBRACE .)
    STRING          reduce using rule 84 (block -> LBRACE RBRACE .)
    TRUE            reduce using rule 84 (block -> LBRACE RBRACE .)
    FALSE           reduce using rule 84 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 84 (block -> LBRACE RBRACE .)
    $end            reduce using rule 84 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 84 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 84 (block -> LBRACE RBRACE .)


state 61

    (85) block -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (32) statement -> . IMPORT IDENTIFIER
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (26) while_statement -> . WHILE expression block
    (27) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN expression block
    (33) return_statement -> . RESULT expression
    (78) wait_statement -> . WAIT expression
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 96
    IMPORT          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    DEFINE          shift and go to state 21
    FOR             shift and go to state 22
    RESULT          shift and go to state 23
    WAIT            shift and go to state 24
    LBRACE          shift and go to state 25
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    statement                      shift and go to state 44
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 16
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 62

    (41) logic_expr -> logic_expr OR_OP . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    logic_term                     shift and go to state 97
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 63

    (36) fstring -> F_QUOTE fstring_content . QUOTE
    (37) fstring_content -> fstring_content . fstring_part
    (39) fstring_part -> . STRING_CONTENT
    (40) fstring_part -> . LBRACE expression RBRACE

    QUOTE           shift and go to state 98
    STRING_CONTENT  shift and go to state 65
    LBRACE          shift and go to state 66

    fstring_part                   shift and go to state 99

state 64

    (38) fstring_content -> fstring_part .

    QUOTE           reduce using rule 38 (fstring_content -> fstring_part .)
    STRING_CONTENT  reduce using rule 38 (fstring_content -> fstring_part .)
    LBRACE          reduce using rule 38 (fstring_content -> fstring_part .)


state 65

    (39) fstring_part -> STRING_CONTENT .

    QUOTE           reduce using rule 39 (fstring_part -> STRING_CONTENT .)
    STRING_CONTENT  reduce using rule 39 (fstring_part -> STRING_CONTENT .)
    LBRACE          reduce using rule 39 (fstring_part -> STRING_CONTENT .)


state 66

    (40) fstring_part -> LBRACE . expression RBRACE
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 100
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 67

    (42) logic_expr -> logic_term OR . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    logic_term                     shift and go to state 101
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 68

    (44) logic_term -> logic_term AND_OP . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    equality_expr                  shift and go to state 102
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 69

    (45) logic_term -> logic_term AND . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    equality_expr                  shift and go to state 103
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 70

    (47) equality_expr -> equality_expr EQ . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    relational_expr                shift and go to state 104
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 71

    (48) equality_expr -> equality_expr NEQ . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    relational_expr                shift and go to state 105
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 72

    (50) relational_expr -> relational_expr LT . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    additive_expr                  shift and go to state 106
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 73

    (51) relational_expr -> relational_expr LE . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    additive_expr                  shift and go to state 107
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 74

    (52) relational_expr -> relational_expr GT . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    additive_expr                  shift and go to state 108
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 75

    (53) relational_expr -> relational_expr GE . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    additive_expr                  shift and go to state 109
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 76

    (55) additive_expr -> additive_expr PLUS . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    term                           shift and go to state 110
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 77

    (56) additive_expr -> additive_expr MINUS . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    term                           shift and go to state 111
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 78

    (62) factor -> PLUS factor .

    TIMES           reduce using rule 62 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 62 (factor -> PLUS factor .)
    MOD             reduce using rule 62 (factor -> PLUS factor .)
    PLUS            reduce using rule 62 (factor -> PLUS factor .)
    MINUS           reduce using rule 62 (factor -> PLUS factor .)
    LT              reduce using rule 62 (factor -> PLUS factor .)
    LE              reduce using rule 62 (factor -> PLUS factor .)
    GT              reduce using rule 62 (factor -> PLUS factor .)
    GE              reduce using rule 62 (factor -> PLUS factor .)
    EQ              reduce using rule 62 (factor -> PLUS factor .)
    NEQ             reduce using rule 62 (factor -> PLUS factor .)
    OR              reduce using rule 62 (factor -> PLUS factor .)
    AND_OP          reduce using rule 62 (factor -> PLUS factor .)
    AND             reduce using rule 62 (factor -> PLUS factor .)
    OR_OP           reduce using rule 62 (factor -> PLUS factor .)
    INCREMENT       reduce using rule 62 (factor -> PLUS factor .)
    DECREMENT       reduce using rule 62 (factor -> PLUS factor .)
    IMPORT          reduce using rule 62 (factor -> PLUS factor .)
    IDENTIFIER      reduce using rule 62 (factor -> PLUS factor .)
    PRINT           reduce using rule 62 (factor -> PLUS factor .)
    IF              reduce using rule 62 (factor -> PLUS factor .)
    WHILE           reduce using rule 62 (factor -> PLUS factor .)
    DEFINE          reduce using rule 62 (factor -> PLUS factor .)
    FOR             reduce using rule 62 (factor -> PLUS factor .)
    RESULT          reduce using rule 62 (factor -> PLUS factor .)
    WAIT            reduce using rule 62 (factor -> PLUS factor .)
    LBRACE          reduce using rule 62 (factor -> PLUS factor .)
    F_QUOTE         reduce using rule 62 (factor -> PLUS factor .)
    NOT             reduce using rule 62 (factor -> PLUS factor .)
    NUMBER          reduce using rule 62 (factor -> PLUS factor .)
    STRING          reduce using rule 62 (factor -> PLUS factor .)
    TRUE            reduce using rule 62 (factor -> PLUS factor .)
    FALSE           reduce using rule 62 (factor -> PLUS factor .)
    LPAREN          reduce using rule 62 (factor -> PLUS factor .)
    $end            reduce using rule 62 (factor -> PLUS factor .)
    RPAREN          reduce using rule 62 (factor -> PLUS factor .)
    RBRACE          reduce using rule 62 (factor -> PLUS factor .)
    COMMA           reduce using rule 62 (factor -> PLUS factor .)


state 79

    (67) atom -> IDENTIFIER .

    DOT             reduce using rule 67 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 67 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 67 (atom -> IDENTIFIER .)
    MOD             reduce using rule 67 (atom -> IDENTIFIER .)
    PLUS            reduce using rule 67 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 67 (atom -> IDENTIFIER .)
    LT              reduce using rule 67 (atom -> IDENTIFIER .)
    LE              reduce using rule 67 (atom -> IDENTIFIER .)
    GT              reduce using rule 67 (atom -> IDENTIFIER .)
    GE              reduce using rule 67 (atom -> IDENTIFIER .)
    EQ              reduce using rule 67 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 67 (atom -> IDENTIFIER .)
    OR              reduce using rule 67 (atom -> IDENTIFIER .)
    AND_OP          reduce using rule 67 (atom -> IDENTIFIER .)
    AND             reduce using rule 67 (atom -> IDENTIFIER .)
    OR_OP           reduce using rule 67 (atom -> IDENTIFIER .)
    INCREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    DECREMENT       reduce using rule 67 (atom -> IDENTIFIER .)
    IMPORT          reduce using rule 67 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 67 (atom -> IDENTIFIER .)
    PRINT           reduce using rule 67 (atom -> IDENTIFIER .)
    IF              reduce using rule 67 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 67 (atom -> IDENTIFIER .)
    DEFINE          reduce using rule 67 (atom -> IDENTIFIER .)
    FOR             reduce using rule 67 (atom -> IDENTIFIER .)
    RESULT          reduce using rule 67 (atom -> IDENTIFIER .)
    WAIT            reduce using rule 67 (atom -> IDENTIFIER .)
    LBRACE          reduce using rule 67 (atom -> IDENTIFIER .)
    F_QUOTE         reduce using rule 67 (atom -> IDENTIFIER .)
    NOT             reduce using rule 67 (atom -> IDENTIFIER .)
    NUMBER          reduce using rule 67 (atom -> IDENTIFIER .)
    STRING          reduce using rule 67 (atom -> IDENTIFIER .)
    TRUE            reduce using rule 67 (atom -> IDENTIFIER .)
    FALSE           reduce using rule 67 (atom -> IDENTIFIER .)
    LPAREN          reduce using rule 67 (atom -> IDENTIFIER .)
    $end            reduce using rule 67 (atom -> IDENTIFIER .)
    RPAREN          reduce using rule 67 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 67 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 67 (atom -> IDENTIFIER .)


state 80

    (58) term -> term TIMES . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 112
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 81

    (59) term -> term DIVIDE . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 113
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 82

    (60) term -> term MOD . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    IDENTIFIER      shift and go to state 79
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    factor                         shift and go to state 114
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 83

    (63) factor -> MINUS factor .

    TIMES           reduce using rule 63 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 63 (factor -> MINUS factor .)
    MOD             reduce using rule 63 (factor -> MINUS factor .)
    PLUS            reduce using rule 63 (factor -> MINUS factor .)
    MINUS           reduce using rule 63 (factor -> MINUS factor .)
    LT              reduce using rule 63 (factor -> MINUS factor .)
    LE              reduce using rule 63 (factor -> MINUS factor .)
    GT              reduce using rule 63 (factor -> MINUS factor .)
    GE              reduce using rule 63 (factor -> MINUS factor .)
    EQ              reduce using rule 63 (factor -> MINUS factor .)
    NEQ             reduce using rule 63 (factor -> MINUS factor .)
    OR              reduce using rule 63 (factor -> MINUS factor .)
    AND_OP          reduce using rule 63 (factor -> MINUS factor .)
    AND             reduce using rule 63 (factor -> MINUS factor .)
    OR_OP           reduce using rule 63 (factor -> MINUS factor .)
    INCREMENT       reduce using rule 63 (factor -> MINUS factor .)
    DECREMENT       reduce using rule 63 (factor -> MINUS factor .)
    IMPORT          reduce using rule 63 (factor -> MINUS factor .)
    IDENTIFIER      reduce using rule 63 (factor -> MINUS factor .)
    PRINT           reduce using rule 63 (factor -> MINUS factor .)
    IF              reduce using rule 63 (factor -> MINUS factor .)
    WHILE           reduce using rule 63 (factor -> MINUS factor .)
    DEFINE          reduce using rule 63 (factor -> MINUS factor .)
    FOR             reduce using rule 63 (factor -> MINUS factor .)
    RESULT          reduce using rule 63 (factor -> MINUS factor .)
    WAIT            reduce using rule 63 (factor -> MINUS factor .)
    LBRACE          reduce using rule 63 (factor -> MINUS factor .)
    F_QUOTE         reduce using rule 63 (factor -> MINUS factor .)
    NOT             reduce using rule 63 (factor -> MINUS factor .)
    NUMBER          reduce using rule 63 (factor -> MINUS factor .)
    STRING          reduce using rule 63 (factor -> MINUS factor .)
    TRUE            reduce using rule 63 (factor -> MINUS factor .)
    FALSE           reduce using rule 63 (factor -> MINUS factor .)
    LPAREN          reduce using rule 63 (factor -> MINUS factor .)
    $end            reduce using rule 63 (factor -> MINUS factor .)
    RPAREN          reduce using rule 63 (factor -> MINUS factor .)
    RBRACE          reduce using rule 63 (factor -> MINUS factor .)
    COMMA           reduce using rule 63 (factor -> MINUS factor .)


state 84

    (64) factor -> NOT factor .

    TIMES           reduce using rule 64 (factor -> NOT factor .)
    DIVIDE          reduce using rule 64 (factor -> NOT factor .)
    MOD             reduce using rule 64 (factor -> NOT factor .)
    PLUS            reduce using rule 64 (factor -> NOT factor .)
    MINUS           reduce using rule 64 (factor -> NOT factor .)
    LT              reduce using rule 64 (factor -> NOT factor .)
    LE              reduce using rule 64 (factor -> NOT factor .)
    GT              reduce using rule 64 (factor -> NOT factor .)
    GE              reduce using rule 64 (factor -> NOT factor .)
    EQ              reduce using rule 64 (factor -> NOT factor .)
    NEQ             reduce using rule 64 (factor -> NOT factor .)
    OR              reduce using rule 64 (factor -> NOT factor .)
    AND_OP          reduce using rule 64 (factor -> NOT factor .)
    AND             reduce using rule 64 (factor -> NOT factor .)
    OR_OP           reduce using rule 64 (factor -> NOT factor .)
    INCREMENT       reduce using rule 64 (factor -> NOT factor .)
    DECREMENT       reduce using rule 64 (factor -> NOT factor .)
    IMPORT          reduce using rule 64 (factor -> NOT factor .)
    IDENTIFIER      reduce using rule 64 (factor -> NOT factor .)
    PRINT           reduce using rule 64 (factor -> NOT factor .)
    IF              reduce using rule 64 (factor -> NOT factor .)
    WHILE           reduce using rule 64 (factor -> NOT factor .)
    DEFINE          reduce using rule 64 (factor -> NOT factor .)
    FOR             reduce using rule 64 (factor -> NOT factor .)
    RESULT          reduce using rule 64 (factor -> NOT factor .)
    WAIT            reduce using rule 64 (factor -> NOT factor .)
    LBRACE          reduce using rule 64 (factor -> NOT factor .)
    F_QUOTE         reduce using rule 64 (factor -> NOT factor .)
    NOT             reduce using rule 64 (factor -> NOT factor .)
    NUMBER          reduce using rule 64 (factor -> NOT factor .)
    STRING          reduce using rule 64 (factor -> NOT factor .)
    TRUE            reduce using rule 64 (factor -> NOT factor .)
    FALSE           reduce using rule 64 (factor -> NOT factor .)
    LPAREN          reduce using rule 64 (factor -> NOT factor .)
    $end            reduce using rule 64 (factor -> NOT factor .)
    RPAREN          reduce using rule 64 (factor -> NOT factor .)
    RBRACE          reduce using rule 64 (factor -> NOT factor .)
    COMMA           reduce using rule 64 (factor -> NOT factor .)


state 85

    (66) primary -> atom member_access_chain .
    (73) member_access_chain -> member_access_chain . member_access
    (75) member_access -> . DOT IDENTIFIER
    (76) member_access -> . DOT IDENTIFIER LPAREN arg_list RPAREN
    (77) member_access -> . DOT IDENTIFIER LPAREN RPAREN

    TIMES           reduce using rule 66 (primary -> atom member_access_chain .)
    DIVIDE          reduce using rule 66 (primary -> atom member_access_chain .)
    MOD             reduce using rule 66 (primary -> atom member_access_chain .)
    PLUS            reduce using rule 66 (primary -> atom member_access_chain .)
    MINUS           reduce using rule 66 (primary -> atom member_access_chain .)
    LT              reduce using rule 66 (primary -> atom member_access_chain .)
    LE              reduce using rule 66 (primary -> atom member_access_chain .)
    GT              reduce using rule 66 (primary -> atom member_access_chain .)
    GE              reduce using rule 66 (primary -> atom member_access_chain .)
    EQ              reduce using rule 66 (primary -> atom member_access_chain .)
    NEQ             reduce using rule 66 (primary -> atom member_access_chain .)
    OR              reduce using rule 66 (primary -> atom member_access_chain .)
    AND_OP          reduce using rule 66 (primary -> atom member_access_chain .)
    AND             reduce using rule 66 (primary -> atom member_access_chain .)
    OR_OP           reduce using rule 66 (primary -> atom member_access_chain .)
    INCREMENT       reduce using rule 66 (primary -> atom member_access_chain .)
    DECREMENT       reduce using rule 66 (primary -> atom member_access_chain .)
    IMPORT          reduce using rule 66 (primary -> atom member_access_chain .)
    IDENTIFIER      reduce using rule 66 (primary -> atom member_access_chain .)
    PRINT           reduce using rule 66 (primary -> atom member_access_chain .)
    IF              reduce using rule 66 (primary -> atom member_access_chain .)
    WHILE           reduce using rule 66 (primary -> atom member_access_chain .)
    DEFINE          reduce using rule 66 (primary -> atom member_access_chain .)
    FOR             reduce using rule 66 (primary -> atom member_access_chain .)
    RESULT          reduce using rule 66 (primary -> atom member_access_chain .)
    WAIT            reduce using rule 66 (primary -> atom member_access_chain .)
    LBRACE          reduce using rule 66 (primary -> atom member_access_chain .)
    F_QUOTE         reduce using rule 66 (primary -> atom member_access_chain .)
    NOT             reduce using rule 66 (primary -> atom member_access_chain .)
    NUMBER          reduce using rule 66 (primary -> atom member_access_chain .)
    STRING          reduce using rule 66 (primary -> atom member_access_chain .)
    TRUE            reduce using rule 66 (primary -> atom member_access_chain .)
    FALSE           reduce using rule 66 (primary -> atom member_access_chain .)
    LPAREN          reduce using rule 66 (primary -> atom member_access_chain .)
    $end            reduce using rule 66 (primary -> atom member_access_chain .)
    RPAREN          reduce using rule 66 (primary -> atom member_access_chain .)
    RBRACE          reduce using rule 66 (primary -> atom member_access_chain .)
    COMMA           reduce using rule 66 (primary -> atom member_access_chain .)
    DOT             shift and go to state 116

    member_access                  shift and go to state 115

state 86

    (74) member_access_chain -> empty .

    DOT             reduce using rule 74 (member_access_chain -> empty .)
    TIMES           reduce using rule 74 (member_access_chain -> empty .)
    DIVIDE          reduce using rule 74 (member_access_chain -> empty .)
    MOD             reduce using rule 74 (member_access_chain -> empty .)
    PLUS            reduce using rule 74 (member_access_chain -> empty .)
    MINUS           reduce using rule 74 (member_access_chain -> empty .)
    LT              reduce using rule 74 (member_access_chain -> empty .)
    LE              reduce using rule 74 (member_access_chain -> empty .)
    GT              reduce using rule 74 (member_access_chain -> empty .)
    GE              reduce using rule 74 (member_access_chain -> empty .)
    EQ              reduce using rule 74 (member_access_chain -> empty .)
    NEQ             reduce using rule 74 (member_access_chain -> empty .)
    OR              reduce using rule 74 (member_access_chain -> empty .)
    AND_OP          reduce using rule 74 (member_access_chain -> empty .)
    AND             reduce using rule 74 (member_access_chain -> empty .)
    OR_OP           reduce using rule 74 (member_access_chain -> empty .)
    INCREMENT       reduce using rule 74 (member_access_chain -> empty .)
    DECREMENT       reduce using rule 74 (member_access_chain -> empty .)
    IMPORT          reduce using rule 74 (member_access_chain -> empty .)
    IDENTIFIER      reduce using rule 74 (member_access_chain -> empty .)
    PRINT           reduce using rule 74 (member_access_chain -> empty .)
    IF              reduce using rule 74 (member_access_chain -> empty .)
    WHILE           reduce using rule 74 (member_access_chain -> empty .)
    DEFINE          reduce using rule 74 (member_access_chain -> empty .)
    FOR             reduce using rule 74 (member_access_chain -> empty .)
    RESULT          reduce using rule 74 (member_access_chain -> empty .)
    WAIT            reduce using rule 74 (member_access_chain -> empty .)
    LBRACE          reduce using rule 74 (member_access_chain -> empty .)
    F_QUOTE         reduce using rule 74 (member_access_chain -> empty .)
    NOT             reduce using rule 74 (member_access_chain -> empty .)
    NUMBER          reduce using rule 74 (member_access_chain -> empty .)
    STRING          reduce using rule 74 (member_access_chain -> empty .)
    TRUE            reduce using rule 74 (member_access_chain -> empty .)
    FALSE           reduce using rule 74 (member_access_chain -> empty .)
    LPAREN          reduce using rule 74 (member_access_chain -> empty .)
    $end            reduce using rule 74 (member_access_chain -> empty .)
    RPAREN          reduce using rule 74 (member_access_chain -> empty .)
    RBRACE          reduce using rule 74 (member_access_chain -> empty .)
    COMMA           reduce using rule 74 (member_access_chain -> empty .)


state 87

    (19) assignment -> IDENTIFIER EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IMPORT          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    PRINT           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    IF              reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    WHILE           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    DEFINE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    FOR             reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    RESULT          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    WAIT            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    LBRACE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    F_QUOTE         reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    PLUS            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    MINUS           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    NOT             reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    NUMBER          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    STRING          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    TRUE            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    FALSE           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    LPAREN          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 88

    (17) expression -> IDENTIFIER PLUS_EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    IMPORT          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    IDENTIFIER      reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    PRINT           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    IF              reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    WHILE           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    DEFINE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    FOR             reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RESULT          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    WAIT            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    LBRACE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    F_QUOTE         reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    PLUS            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    MINUS           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    NOT             reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    NUMBER          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    STRING          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    TRUE            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    FALSE           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    LPAREN          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    $end            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RPAREN          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RBRACE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    COMMA           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50

  ! INCREMENT       [ reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .) ]
  ! DECREMENT       [ reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .) ]


state 89

    (18) expression -> IDENTIFIER MINUS_EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    IMPORT          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    IDENTIFIER      reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    PRINT           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    IF              reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    WHILE           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    DEFINE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    FOR             reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RESULT          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    WAIT            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    LBRACE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    F_QUOTE         reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    PLUS            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    MINUS           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    NOT             reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    NUMBER          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    STRING          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    TRUE            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    FALSE           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    LPAREN          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    $end            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RPAREN          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RBRACE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    COMMA           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50

  ! INCREMENT       [ reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .) ]
  ! DECREMENT       [ reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .) ]


state 90

    (20) print_statement -> PRINT LPAREN expression . RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          shift and go to state 117
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 91

    (72) atom -> LPAREN expression RPAREN .

    DOT             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    MOD             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    LT              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    LE              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    GT              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    GE              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    EQ              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    OR              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    AND             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    IF              reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    DEFINE          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    FOR             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    RESULT          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    WAIT            reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    F_QUOTE         reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    NOT             reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    STRING          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    $end            reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 72 (atom -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (atom -> LPAREN expression RPAREN .)


state 92

    (21) if_statement -> IF expression block .
    (22) if_statement -> IF expression block . ELSE block

    IMPORT          reduce using rule 21 (if_statement -> IF expression block .)
    IDENTIFIER      reduce using rule 21 (if_statement -> IF expression block .)
    PRINT           reduce using rule 21 (if_statement -> IF expression block .)
    IF              reduce using rule 21 (if_statement -> IF expression block .)
    WHILE           reduce using rule 21 (if_statement -> IF expression block .)
    DEFINE          reduce using rule 21 (if_statement -> IF expression block .)
    FOR             reduce using rule 21 (if_statement -> IF expression block .)
    RESULT          reduce using rule 21 (if_statement -> IF expression block .)
    WAIT            reduce using rule 21 (if_statement -> IF expression block .)
    LBRACE          reduce using rule 21 (if_statement -> IF expression block .)
    F_QUOTE         reduce using rule 21 (if_statement -> IF expression block .)
    PLUS            reduce using rule 21 (if_statement -> IF expression block .)
    MINUS           reduce using rule 21 (if_statement -> IF expression block .)
    NOT             reduce using rule 21 (if_statement -> IF expression block .)
    NUMBER          reduce using rule 21 (if_statement -> IF expression block .)
    STRING          reduce using rule 21 (if_statement -> IF expression block .)
    TRUE            reduce using rule 21 (if_statement -> IF expression block .)
    FALSE           reduce using rule 21 (if_statement -> IF expression block .)
    LPAREN          reduce using rule 21 (if_statement -> IF expression block .)
    $end            reduce using rule 21 (if_statement -> IF expression block .)
    RBRACE          reduce using rule 21 (if_statement -> IF expression block .)
    ELSE            shift and go to state 118


state 93

    (26) while_statement -> WHILE expression block .

    IMPORT          reduce using rule 26 (while_statement -> WHILE expression block .)
    IDENTIFIER      reduce using rule 26 (while_statement -> WHILE expression block .)
    PRINT           reduce using rule 26 (while_statement -> WHILE expression block .)
    IF              reduce using rule 26 (while_statement -> WHILE expression block .)
    WHILE           reduce using rule 26 (while_statement -> WHILE expression block .)
    DEFINE          reduce using rule 26 (while_statement -> WHILE expression block .)
    FOR             reduce using rule 26 (while_statement -> WHILE expression block .)
    RESULT          reduce using rule 26 (while_statement -> WHILE expression block .)
    WAIT            reduce using rule 26 (while_statement -> WHILE expression block .)
    LBRACE          reduce using rule 26 (while_statement -> WHILE expression block .)
    F_QUOTE         reduce using rule 26 (while_statement -> WHILE expression block .)
    PLUS            reduce using rule 26 (while_statement -> WHILE expression block .)
    MINUS           reduce using rule 26 (while_statement -> WHILE expression block .)
    NOT             reduce using rule 26 (while_statement -> WHILE expression block .)
    NUMBER          reduce using rule 26 (while_statement -> WHILE expression block .)
    STRING          reduce using rule 26 (while_statement -> WHILE expression block .)
    TRUE            reduce using rule 26 (while_statement -> WHILE expression block .)
    FALSE           reduce using rule 26 (while_statement -> WHILE expression block .)
    LPAREN          reduce using rule 26 (while_statement -> WHILE expression block .)
    $end            reduce using rule 26 (while_statement -> WHILE expression block .)
    RBRACE          reduce using rule 26 (while_statement -> WHILE expression block .)


state 94

    (27) function_def -> DEFINE IDENTIFIER LPAREN . RPAREN block
    (28) function_def -> DEFINE IDENTIFIER LPAREN . param_list RPAREN block
    (29) param_list -> . IDENTIFIER
    (30) param_list -> . param_list COMMA IDENTIFIER
    (31) param_list -> . empty
    (86) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 120
    IDENTIFIER      shift and go to state 119
    COMMA           reduce using rule 86 (empty -> .)

  ! RPAREN          [ reduce using rule 86 (empty -> .) ]

    param_list                     shift and go to state 121
    empty                          shift and go to state 122

state 95

    (23) for_loop -> FOR IDENTIFIER IN . expression block
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 123
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 96

    (85) block -> LBRACE statement_list RBRACE .

    IMPORT          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    DEFINE          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    RESULT          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    WAIT            reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    F_QUOTE         reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 85 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 85 (block -> LBRACE statement_list RBRACE .)


state 97

    (41) logic_expr -> logic_expr OR_OP logic_term .
    (44) logic_term -> logic_term . AND_OP equality_expr
    (45) logic_term -> logic_term . AND equality_expr

    OR_OP           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    INCREMENT       reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    DECREMENT       reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    IMPORT          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    IDENTIFIER      reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    PRINT           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    IF              reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    WHILE           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    DEFINE          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    FOR             reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    RESULT          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    WAIT            reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    LBRACE          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    F_QUOTE         reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    PLUS            reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    MINUS           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    NOT             reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    NUMBER          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    STRING          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    TRUE            reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    FALSE           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    LPAREN          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    $end            reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    RPAREN          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    RBRACE          reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    COMMA           reduce using rule 41 (logic_expr -> logic_expr OR_OP logic_term .)
    AND_OP          shift and go to state 68
    AND             shift and go to state 69


state 98

    (36) fstring -> F_QUOTE fstring_content QUOTE .

    INCREMENT       reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    DECREMENT       reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    IMPORT          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    IDENTIFIER      reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    PRINT           reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    IF              reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    WHILE           reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    DEFINE          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    FOR             reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    RESULT          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    WAIT            reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    LBRACE          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    F_QUOTE         reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    PLUS            reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    MINUS           reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    NOT             reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    NUMBER          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    STRING          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    TRUE            reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    FALSE           reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    LPAREN          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    $end            reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    RPAREN          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    RBRACE          reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)
    COMMA           reduce using rule 36 (fstring -> F_QUOTE fstring_content QUOTE .)


state 99

    (37) fstring_content -> fstring_content fstring_part .

    QUOTE           reduce using rule 37 (fstring_content -> fstring_content fstring_part .)
    STRING_CONTENT  reduce using rule 37 (fstring_content -> fstring_content fstring_part .)
    LBRACE          reduce using rule 37 (fstring_content -> fstring_content fstring_part .)


state 100

    (40) fstring_part -> LBRACE expression . RBRACE
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RBRACE          shift and go to state 124
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 101

    (42) logic_expr -> logic_term OR logic_term .
    (44) logic_term -> logic_term . AND_OP equality_expr
    (45) logic_term -> logic_term . AND equality_expr

    OR_OP           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    INCREMENT       reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    DECREMENT       reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    IMPORT          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    IDENTIFIER      reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    PRINT           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    IF              reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    WHILE           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    DEFINE          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    FOR             reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    RESULT          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    WAIT            reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    LBRACE          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    F_QUOTE         reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    PLUS            reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    MINUS           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    NOT             reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    NUMBER          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    STRING          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    TRUE            reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    FALSE           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    LPAREN          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    $end            reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    RPAREN          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    RBRACE          reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    COMMA           reduce using rule 42 (logic_expr -> logic_term OR logic_term .)
    AND_OP          shift and go to state 68
    AND             shift and go to state 69


state 102

    (44) logic_term -> logic_term AND_OP equality_expr .
    (47) equality_expr -> equality_expr . EQ relational_expr
    (48) equality_expr -> equality_expr . NEQ relational_expr

    OR              reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    AND_OP          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    AND             reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    OR_OP           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    INCREMENT       reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    DECREMENT       reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    IMPORT          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    IDENTIFIER      reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    PRINT           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    IF              reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    WHILE           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    DEFINE          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    FOR             reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    RESULT          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    WAIT            reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    LBRACE          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    F_QUOTE         reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    PLUS            reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    MINUS           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    NOT             reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    NUMBER          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    STRING          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    TRUE            reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    FALSE           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    LPAREN          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    $end            reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    RPAREN          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    RBRACE          reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    COMMA           reduce using rule 44 (logic_term -> logic_term AND_OP equality_expr .)
    EQ              shift and go to state 70
    NEQ             shift and go to state 71


state 103

    (45) logic_term -> logic_term AND equality_expr .
    (47) equality_expr -> equality_expr . EQ relational_expr
    (48) equality_expr -> equality_expr . NEQ relational_expr

    OR              reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    AND_OP          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    AND             reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    OR_OP           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    INCREMENT       reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    DECREMENT       reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    IMPORT          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    IDENTIFIER      reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    PRINT           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    IF              reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    WHILE           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    DEFINE          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    FOR             reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    RESULT          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    WAIT            reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    LBRACE          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    F_QUOTE         reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    PLUS            reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    MINUS           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    NOT             reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    NUMBER          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    STRING          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    TRUE            reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    FALSE           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    LPAREN          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    $end            reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    RPAREN          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    RBRACE          reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    COMMA           reduce using rule 45 (logic_term -> logic_term AND equality_expr .)
    EQ              shift and go to state 70
    NEQ             shift and go to state 71


state 104

    (47) equality_expr -> equality_expr EQ relational_expr .
    (50) relational_expr -> relational_expr . LT additive_expr
    (51) relational_expr -> relational_expr . LE additive_expr
    (52) relational_expr -> relational_expr . GT additive_expr
    (53) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    NEQ             reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    OR              reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    AND_OP          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    AND             reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    OR_OP           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    INCREMENT       reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    DECREMENT       reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    IMPORT          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    IDENTIFIER      reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    PRINT           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    IF              reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    WHILE           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    DEFINE          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    FOR             reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    RESULT          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    WAIT            reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    LBRACE          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    F_QUOTE         reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    PLUS            reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    MINUS           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    NOT             reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    NUMBER          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    STRING          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    TRUE            reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    FALSE           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    LPAREN          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    $end            reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    RPAREN          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    RBRACE          reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    COMMA           reduce using rule 47 (equality_expr -> equality_expr EQ relational_expr .)
    LT              shift and go to state 72
    LE              shift and go to state 73
    GT              shift and go to state 74
    GE              shift and go to state 75


state 105

    (48) equality_expr -> equality_expr NEQ relational_expr .
    (50) relational_expr -> relational_expr . LT additive_expr
    (51) relational_expr -> relational_expr . LE additive_expr
    (52) relational_expr -> relational_expr . GT additive_expr
    (53) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    NEQ             reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    OR              reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    AND_OP          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    AND             reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    OR_OP           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    INCREMENT       reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    DECREMENT       reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    IMPORT          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    IDENTIFIER      reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    PRINT           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    IF              reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    WHILE           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    DEFINE          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    FOR             reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    RESULT          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    WAIT            reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    LBRACE          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    F_QUOTE         reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    PLUS            reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    MINUS           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    NOT             reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    NUMBER          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    STRING          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    TRUE            reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    FALSE           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    LPAREN          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    $end            reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    RPAREN          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    RBRACE          reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    COMMA           reduce using rule 48 (equality_expr -> equality_expr NEQ relational_expr .)
    LT              shift and go to state 72
    LE              shift and go to state 73
    GT              shift and go to state 74
    GE              shift and go to state 75


state 106

    (50) relational_expr -> relational_expr LT additive_expr .
    (55) additive_expr -> additive_expr . PLUS term
    (56) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    LE              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    GT              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    GE              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    EQ              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    NEQ             reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    OR              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    AND_OP          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    AND             reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    OR_OP           reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    INCREMENT       reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    DECREMENT       reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    IMPORT          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    IDENTIFIER      reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    PRINT           reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    IF              reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    WHILE           reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    DEFINE          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    FOR             reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    RESULT          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    WAIT            reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    LBRACE          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    F_QUOTE         reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    NOT             reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    NUMBER          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    STRING          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    TRUE            reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    FALSE           reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    LPAREN          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    $end            reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    RPAREN          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    RBRACE          reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    COMMA           reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! PLUS            [ reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .) ]
  ! MINUS           [ reduce using rule 50 (relational_expr -> relational_expr LT additive_expr .) ]


state 107

    (51) relational_expr -> relational_expr LE additive_expr .
    (55) additive_expr -> additive_expr . PLUS term
    (56) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    LE              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    GT              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    GE              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    EQ              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    NEQ             reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    OR              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    AND_OP          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    AND             reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    OR_OP           reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    INCREMENT       reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    DECREMENT       reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    IMPORT          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    IDENTIFIER      reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    PRINT           reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    IF              reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    WHILE           reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    DEFINE          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    FOR             reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    RESULT          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    WAIT            reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    LBRACE          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    F_QUOTE         reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    NOT             reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    NUMBER          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    STRING          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    TRUE            reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    FALSE           reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    LPAREN          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    $end            reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    RPAREN          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    RBRACE          reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    COMMA           reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! PLUS            [ reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .) ]
  ! MINUS           [ reduce using rule 51 (relational_expr -> relational_expr LE additive_expr .) ]


state 108

    (52) relational_expr -> relational_expr GT additive_expr .
    (55) additive_expr -> additive_expr . PLUS term
    (56) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    LE              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    GT              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    GE              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    EQ              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    NEQ             reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    OR              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    AND_OP          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    AND             reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    OR_OP           reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    INCREMENT       reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    DECREMENT       reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    IMPORT          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    IDENTIFIER      reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    PRINT           reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    IF              reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    WHILE           reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    DEFINE          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    FOR             reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    RESULT          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    WAIT            reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    LBRACE          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    F_QUOTE         reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    NOT             reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    NUMBER          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    STRING          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    TRUE            reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    FALSE           reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    LPAREN          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    $end            reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    RPAREN          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    RBRACE          reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    COMMA           reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! PLUS            [ reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .) ]
  ! MINUS           [ reduce using rule 52 (relational_expr -> relational_expr GT additive_expr .) ]


state 109

    (53) relational_expr -> relational_expr GE additive_expr .
    (55) additive_expr -> additive_expr . PLUS term
    (56) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    LE              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    GT              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    GE              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    EQ              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    NEQ             reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    OR              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    AND_OP          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    AND             reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    OR_OP           reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    INCREMENT       reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    DECREMENT       reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    IMPORT          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    IDENTIFIER      reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    PRINT           reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    IF              reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    WHILE           reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    DEFINE          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    FOR             reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    RESULT          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    WAIT            reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    LBRACE          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    F_QUOTE         reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    NOT             reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    NUMBER          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    STRING          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    TRUE            reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    FALSE           reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    LPAREN          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    $end            reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    RPAREN          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    RBRACE          reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    COMMA           reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! PLUS            [ reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .) ]
  ! MINUS           [ reduce using rule 53 (relational_expr -> relational_expr GE additive_expr .) ]


state 110

    (55) additive_expr -> additive_expr PLUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . MOD factor

    PLUS            reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    MINUS           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    LT              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    LE              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    GT              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    GE              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    EQ              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    NEQ             reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    OR              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    AND_OP          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    AND             reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    OR_OP           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    INCREMENT       reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    DECREMENT       reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    IMPORT          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    IDENTIFIER      reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    PRINT           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    IF              reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    WHILE           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    DEFINE          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    FOR             reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    RESULT          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    WAIT            reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    LBRACE          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    F_QUOTE         reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    NOT             reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    NUMBER          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    STRING          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    TRUE            reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    FALSE           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    LPAREN          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    $end            reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    RPAREN          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    RBRACE          reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    COMMA           reduce using rule 55 (additive_expr -> additive_expr PLUS term .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82


state 111

    (56) additive_expr -> additive_expr MINUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . MOD factor

    PLUS            reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    MINUS           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    LT              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    LE              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    GT              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    GE              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    EQ              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    NEQ             reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    OR              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    AND_OP          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    AND             reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    OR_OP           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    INCREMENT       reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    DECREMENT       reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    IMPORT          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    IDENTIFIER      reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    PRINT           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    IF              reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    WHILE           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    DEFINE          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    FOR             reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    RESULT          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    WAIT            reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    LBRACE          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    F_QUOTE         reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    NOT             reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    NUMBER          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    STRING          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    TRUE            reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    FALSE           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    LPAREN          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    $end            reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    RPAREN          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    RBRACE          reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    COMMA           reduce using rule 56 (additive_expr -> additive_expr MINUS term .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 82


state 112

    (58) term -> term TIMES factor .

    TIMES           reduce using rule 58 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 58 (term -> term TIMES factor .)
    MOD             reduce using rule 58 (term -> term TIMES factor .)
    PLUS            reduce using rule 58 (term -> term TIMES factor .)
    MINUS           reduce using rule 58 (term -> term TIMES factor .)
    LT              reduce using rule 58 (term -> term TIMES factor .)
    LE              reduce using rule 58 (term -> term TIMES factor .)
    GT              reduce using rule 58 (term -> term TIMES factor .)
    GE              reduce using rule 58 (term -> term TIMES factor .)
    EQ              reduce using rule 58 (term -> term TIMES factor .)
    NEQ             reduce using rule 58 (term -> term TIMES factor .)
    OR              reduce using rule 58 (term -> term TIMES factor .)
    AND_OP          reduce using rule 58 (term -> term TIMES factor .)
    AND             reduce using rule 58 (term -> term TIMES factor .)
    OR_OP           reduce using rule 58 (term -> term TIMES factor .)
    INCREMENT       reduce using rule 58 (term -> term TIMES factor .)
    DECREMENT       reduce using rule 58 (term -> term TIMES factor .)
    IMPORT          reduce using rule 58 (term -> term TIMES factor .)
    IDENTIFIER      reduce using rule 58 (term -> term TIMES factor .)
    PRINT           reduce using rule 58 (term -> term TIMES factor .)
    IF              reduce using rule 58 (term -> term TIMES factor .)
    WHILE           reduce using rule 58 (term -> term TIMES factor .)
    DEFINE          reduce using rule 58 (term -> term TIMES factor .)
    FOR             reduce using rule 58 (term -> term TIMES factor .)
    RESULT          reduce using rule 58 (term -> term TIMES factor .)
    WAIT            reduce using rule 58 (term -> term TIMES factor .)
    LBRACE          reduce using rule 58 (term -> term TIMES factor .)
    F_QUOTE         reduce using rule 58 (term -> term TIMES factor .)
    NOT             reduce using rule 58 (term -> term TIMES factor .)
    NUMBER          reduce using rule 58 (term -> term TIMES factor .)
    STRING          reduce using rule 58 (term -> term TIMES factor .)
    TRUE            reduce using rule 58 (term -> term TIMES factor .)
    FALSE           reduce using rule 58 (term -> term TIMES factor .)
    LPAREN          reduce using rule 58 (term -> term TIMES factor .)
    $end            reduce using rule 58 (term -> term TIMES factor .)
    RPAREN          reduce using rule 58 (term -> term TIMES factor .)
    RBRACE          reduce using rule 58 (term -> term TIMES factor .)
    COMMA           reduce using rule 58 (term -> term TIMES factor .)


state 113

    (59) term -> term DIVIDE factor .

    TIMES           reduce using rule 59 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 59 (term -> term DIVIDE factor .)
    MOD             reduce using rule 59 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 59 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 59 (term -> term DIVIDE factor .)
    LT              reduce using rule 59 (term -> term DIVIDE factor .)
    LE              reduce using rule 59 (term -> term DIVIDE factor .)
    GT              reduce using rule 59 (term -> term DIVIDE factor .)
    GE              reduce using rule 59 (term -> term DIVIDE factor .)
    EQ              reduce using rule 59 (term -> term DIVIDE factor .)
    NEQ             reduce using rule 59 (term -> term DIVIDE factor .)
    OR              reduce using rule 59 (term -> term DIVIDE factor .)
    AND_OP          reduce using rule 59 (term -> term DIVIDE factor .)
    AND             reduce using rule 59 (term -> term DIVIDE factor .)
    OR_OP           reduce using rule 59 (term -> term DIVIDE factor .)
    INCREMENT       reduce using rule 59 (term -> term DIVIDE factor .)
    DECREMENT       reduce using rule 59 (term -> term DIVIDE factor .)
    IMPORT          reduce using rule 59 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 59 (term -> term DIVIDE factor .)
    PRINT           reduce using rule 59 (term -> term DIVIDE factor .)
    IF              reduce using rule 59 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 59 (term -> term DIVIDE factor .)
    DEFINE          reduce using rule 59 (term -> term DIVIDE factor .)
    FOR             reduce using rule 59 (term -> term DIVIDE factor .)
    RESULT          reduce using rule 59 (term -> term DIVIDE factor .)
    WAIT            reduce using rule 59 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 59 (term -> term DIVIDE factor .)
    F_QUOTE         reduce using rule 59 (term -> term DIVIDE factor .)
    NOT             reduce using rule 59 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 59 (term -> term DIVIDE factor .)
    STRING          reduce using rule 59 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 59 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 59 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 59 (term -> term DIVIDE factor .)
    $end            reduce using rule 59 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 59 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 59 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 59 (term -> term DIVIDE factor .)


state 114

    (60) term -> term MOD factor .

    TIMES           reduce using rule 60 (term -> term MOD factor .)
    DIVIDE          reduce using rule 60 (term -> term MOD factor .)
    MOD             reduce using rule 60 (term -> term MOD factor .)
    PLUS            reduce using rule 60 (term -> term MOD factor .)
    MINUS           reduce using rule 60 (term -> term MOD factor .)
    LT              reduce using rule 60 (term -> term MOD factor .)
    LE              reduce using rule 60 (term -> term MOD factor .)
    GT              reduce using rule 60 (term -> term MOD factor .)
    GE              reduce using rule 60 (term -> term MOD factor .)
    EQ              reduce using rule 60 (term -> term MOD factor .)
    NEQ             reduce using rule 60 (term -> term MOD factor .)
    OR              reduce using rule 60 (term -> term MOD factor .)
    AND_OP          reduce using rule 60 (term -> term MOD factor .)
    AND             reduce using rule 60 (term -> term MOD factor .)
    OR_OP           reduce using rule 60 (term -> term MOD factor .)
    INCREMENT       reduce using rule 60 (term -> term MOD factor .)
    DECREMENT       reduce using rule 60 (term -> term MOD factor .)
    IMPORT          reduce using rule 60 (term -> term MOD factor .)
    IDENTIFIER      reduce using rule 60 (term -> term MOD factor .)
    PRINT           reduce using rule 60 (term -> term MOD factor .)
    IF              reduce using rule 60 (term -> term MOD factor .)
    WHILE           reduce using rule 60 (term -> term MOD factor .)
    DEFINE          reduce using rule 60 (term -> term MOD factor .)
    FOR             reduce using rule 60 (term -> term MOD factor .)
    RESULT          reduce using rule 60 (term -> term MOD factor .)
    WAIT            reduce using rule 60 (term -> term MOD factor .)
    LBRACE          reduce using rule 60 (term -> term MOD factor .)
    F_QUOTE         reduce using rule 60 (term -> term MOD factor .)
    NOT             reduce using rule 60 (term -> term MOD factor .)
    NUMBER          reduce using rule 60 (term -> term MOD factor .)
    STRING          reduce using rule 60 (term -> term MOD factor .)
    TRUE            reduce using rule 60 (term -> term MOD factor .)
    FALSE           reduce using rule 60 (term -> term MOD factor .)
    LPAREN          reduce using rule 60 (term -> term MOD factor .)
    $end            reduce using rule 60 (term -> term MOD factor .)
    RPAREN          reduce using rule 60 (term -> term MOD factor .)
    RBRACE          reduce using rule 60 (term -> term MOD factor .)
    COMMA           reduce using rule 60 (term -> term MOD factor .)


state 115

    (73) member_access_chain -> member_access_chain member_access .

    DOT             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    TIMES           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    DIVIDE          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    MOD             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    PLUS            reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    MINUS           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    LT              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    LE              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    GT              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    GE              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    EQ              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    NEQ             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    OR              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    AND_OP          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    AND             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    OR_OP           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    INCREMENT       reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    DECREMENT       reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    IMPORT          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    IDENTIFIER      reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    PRINT           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    IF              reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    WHILE           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    DEFINE          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    FOR             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    RESULT          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    WAIT            reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    LBRACE          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    F_QUOTE         reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    NOT             reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    NUMBER          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    STRING          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    TRUE            reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    FALSE           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    LPAREN          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    $end            reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    RPAREN          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    RBRACE          reduce using rule 73 (member_access_chain -> member_access_chain member_access .)
    COMMA           reduce using rule 73 (member_access_chain -> member_access_chain member_access .)


state 116

    (75) member_access -> DOT . IDENTIFIER
    (76) member_access -> DOT . IDENTIFIER LPAREN arg_list RPAREN
    (77) member_access -> DOT . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 125


state 117

    (20) print_statement -> PRINT LPAREN expression RPAREN .

    IMPORT          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFINE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    RESULT          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    WAIT            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    LBRACE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    F_QUOTE         reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    PLUS            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    MINUS           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    NOT             reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    NUMBER          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    STRING          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    TRUE            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FALSE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)


state 118

    (22) if_statement -> IF expression block ELSE . block
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 126

state 119

    (29) param_list -> IDENTIFIER .

    RPAREN          reduce using rule 29 (param_list -> IDENTIFIER .)
    COMMA           reduce using rule 29 (param_list -> IDENTIFIER .)


state 120

    (27) function_def -> DEFINE IDENTIFIER LPAREN RPAREN . block
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 127

state 121

    (28) function_def -> DEFINE IDENTIFIER LPAREN param_list . RPAREN block
    (30) param_list -> param_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 129


state 122

    (31) param_list -> empty .

    RPAREN          reduce using rule 31 (param_list -> empty .)
    COMMA           reduce using rule 31 (param_list -> empty .)


state 123

    (23) for_loop -> FOR IDENTIFIER IN expression . block
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LBRACE          shift and go to state 25

    block                          shift and go to state 130

state 124

    (40) fstring_part -> LBRACE expression RBRACE .

    QUOTE           reduce using rule 40 (fstring_part -> LBRACE expression RBRACE .)
    STRING_CONTENT  reduce using rule 40 (fstring_part -> LBRACE expression RBRACE .)
    LBRACE          reduce using rule 40 (fstring_part -> LBRACE expression RBRACE .)


state 125

    (75) member_access -> DOT IDENTIFIER .
    (76) member_access -> DOT IDENTIFIER . LPAREN arg_list RPAREN
    (77) member_access -> DOT IDENTIFIER . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    TIMES           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    DIVIDE          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    MOD             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    PLUS            reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    MINUS           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    LT              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    LE              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    GT              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    GE              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    EQ              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    NEQ             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    OR              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    AND_OP          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    AND             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    OR_OP           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    INCREMENT       reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    DECREMENT       reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    IMPORT          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    PRINT           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    IF              reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    WHILE           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    DEFINE          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    FOR             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    RESULT          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    WAIT            reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    LBRACE          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    F_QUOTE         reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    NOT             reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    NUMBER          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    STRING          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    TRUE            reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    FALSE           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    $end            reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    RBRACE          reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    COMMA           reduce using rule 75 (member_access -> DOT IDENTIFIER .)
    LPAREN          shift and go to state 131

  ! LPAREN          [ reduce using rule 75 (member_access -> DOT IDENTIFIER .) ]


state 126

    (22) if_statement -> IF expression block ELSE block .

    IMPORT          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    IDENTIFIER      reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    PRINT           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    IF              reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    WHILE           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    DEFINE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    FOR             reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    RESULT          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    WAIT            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    LBRACE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    F_QUOTE         reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    PLUS            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    MINUS           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    NOT             reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    NUMBER          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    STRING          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    TRUE            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    FALSE           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    LPAREN          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    $end            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    RBRACE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)


state 127

    (27) function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .

    IMPORT          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    IDENTIFIER      reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    PRINT           reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    IF              reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    WHILE           reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    DEFINE          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    FOR             reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    RESULT          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    WAIT            reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    LBRACE          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    F_QUOTE         reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    PLUS            reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    MINUS           reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    NOT             reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    NUMBER          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    STRING          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    TRUE            reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    FALSE           reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    LPAREN          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    $end            reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    RBRACE          reduce using rule 27 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)


state 128

    (28) function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN . block
    (84) block -> . LBRACE RBRACE
    (85) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 132

state 129

    (30) param_list -> param_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 133


state 130

    (23) for_loop -> FOR IDENTIFIER IN expression block .

    IMPORT          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    IDENTIFIER      reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    PRINT           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    IF              reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    WHILE           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    DEFINE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    FOR             reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    RESULT          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    WAIT            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    LBRACE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    F_QUOTE         reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    PLUS            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    MINUS           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    NOT             reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    NUMBER          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    STRING          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    TRUE            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    FALSE           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    LPAREN          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    $end            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)
    RBRACE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN expression block .)


state 131

    (76) member_access -> DOT IDENTIFIER LPAREN . arg_list RPAREN
    (77) member_access -> DOT IDENTIFIER LPAREN . RPAREN
    (81) arg_list -> . expression
    (82) arg_list -> . arg_list COMMA expression
    (83) arg_list -> . empty
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (86) empty -> .
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 135
    IDENTIFIER      shift and go to state 53
    COMMA           reduce using rule 86 (empty -> .)
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

  ! RPAREN          [ reduce using rule 86 (empty -> .) ]

    arg_list                       shift and go to state 134
    expression                     shift and go to state 136
    empty                          shift and go to state 137
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 132

    (28) function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .

    IMPORT          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    IDENTIFIER      reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    PRINT           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    IF              reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    WHILE           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    DEFINE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    FOR             reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    RESULT          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    WAIT            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    LBRACE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    F_QUOTE         reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    PLUS            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    MINUS           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    NOT             reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    NUMBER          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    STRING          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    TRUE            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    FALSE           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    LPAREN          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    $end            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    RBRACE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)


state 133

    (30) param_list -> param_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 30 (param_list -> param_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 30 (param_list -> param_list COMMA IDENTIFIER .)


state 134

    (76) member_access -> DOT IDENTIFIER LPAREN arg_list . RPAREN
    (82) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 135

    (77) member_access -> DOT IDENTIFIER LPAREN RPAREN .

    DOT             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    MOD             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    GE              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    EQ              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    NEQ             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    AND_OP          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    OR_OP           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    INCREMENT       reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    DECREMENT       reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    IMPORT          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    PRINT           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    WHILE           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    DEFINE          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    FOR             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    RESULT          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    WAIT            reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    F_QUOTE         reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    NOT             reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    STRING          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    TRUE            reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    FALSE           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    $end            reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 77 (member_access -> DOT IDENTIFIER LPAREN RPAREN .)


state 136

    (81) arg_list -> expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          reduce using rule 81 (arg_list -> expression .)
    COMMA           reduce using rule 81 (arg_list -> expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 137

    (83) arg_list -> empty .

    RPAREN          reduce using rule 83 (arg_list -> empty .)
    COMMA           reduce using rule 83 (arg_list -> empty .)


state 138

    (76) member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .

    DOT             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    OR              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    AND_OP          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    AND             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    OR_OP           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    INCREMENT       reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DECREMENT       reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IMPORT          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    PRINT           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DEFINE          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RESULT          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WAIT            reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    F_QUOTE         reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NOT             reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    STRING          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    TRUE            reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FALSE           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 76 (member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN .)


state 139

    (82) arg_list -> arg_list COMMA . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (34) expression -> . fstring
    (35) expression -> . logic_expr
    (36) fstring -> . F_QUOTE fstring_content QUOTE
    (41) logic_expr -> . logic_expr OR_OP logic_term
    (42) logic_expr -> . logic_term OR logic_term
    (43) logic_expr -> . logic_term
    (44) logic_term -> . logic_term AND_OP equality_expr
    (45) logic_term -> . logic_term AND equality_expr
    (46) logic_term -> . equality_expr
    (47) equality_expr -> . equality_expr EQ relational_expr
    (48) equality_expr -> . equality_expr NEQ relational_expr
    (49) equality_expr -> . relational_expr
    (50) relational_expr -> . relational_expr LT additive_expr
    (51) relational_expr -> . relational_expr LE additive_expr
    (52) relational_expr -> . relational_expr GT additive_expr
    (53) relational_expr -> . relational_expr GE additive_expr
    (54) relational_expr -> . additive_expr
    (55) additive_expr -> . additive_expr PLUS term
    (56) additive_expr -> . additive_expr MINUS term
    (57) additive_expr -> . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term MOD factor
    (61) term -> . factor
    (62) factor -> . PLUS factor
    (63) factor -> . MINUS factor
    (64) factor -> . NOT factor
    (65) factor -> . primary
    (66) primary -> . atom member_access_chain
    (67) atom -> . IDENTIFIER
    (68) atom -> . NUMBER
    (69) atom -> . STRING
    (70) atom -> . TRUE
    (71) atom -> . FALSE
    (72) atom -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 53
    F_QUOTE         shift and go to state 28
    PLUS            shift and go to state 33
    MINUS           shift and go to state 35
    NOT             shift and go to state 37
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    LPAREN          shift and go to state 18

    expression                     shift and go to state 140
    fstring                        shift and go to state 26
    logic_expr                     shift and go to state 27
    logic_term                     shift and go to state 29
    equality_expr                  shift and go to state 30
    relational_expr                shift and go to state 31
    additive_expr                  shift and go to state 32
    term                           shift and go to state 34
    factor                         shift and go to state 36
    primary                        shift and go to state 38
    atom                           shift and go to state 39

state 140

    (82) arg_list -> arg_list COMMA expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          reduce using rule 82 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 82 (arg_list -> arg_list COMMA expression .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 88 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 88 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 89 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 89 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 125 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 131 resolved as shift
