Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> assignment
Rule 5     statement -> print_statement
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> function_def
Rule 9     statement -> for_loop
Rule 10    statement -> return_statement
Rule 11    statement -> wait_statement
Rule 12    statement -> block
Rule 13    statement -> expression_statement
Rule 14    expression_statement -> expression
Rule 15    expression -> expression INCREMENT
Rule 16    expression -> expression DECREMENT
Rule 17    expression -> IDENTIFIER PLUS_EQUALS expression
Rule 18    expression -> IDENTIFIER MINUS_EQUALS expression
Rule 19    assignment -> IDENTIFIER EQUALS expression
Rule 20    print_statement -> PRINT LPAREN expression RPAREN
Rule 21    if_statement -> IF expression block
Rule 22    if_statement -> IF expression block ELSE block
Rule 23    for_loop -> FOR IDENTIFIER IN iterable block
Rule 24    iterable -> expression
Rule 25    iterable -> RANGE LPAREN expression COMMA expression RPAREN
Rule 26    expression -> FSTRING
Rule 27    while_statement -> WHILE expression block
Rule 28    function_def -> DEFINE IDENTIFIER LPAREN RPAREN block
Rule 29    function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block
Rule 30    param_list -> IDENTIFIER
Rule 31    param_list -> param_list COMMA IDENTIFIER
Rule 32    param_list -> empty
Rule 33    return_statement -> RESULT expression
Rule 34    expression -> logic_expr
Rule 35    logic_expr -> logic_expr OR_OP logic_term
Rule 36    logic_expr -> logic_term
Rule 37    logic_term -> logic_term AND_OP equality_expr
Rule 38    logic_term -> equality_expr
Rule 39    equality_expr -> equality_expr EQ relational_expr
Rule 40    equality_expr -> equality_expr NEQ relational_expr
Rule 41    equality_expr -> relational_expr
Rule 42    relational_expr -> relational_expr LT additive_expr
Rule 43    relational_expr -> relational_expr LE additive_expr
Rule 44    relational_expr -> relational_expr GT additive_expr
Rule 45    relational_expr -> relational_expr GE additive_expr
Rule 46    relational_expr -> additive_expr
Rule 47    additive_expr -> additive_expr PLUS term
Rule 48    additive_expr -> additive_expr MINUS term
Rule 49    additive_expr -> term
Rule 50    term -> term TIMES factor
Rule 51    term -> term DIVIDE factor
Rule 52    term -> term MOD factor
Rule 53    term -> factor
Rule 54    factor -> PLUS factor
Rule 55    factor -> MINUS factor
Rule 56    factor -> NOT factor
Rule 57    factor -> primary
Rule 58    primary -> primary DOT IDENTIFIER
Rule 59    primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN
Rule 60    primary -> function_call
Rule 61    primary -> TRUE
Rule 62    primary -> FALSE
Rule 63    primary -> NUMBER
Rule 64    primary -> STRING
Rule 65    primary -> IDENTIFIER
Rule 66    primary -> LPAREN expression RPAREN
Rule 67    wait_statement -> WAIT expression
Rule 68    function_call -> IDENTIFIER LPAREN RPAREN
Rule 69    function_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 70    arg_list -> expression
Rule 71    arg_list -> arg_list COMMA expression
Rule 72    arg_list -> empty
Rule 73    block -> LBRACE RBRACE
Rule 74    block -> LBRACE statement_list RBRACE
Rule 75    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
AND_OP               : 37
COMMA                : 25 31 71
DECREMENT            : 16
DEFINE               : 28 29
DIVIDE               : 51
DOT                  : 58 59
ELSE                 : 22
EQ                   : 39
EQUALS               : 19
FALSE                : 62
FOR                  : 23
FSTRING              : 26
GE                   : 45
GT                   : 44
IDENTIFIER           : 17 18 19 23 28 29 30 31 58 59 65 68 69
IF                   : 21 22
IN                   : 23
INCREMENT            : 15
LBRACE               : 73 74
LE                   : 43
LPAREN               : 20 25 28 29 59 66 68 69
LT                   : 42
MINUS                : 48 55
MINUS_EQUALS         : 18
MOD                  : 52
NEQ                  : 40
NOT                  : 56
NUMBER               : 63
OR                   : 
OR_OP                : 35
PLUS                 : 47 54
PLUS_EQUALS          : 17
PRINT                : 20
RANGE                : 25
RBRACE               : 73 74
RESULT               : 33
RPAREN               : 20 25 28 29 59 66 68 69
STRING               : 64
TIMES                : 50
TRUE                 : 61
WAIT                 : 67
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

additive_expr        : 42 43 44 45 46 47 48
arg_list             : 59 69 71
assignment           : 4
block                : 12 21 22 22 23 27 28 29
empty                : 32 72
equality_expr        : 37 38 39 40
expression           : 14 15 16 17 18 19 20 21 22 24 25 25 27 33 66 67 70 71
expression_statement : 13
factor               : 50 51 52 53 54 55 56
for_loop             : 9
function_call        : 60
function_def         : 8
if_statement         : 6
iterable             : 23
logic_expr           : 34 35
logic_term           : 35 36 37
param_list           : 29 31
primary              : 57 58 59
print_statement      : 5
program              : 0
relational_expr      : 39 40 41 42 43 44 45
return_statement     : 10
statement            : 2 3
statement_list       : 1 2 74
term                 : 47 48 49 50 51 52
wait_statement       : 11
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (27) while_statement -> . WHILE expression block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (29) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN iterable block
    (33) return_statement -> . RESULT expression
    (67) wait_statement -> . WAIT expression
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEFINE          shift and go to state 20
    FOR             shift and go to state 21
    RESULT          shift and go to state 22
    WAIT            shift and go to state 23
    LBRACE          shift and go to state 24
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 15
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (27) while_statement -> . WHILE expression block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (29) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN iterable block
    (33) return_statement -> . RESULT expression
    (67) wait_statement -> . WAIT expression
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEFINE          shift and go to state 20
    FOR             shift and go to state 21
    RESULT          shift and go to state 22
    WAIT            shift and go to state 23
    LBRACE          shift and go to state 24
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    statement                      shift and go to state 42
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 15
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 3

    (3) statement_list -> statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    DEFINE          reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    RESULT          reduce using rule 3 (statement_list -> statement .)
    WAIT            reduce using rule 3 (statement_list -> statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement .)
    FSTRING         reduce using rule 3 (statement_list -> statement .)
    PLUS            reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    NOT             reduce using rule 3 (statement_list -> statement .)
    TRUE            reduce using rule 3 (statement_list -> statement .)
    FALSE           reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    STRING          reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    IDENTIFIER      reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    DEFINE          reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    RESULT          reduce using rule 4 (statement -> assignment .)
    WAIT            reduce using rule 4 (statement -> assignment .)
    LBRACE          reduce using rule 4 (statement -> assignment .)
    FSTRING         reduce using rule 4 (statement -> assignment .)
    PLUS            reduce using rule 4 (statement -> assignment .)
    MINUS           reduce using rule 4 (statement -> assignment .)
    NOT             reduce using rule 4 (statement -> assignment .)
    TRUE            reduce using rule 4 (statement -> assignment .)
    FALSE           reduce using rule 4 (statement -> assignment .)
    NUMBER          reduce using rule 4 (statement -> assignment .)
    STRING          reduce using rule 4 (statement -> assignment .)
    LPAREN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print_statement .

    IDENTIFIER      reduce using rule 5 (statement -> print_statement .)
    PRINT           reduce using rule 5 (statement -> print_statement .)
    IF              reduce using rule 5 (statement -> print_statement .)
    WHILE           reduce using rule 5 (statement -> print_statement .)
    DEFINE          reduce using rule 5 (statement -> print_statement .)
    FOR             reduce using rule 5 (statement -> print_statement .)
    RESULT          reduce using rule 5 (statement -> print_statement .)
    WAIT            reduce using rule 5 (statement -> print_statement .)
    LBRACE          reduce using rule 5 (statement -> print_statement .)
    FSTRING         reduce using rule 5 (statement -> print_statement .)
    PLUS            reduce using rule 5 (statement -> print_statement .)
    MINUS           reduce using rule 5 (statement -> print_statement .)
    NOT             reduce using rule 5 (statement -> print_statement .)
    TRUE            reduce using rule 5 (statement -> print_statement .)
    FALSE           reduce using rule 5 (statement -> print_statement .)
    NUMBER          reduce using rule 5 (statement -> print_statement .)
    STRING          reduce using rule 5 (statement -> print_statement .)
    LPAREN          reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)
    RBRACE          reduce using rule 5 (statement -> print_statement .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    PRINT           reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    DEFINE          reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    RESULT          reduce using rule 6 (statement -> if_statement .)
    WAIT            reduce using rule 6 (statement -> if_statement .)
    LBRACE          reduce using rule 6 (statement -> if_statement .)
    FSTRING         reduce using rule 6 (statement -> if_statement .)
    PLUS            reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    STRING          reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> while_statement .

    IDENTIFIER      reduce using rule 7 (statement -> while_statement .)
    PRINT           reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    DEFINE          reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    RESULT          reduce using rule 7 (statement -> while_statement .)
    WAIT            reduce using rule 7 (statement -> while_statement .)
    LBRACE          reduce using rule 7 (statement -> while_statement .)
    FSTRING         reduce using rule 7 (statement -> while_statement .)
    PLUS            reduce using rule 7 (statement -> while_statement .)
    MINUS           reduce using rule 7 (statement -> while_statement .)
    NOT             reduce using rule 7 (statement -> while_statement .)
    TRUE            reduce using rule 7 (statement -> while_statement .)
    FALSE           reduce using rule 7 (statement -> while_statement .)
    NUMBER          reduce using rule 7 (statement -> while_statement .)
    STRING          reduce using rule 7 (statement -> while_statement .)
    LPAREN          reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    RBRACE          reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> function_def .

    IDENTIFIER      reduce using rule 8 (statement -> function_def .)
    PRINT           reduce using rule 8 (statement -> function_def .)
    IF              reduce using rule 8 (statement -> function_def .)
    WHILE           reduce using rule 8 (statement -> function_def .)
    DEFINE          reduce using rule 8 (statement -> function_def .)
    FOR             reduce using rule 8 (statement -> function_def .)
    RESULT          reduce using rule 8 (statement -> function_def .)
    WAIT            reduce using rule 8 (statement -> function_def .)
    LBRACE          reduce using rule 8 (statement -> function_def .)
    FSTRING         reduce using rule 8 (statement -> function_def .)
    PLUS            reduce using rule 8 (statement -> function_def .)
    MINUS           reduce using rule 8 (statement -> function_def .)
    NOT             reduce using rule 8 (statement -> function_def .)
    TRUE            reduce using rule 8 (statement -> function_def .)
    FALSE           reduce using rule 8 (statement -> function_def .)
    NUMBER          reduce using rule 8 (statement -> function_def .)
    STRING          reduce using rule 8 (statement -> function_def .)
    LPAREN          reduce using rule 8 (statement -> function_def .)
    $end            reduce using rule 8 (statement -> function_def .)
    RBRACE          reduce using rule 8 (statement -> function_def .)


state 9

    (9) statement -> for_loop .

    IDENTIFIER      reduce using rule 9 (statement -> for_loop .)
    PRINT           reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    DEFINE          reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    RESULT          reduce using rule 9 (statement -> for_loop .)
    WAIT            reduce using rule 9 (statement -> for_loop .)
    LBRACE          reduce using rule 9 (statement -> for_loop .)
    FSTRING         reduce using rule 9 (statement -> for_loop .)
    PLUS            reduce using rule 9 (statement -> for_loop .)
    MINUS           reduce using rule 9 (statement -> for_loop .)
    NOT             reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    NUMBER          reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    LPAREN          reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    RBRACE          reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> return_statement .

    IDENTIFIER      reduce using rule 10 (statement -> return_statement .)
    PRINT           reduce using rule 10 (statement -> return_statement .)
    IF              reduce using rule 10 (statement -> return_statement .)
    WHILE           reduce using rule 10 (statement -> return_statement .)
    DEFINE          reduce using rule 10 (statement -> return_statement .)
    FOR             reduce using rule 10 (statement -> return_statement .)
    RESULT          reduce using rule 10 (statement -> return_statement .)
    WAIT            reduce using rule 10 (statement -> return_statement .)
    LBRACE          reduce using rule 10 (statement -> return_statement .)
    FSTRING         reduce using rule 10 (statement -> return_statement .)
    PLUS            reduce using rule 10 (statement -> return_statement .)
    MINUS           reduce using rule 10 (statement -> return_statement .)
    NOT             reduce using rule 10 (statement -> return_statement .)
    TRUE            reduce using rule 10 (statement -> return_statement .)
    FALSE           reduce using rule 10 (statement -> return_statement .)
    NUMBER          reduce using rule 10 (statement -> return_statement .)
    STRING          reduce using rule 10 (statement -> return_statement .)
    LPAREN          reduce using rule 10 (statement -> return_statement .)
    $end            reduce using rule 10 (statement -> return_statement .)
    RBRACE          reduce using rule 10 (statement -> return_statement .)


state 11

    (11) statement -> wait_statement .

    IDENTIFIER      reduce using rule 11 (statement -> wait_statement .)
    PRINT           reduce using rule 11 (statement -> wait_statement .)
    IF              reduce using rule 11 (statement -> wait_statement .)
    WHILE           reduce using rule 11 (statement -> wait_statement .)
    DEFINE          reduce using rule 11 (statement -> wait_statement .)
    FOR             reduce using rule 11 (statement -> wait_statement .)
    RESULT          reduce using rule 11 (statement -> wait_statement .)
    WAIT            reduce using rule 11 (statement -> wait_statement .)
    LBRACE          reduce using rule 11 (statement -> wait_statement .)
    FSTRING         reduce using rule 11 (statement -> wait_statement .)
    PLUS            reduce using rule 11 (statement -> wait_statement .)
    MINUS           reduce using rule 11 (statement -> wait_statement .)
    NOT             reduce using rule 11 (statement -> wait_statement .)
    TRUE            reduce using rule 11 (statement -> wait_statement .)
    FALSE           reduce using rule 11 (statement -> wait_statement .)
    NUMBER          reduce using rule 11 (statement -> wait_statement .)
    STRING          reduce using rule 11 (statement -> wait_statement .)
    LPAREN          reduce using rule 11 (statement -> wait_statement .)
    $end            reduce using rule 11 (statement -> wait_statement .)
    RBRACE          reduce using rule 11 (statement -> wait_statement .)


state 12

    (12) statement -> block .

    IDENTIFIER      reduce using rule 12 (statement -> block .)
    PRINT           reduce using rule 12 (statement -> block .)
    IF              reduce using rule 12 (statement -> block .)
    WHILE           reduce using rule 12 (statement -> block .)
    DEFINE          reduce using rule 12 (statement -> block .)
    FOR             reduce using rule 12 (statement -> block .)
    RESULT          reduce using rule 12 (statement -> block .)
    WAIT            reduce using rule 12 (statement -> block .)
    LBRACE          reduce using rule 12 (statement -> block .)
    FSTRING         reduce using rule 12 (statement -> block .)
    PLUS            reduce using rule 12 (statement -> block .)
    MINUS           reduce using rule 12 (statement -> block .)
    NOT             reduce using rule 12 (statement -> block .)
    TRUE            reduce using rule 12 (statement -> block .)
    FALSE           reduce using rule 12 (statement -> block .)
    NUMBER          reduce using rule 12 (statement -> block .)
    STRING          reduce using rule 12 (statement -> block .)
    LPAREN          reduce using rule 12 (statement -> block .)
    $end            reduce using rule 12 (statement -> block .)
    RBRACE          reduce using rule 12 (statement -> block .)


state 13

    (13) statement -> expression_statement .

    IDENTIFIER      reduce using rule 13 (statement -> expression_statement .)
    PRINT           reduce using rule 13 (statement -> expression_statement .)
    IF              reduce using rule 13 (statement -> expression_statement .)
    WHILE           reduce using rule 13 (statement -> expression_statement .)
    DEFINE          reduce using rule 13 (statement -> expression_statement .)
    FOR             reduce using rule 13 (statement -> expression_statement .)
    RESULT          reduce using rule 13 (statement -> expression_statement .)
    WAIT            reduce using rule 13 (statement -> expression_statement .)
    LBRACE          reduce using rule 13 (statement -> expression_statement .)
    FSTRING         reduce using rule 13 (statement -> expression_statement .)
    PLUS            reduce using rule 13 (statement -> expression_statement .)
    MINUS           reduce using rule 13 (statement -> expression_statement .)
    NOT             reduce using rule 13 (statement -> expression_statement .)
    TRUE            reduce using rule 13 (statement -> expression_statement .)
    FALSE           reduce using rule 13 (statement -> expression_statement .)
    NUMBER          reduce using rule 13 (statement -> expression_statement .)
    STRING          reduce using rule 13 (statement -> expression_statement .)
    LPAREN          reduce using rule 13 (statement -> expression_statement .)
    $end            reduce using rule 13 (statement -> expression_statement .)
    RBRACE          reduce using rule 13 (statement -> expression_statement .)


state 14

    (19) assignment -> IDENTIFIER . EQUALS expression
    (17) expression -> IDENTIFIER . PLUS_EQUALS expression
    (18) expression -> IDENTIFIER . MINUS_EQUALS expression
    (65) primary -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN RPAREN
    (69) function_call -> IDENTIFIER . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          shift and go to state 43
    PLUS_EQUALS     shift and go to state 44
    MINUS_EQUALS    shift and go to state 45
    DOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TIMES           reduce using rule 65 (primary -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (primary -> IDENTIFIER .)
    MOD             reduce using rule 65 (primary -> IDENTIFIER .)
    PLUS            reduce using rule 65 (primary -> IDENTIFIER .)
    MINUS           reduce using rule 65 (primary -> IDENTIFIER .)
    LT              reduce using rule 65 (primary -> IDENTIFIER .)
    LE              reduce using rule 65 (primary -> IDENTIFIER .)
    GT              reduce using rule 65 (primary -> IDENTIFIER .)
    GE              reduce using rule 65 (primary -> IDENTIFIER .)
    EQ              reduce using rule 65 (primary -> IDENTIFIER .)
    NEQ             reduce using rule 65 (primary -> IDENTIFIER .)
    AND_OP          reduce using rule 65 (primary -> IDENTIFIER .)
    OR_OP           reduce using rule 65 (primary -> IDENTIFIER .)
    INCREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    DECREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 65 (primary -> IDENTIFIER .)
    PRINT           reduce using rule 65 (primary -> IDENTIFIER .)
    IF              reduce using rule 65 (primary -> IDENTIFIER .)
    WHILE           reduce using rule 65 (primary -> IDENTIFIER .)
    DEFINE          reduce using rule 65 (primary -> IDENTIFIER .)
    FOR             reduce using rule 65 (primary -> IDENTIFIER .)
    RESULT          reduce using rule 65 (primary -> IDENTIFIER .)
    WAIT            reduce using rule 65 (primary -> IDENTIFIER .)
    LBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    FSTRING         reduce using rule 65 (primary -> IDENTIFIER .)
    NOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TRUE            reduce using rule 65 (primary -> IDENTIFIER .)
    FALSE           reduce using rule 65 (primary -> IDENTIFIER .)
    NUMBER          reduce using rule 65 (primary -> IDENTIFIER .)
    STRING          reduce using rule 65 (primary -> IDENTIFIER .)
    $end            reduce using rule 65 (primary -> IDENTIFIER .)
    RBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 65 (primary -> IDENTIFIER .) ]


state 15

    (14) expression_statement -> expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IDENTIFIER      reduce using rule 14 (expression_statement -> expression .)
    PRINT           reduce using rule 14 (expression_statement -> expression .)
    IF              reduce using rule 14 (expression_statement -> expression .)
    WHILE           reduce using rule 14 (expression_statement -> expression .)
    DEFINE          reduce using rule 14 (expression_statement -> expression .)
    FOR             reduce using rule 14 (expression_statement -> expression .)
    RESULT          reduce using rule 14 (expression_statement -> expression .)
    WAIT            reduce using rule 14 (expression_statement -> expression .)
    LBRACE          reduce using rule 14 (expression_statement -> expression .)
    FSTRING         reduce using rule 14 (expression_statement -> expression .)
    PLUS            reduce using rule 14 (expression_statement -> expression .)
    MINUS           reduce using rule 14 (expression_statement -> expression .)
    NOT             reduce using rule 14 (expression_statement -> expression .)
    TRUE            reduce using rule 14 (expression_statement -> expression .)
    FALSE           reduce using rule 14 (expression_statement -> expression .)
    NUMBER          reduce using rule 14 (expression_statement -> expression .)
    STRING          reduce using rule 14 (expression_statement -> expression .)
    LPAREN          reduce using rule 14 (expression_statement -> expression .)
    $end            reduce using rule 14 (expression_statement -> expression .)
    RBRACE          reduce using rule 14 (expression_statement -> expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 16

    (20) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 49


state 17

    (66) primary -> LPAREN . expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 50
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 18

    (21) if_statement -> IF . expression block
    (22) if_statement -> IF . expression block ELSE block
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 52
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 19

    (27) while_statement -> WHILE . expression block
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 53
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 20

    (28) function_def -> DEFINE . IDENTIFIER LPAREN RPAREN block
    (29) function_def -> DEFINE . IDENTIFIER LPAREN param_list RPAREN block

    IDENTIFIER      shift and go to state 54


state 21

    (23) for_loop -> FOR . IDENTIFIER IN iterable block

    IDENTIFIER      shift and go to state 55


state 22

    (33) return_statement -> RESULT . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 56
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 23

    (67) wait_statement -> WAIT . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 57
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 24

    (73) block -> LBRACE . RBRACE
    (74) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (27) while_statement -> . WHILE expression block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (29) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN iterable block
    (33) return_statement -> . RESULT expression
    (67) wait_statement -> . WAIT expression
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RBRACE          shift and go to state 58
    IDENTIFIER      shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEFINE          shift and go to state 20
    FOR             shift and go to state 21
    RESULT          shift and go to state 22
    WAIT            shift and go to state 23
    LBRACE          shift and go to state 24
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    statement_list                 shift and go to state 59
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 15
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 25

    (26) expression -> FSTRING .

    INCREMENT       reduce using rule 26 (expression -> FSTRING .)
    DECREMENT       reduce using rule 26 (expression -> FSTRING .)
    IDENTIFIER      reduce using rule 26 (expression -> FSTRING .)
    PRINT           reduce using rule 26 (expression -> FSTRING .)
    IF              reduce using rule 26 (expression -> FSTRING .)
    WHILE           reduce using rule 26 (expression -> FSTRING .)
    DEFINE          reduce using rule 26 (expression -> FSTRING .)
    FOR             reduce using rule 26 (expression -> FSTRING .)
    RESULT          reduce using rule 26 (expression -> FSTRING .)
    WAIT            reduce using rule 26 (expression -> FSTRING .)
    LBRACE          reduce using rule 26 (expression -> FSTRING .)
    FSTRING         reduce using rule 26 (expression -> FSTRING .)
    PLUS            reduce using rule 26 (expression -> FSTRING .)
    MINUS           reduce using rule 26 (expression -> FSTRING .)
    NOT             reduce using rule 26 (expression -> FSTRING .)
    TRUE            reduce using rule 26 (expression -> FSTRING .)
    FALSE           reduce using rule 26 (expression -> FSTRING .)
    NUMBER          reduce using rule 26 (expression -> FSTRING .)
    STRING          reduce using rule 26 (expression -> FSTRING .)
    LPAREN          reduce using rule 26 (expression -> FSTRING .)
    $end            reduce using rule 26 (expression -> FSTRING .)
    RPAREN          reduce using rule 26 (expression -> FSTRING .)
    RBRACE          reduce using rule 26 (expression -> FSTRING .)
    COMMA           reduce using rule 26 (expression -> FSTRING .)


state 26

    (34) expression -> logic_expr .
    (35) logic_expr -> logic_expr . OR_OP logic_term

    INCREMENT       reduce using rule 34 (expression -> logic_expr .)
    DECREMENT       reduce using rule 34 (expression -> logic_expr .)
    IDENTIFIER      reduce using rule 34 (expression -> logic_expr .)
    PRINT           reduce using rule 34 (expression -> logic_expr .)
    IF              reduce using rule 34 (expression -> logic_expr .)
    WHILE           reduce using rule 34 (expression -> logic_expr .)
    DEFINE          reduce using rule 34 (expression -> logic_expr .)
    FOR             reduce using rule 34 (expression -> logic_expr .)
    RESULT          reduce using rule 34 (expression -> logic_expr .)
    WAIT            reduce using rule 34 (expression -> logic_expr .)
    LBRACE          reduce using rule 34 (expression -> logic_expr .)
    FSTRING         reduce using rule 34 (expression -> logic_expr .)
    PLUS            reduce using rule 34 (expression -> logic_expr .)
    MINUS           reduce using rule 34 (expression -> logic_expr .)
    NOT             reduce using rule 34 (expression -> logic_expr .)
    TRUE            reduce using rule 34 (expression -> logic_expr .)
    FALSE           reduce using rule 34 (expression -> logic_expr .)
    NUMBER          reduce using rule 34 (expression -> logic_expr .)
    STRING          reduce using rule 34 (expression -> logic_expr .)
    LPAREN          reduce using rule 34 (expression -> logic_expr .)
    $end            reduce using rule 34 (expression -> logic_expr .)
    RPAREN          reduce using rule 34 (expression -> logic_expr .)
    RBRACE          reduce using rule 34 (expression -> logic_expr .)
    COMMA           reduce using rule 34 (expression -> logic_expr .)
    OR_OP           shift and go to state 60


state 27

    (36) logic_expr -> logic_term .
    (37) logic_term -> logic_term . AND_OP equality_expr

    OR_OP           reduce using rule 36 (logic_expr -> logic_term .)
    INCREMENT       reduce using rule 36 (logic_expr -> logic_term .)
    DECREMENT       reduce using rule 36 (logic_expr -> logic_term .)
    IDENTIFIER      reduce using rule 36 (logic_expr -> logic_term .)
    PRINT           reduce using rule 36 (logic_expr -> logic_term .)
    IF              reduce using rule 36 (logic_expr -> logic_term .)
    WHILE           reduce using rule 36 (logic_expr -> logic_term .)
    DEFINE          reduce using rule 36 (logic_expr -> logic_term .)
    FOR             reduce using rule 36 (logic_expr -> logic_term .)
    RESULT          reduce using rule 36 (logic_expr -> logic_term .)
    WAIT            reduce using rule 36 (logic_expr -> logic_term .)
    LBRACE          reduce using rule 36 (logic_expr -> logic_term .)
    FSTRING         reduce using rule 36 (logic_expr -> logic_term .)
    PLUS            reduce using rule 36 (logic_expr -> logic_term .)
    MINUS           reduce using rule 36 (logic_expr -> logic_term .)
    NOT             reduce using rule 36 (logic_expr -> logic_term .)
    TRUE            reduce using rule 36 (logic_expr -> logic_term .)
    FALSE           reduce using rule 36 (logic_expr -> logic_term .)
    NUMBER          reduce using rule 36 (logic_expr -> logic_term .)
    STRING          reduce using rule 36 (logic_expr -> logic_term .)
    LPAREN          reduce using rule 36 (logic_expr -> logic_term .)
    $end            reduce using rule 36 (logic_expr -> logic_term .)
    RPAREN          reduce using rule 36 (logic_expr -> logic_term .)
    RBRACE          reduce using rule 36 (logic_expr -> logic_term .)
    COMMA           reduce using rule 36 (logic_expr -> logic_term .)
    AND_OP          shift and go to state 61


state 28

    (38) logic_term -> equality_expr .
    (39) equality_expr -> equality_expr . EQ relational_expr
    (40) equality_expr -> equality_expr . NEQ relational_expr

    AND_OP          reduce using rule 38 (logic_term -> equality_expr .)
    OR_OP           reduce using rule 38 (logic_term -> equality_expr .)
    INCREMENT       reduce using rule 38 (logic_term -> equality_expr .)
    DECREMENT       reduce using rule 38 (logic_term -> equality_expr .)
    IDENTIFIER      reduce using rule 38 (logic_term -> equality_expr .)
    PRINT           reduce using rule 38 (logic_term -> equality_expr .)
    IF              reduce using rule 38 (logic_term -> equality_expr .)
    WHILE           reduce using rule 38 (logic_term -> equality_expr .)
    DEFINE          reduce using rule 38 (logic_term -> equality_expr .)
    FOR             reduce using rule 38 (logic_term -> equality_expr .)
    RESULT          reduce using rule 38 (logic_term -> equality_expr .)
    WAIT            reduce using rule 38 (logic_term -> equality_expr .)
    LBRACE          reduce using rule 38 (logic_term -> equality_expr .)
    FSTRING         reduce using rule 38 (logic_term -> equality_expr .)
    PLUS            reduce using rule 38 (logic_term -> equality_expr .)
    MINUS           reduce using rule 38 (logic_term -> equality_expr .)
    NOT             reduce using rule 38 (logic_term -> equality_expr .)
    TRUE            reduce using rule 38 (logic_term -> equality_expr .)
    FALSE           reduce using rule 38 (logic_term -> equality_expr .)
    NUMBER          reduce using rule 38 (logic_term -> equality_expr .)
    STRING          reduce using rule 38 (logic_term -> equality_expr .)
    LPAREN          reduce using rule 38 (logic_term -> equality_expr .)
    $end            reduce using rule 38 (logic_term -> equality_expr .)
    RPAREN          reduce using rule 38 (logic_term -> equality_expr .)
    RBRACE          reduce using rule 38 (logic_term -> equality_expr .)
    COMMA           reduce using rule 38 (logic_term -> equality_expr .)
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 29

    (41) equality_expr -> relational_expr .
    (42) relational_expr -> relational_expr . LT additive_expr
    (43) relational_expr -> relational_expr . LE additive_expr
    (44) relational_expr -> relational_expr . GT additive_expr
    (45) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 41 (equality_expr -> relational_expr .)
    NEQ             reduce using rule 41 (equality_expr -> relational_expr .)
    AND_OP          reduce using rule 41 (equality_expr -> relational_expr .)
    OR_OP           reduce using rule 41 (equality_expr -> relational_expr .)
    INCREMENT       reduce using rule 41 (equality_expr -> relational_expr .)
    DECREMENT       reduce using rule 41 (equality_expr -> relational_expr .)
    IDENTIFIER      reduce using rule 41 (equality_expr -> relational_expr .)
    PRINT           reduce using rule 41 (equality_expr -> relational_expr .)
    IF              reduce using rule 41 (equality_expr -> relational_expr .)
    WHILE           reduce using rule 41 (equality_expr -> relational_expr .)
    DEFINE          reduce using rule 41 (equality_expr -> relational_expr .)
    FOR             reduce using rule 41 (equality_expr -> relational_expr .)
    RESULT          reduce using rule 41 (equality_expr -> relational_expr .)
    WAIT            reduce using rule 41 (equality_expr -> relational_expr .)
    LBRACE          reduce using rule 41 (equality_expr -> relational_expr .)
    FSTRING         reduce using rule 41 (equality_expr -> relational_expr .)
    PLUS            reduce using rule 41 (equality_expr -> relational_expr .)
    MINUS           reduce using rule 41 (equality_expr -> relational_expr .)
    NOT             reduce using rule 41 (equality_expr -> relational_expr .)
    TRUE            reduce using rule 41 (equality_expr -> relational_expr .)
    FALSE           reduce using rule 41 (equality_expr -> relational_expr .)
    NUMBER          reduce using rule 41 (equality_expr -> relational_expr .)
    STRING          reduce using rule 41 (equality_expr -> relational_expr .)
    LPAREN          reduce using rule 41 (equality_expr -> relational_expr .)
    $end            reduce using rule 41 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 41 (equality_expr -> relational_expr .)
    RBRACE          reduce using rule 41 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 41 (equality_expr -> relational_expr .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67


state 30

    (46) relational_expr -> additive_expr .
    (47) additive_expr -> additive_expr . PLUS term
    (48) additive_expr -> additive_expr . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LT              reduce using rule 46 (relational_expr -> additive_expr .)
    LE              reduce using rule 46 (relational_expr -> additive_expr .)
    GT              reduce using rule 46 (relational_expr -> additive_expr .)
    GE              reduce using rule 46 (relational_expr -> additive_expr .)
    EQ              reduce using rule 46 (relational_expr -> additive_expr .)
    NEQ             reduce using rule 46 (relational_expr -> additive_expr .)
    AND_OP          reduce using rule 46 (relational_expr -> additive_expr .)
    OR_OP           reduce using rule 46 (relational_expr -> additive_expr .)
    INCREMENT       reduce using rule 46 (relational_expr -> additive_expr .)
    DECREMENT       reduce using rule 46 (relational_expr -> additive_expr .)
    IDENTIFIER      reduce using rule 46 (relational_expr -> additive_expr .)
    PRINT           reduce using rule 46 (relational_expr -> additive_expr .)
    IF              reduce using rule 46 (relational_expr -> additive_expr .)
    WHILE           reduce using rule 46 (relational_expr -> additive_expr .)
    DEFINE          reduce using rule 46 (relational_expr -> additive_expr .)
    FOR             reduce using rule 46 (relational_expr -> additive_expr .)
    RESULT          reduce using rule 46 (relational_expr -> additive_expr .)
    WAIT            reduce using rule 46 (relational_expr -> additive_expr .)
    LBRACE          reduce using rule 46 (relational_expr -> additive_expr .)
    FSTRING         reduce using rule 46 (relational_expr -> additive_expr .)
    NOT             reduce using rule 46 (relational_expr -> additive_expr .)
    TRUE            reduce using rule 46 (relational_expr -> additive_expr .)
    FALSE           reduce using rule 46 (relational_expr -> additive_expr .)
    NUMBER          reduce using rule 46 (relational_expr -> additive_expr .)
    STRING          reduce using rule 46 (relational_expr -> additive_expr .)
    LPAREN          reduce using rule 46 (relational_expr -> additive_expr .)
    $end            reduce using rule 46 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 46 (relational_expr -> additive_expr .)
    RBRACE          reduce using rule 46 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 46 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 46 (relational_expr -> additive_expr .) ]
  ! MINUS           [ reduce using rule 46 (relational_expr -> additive_expr .) ]


state 31

    (54) factor -> PLUS . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 70
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 32

    (49) additive_expr -> term .
    (50) term -> term . TIMES factor
    (51) term -> term . DIVIDE factor
    (52) term -> term . MOD factor

    PLUS            reduce using rule 49 (additive_expr -> term .)
    MINUS           reduce using rule 49 (additive_expr -> term .)
    LT              reduce using rule 49 (additive_expr -> term .)
    LE              reduce using rule 49 (additive_expr -> term .)
    GT              reduce using rule 49 (additive_expr -> term .)
    GE              reduce using rule 49 (additive_expr -> term .)
    EQ              reduce using rule 49 (additive_expr -> term .)
    NEQ             reduce using rule 49 (additive_expr -> term .)
    AND_OP          reduce using rule 49 (additive_expr -> term .)
    OR_OP           reduce using rule 49 (additive_expr -> term .)
    INCREMENT       reduce using rule 49 (additive_expr -> term .)
    DECREMENT       reduce using rule 49 (additive_expr -> term .)
    IDENTIFIER      reduce using rule 49 (additive_expr -> term .)
    PRINT           reduce using rule 49 (additive_expr -> term .)
    IF              reduce using rule 49 (additive_expr -> term .)
    WHILE           reduce using rule 49 (additive_expr -> term .)
    DEFINE          reduce using rule 49 (additive_expr -> term .)
    FOR             reduce using rule 49 (additive_expr -> term .)
    RESULT          reduce using rule 49 (additive_expr -> term .)
    WAIT            reduce using rule 49 (additive_expr -> term .)
    LBRACE          reduce using rule 49 (additive_expr -> term .)
    FSTRING         reduce using rule 49 (additive_expr -> term .)
    NOT             reduce using rule 49 (additive_expr -> term .)
    TRUE            reduce using rule 49 (additive_expr -> term .)
    FALSE           reduce using rule 49 (additive_expr -> term .)
    NUMBER          reduce using rule 49 (additive_expr -> term .)
    STRING          reduce using rule 49 (additive_expr -> term .)
    LPAREN          reduce using rule 49 (additive_expr -> term .)
    $end            reduce using rule 49 (additive_expr -> term .)
    RPAREN          reduce using rule 49 (additive_expr -> term .)
    RBRACE          reduce using rule 49 (additive_expr -> term .)
    COMMA           reduce using rule 49 (additive_expr -> term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 33

    (55) factor -> MINUS . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 75
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 34

    (53) term -> factor .

    TIMES           reduce using rule 53 (term -> factor .)
    DIVIDE          reduce using rule 53 (term -> factor .)
    MOD             reduce using rule 53 (term -> factor .)
    PLUS            reduce using rule 53 (term -> factor .)
    MINUS           reduce using rule 53 (term -> factor .)
    LT              reduce using rule 53 (term -> factor .)
    LE              reduce using rule 53 (term -> factor .)
    GT              reduce using rule 53 (term -> factor .)
    GE              reduce using rule 53 (term -> factor .)
    EQ              reduce using rule 53 (term -> factor .)
    NEQ             reduce using rule 53 (term -> factor .)
    AND_OP          reduce using rule 53 (term -> factor .)
    OR_OP           reduce using rule 53 (term -> factor .)
    INCREMENT       reduce using rule 53 (term -> factor .)
    DECREMENT       reduce using rule 53 (term -> factor .)
    IDENTIFIER      reduce using rule 53 (term -> factor .)
    PRINT           reduce using rule 53 (term -> factor .)
    IF              reduce using rule 53 (term -> factor .)
    WHILE           reduce using rule 53 (term -> factor .)
    DEFINE          reduce using rule 53 (term -> factor .)
    FOR             reduce using rule 53 (term -> factor .)
    RESULT          reduce using rule 53 (term -> factor .)
    WAIT            reduce using rule 53 (term -> factor .)
    LBRACE          reduce using rule 53 (term -> factor .)
    FSTRING         reduce using rule 53 (term -> factor .)
    NOT             reduce using rule 53 (term -> factor .)
    TRUE            reduce using rule 53 (term -> factor .)
    FALSE           reduce using rule 53 (term -> factor .)
    NUMBER          reduce using rule 53 (term -> factor .)
    STRING          reduce using rule 53 (term -> factor .)
    LPAREN          reduce using rule 53 (term -> factor .)
    $end            reduce using rule 53 (term -> factor .)
    RPAREN          reduce using rule 53 (term -> factor .)
    RBRACE          reduce using rule 53 (term -> factor .)
    COMMA           reduce using rule 53 (term -> factor .)


state 35

    (56) factor -> NOT . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 76
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 36

    (57) factor -> primary .
    (58) primary -> primary . DOT IDENTIFIER
    (59) primary -> primary . DOT IDENTIFIER LPAREN arg_list RPAREN

    TIMES           reduce using rule 57 (factor -> primary .)
    DIVIDE          reduce using rule 57 (factor -> primary .)
    MOD             reduce using rule 57 (factor -> primary .)
    PLUS            reduce using rule 57 (factor -> primary .)
    MINUS           reduce using rule 57 (factor -> primary .)
    LT              reduce using rule 57 (factor -> primary .)
    LE              reduce using rule 57 (factor -> primary .)
    GT              reduce using rule 57 (factor -> primary .)
    GE              reduce using rule 57 (factor -> primary .)
    EQ              reduce using rule 57 (factor -> primary .)
    NEQ             reduce using rule 57 (factor -> primary .)
    AND_OP          reduce using rule 57 (factor -> primary .)
    OR_OP           reduce using rule 57 (factor -> primary .)
    INCREMENT       reduce using rule 57 (factor -> primary .)
    DECREMENT       reduce using rule 57 (factor -> primary .)
    IDENTIFIER      reduce using rule 57 (factor -> primary .)
    PRINT           reduce using rule 57 (factor -> primary .)
    IF              reduce using rule 57 (factor -> primary .)
    WHILE           reduce using rule 57 (factor -> primary .)
    DEFINE          reduce using rule 57 (factor -> primary .)
    FOR             reduce using rule 57 (factor -> primary .)
    RESULT          reduce using rule 57 (factor -> primary .)
    WAIT            reduce using rule 57 (factor -> primary .)
    LBRACE          reduce using rule 57 (factor -> primary .)
    FSTRING         reduce using rule 57 (factor -> primary .)
    NOT             reduce using rule 57 (factor -> primary .)
    TRUE            reduce using rule 57 (factor -> primary .)
    FALSE           reduce using rule 57 (factor -> primary .)
    NUMBER          reduce using rule 57 (factor -> primary .)
    STRING          reduce using rule 57 (factor -> primary .)
    LPAREN          reduce using rule 57 (factor -> primary .)
    $end            reduce using rule 57 (factor -> primary .)
    RPAREN          reduce using rule 57 (factor -> primary .)
    RBRACE          reduce using rule 57 (factor -> primary .)
    COMMA           reduce using rule 57 (factor -> primary .)
    DOT             shift and go to state 77


state 37

    (60) primary -> function_call .

    DOT             reduce using rule 60 (primary -> function_call .)
    TIMES           reduce using rule 60 (primary -> function_call .)
    DIVIDE          reduce using rule 60 (primary -> function_call .)
    MOD             reduce using rule 60 (primary -> function_call .)
    PLUS            reduce using rule 60 (primary -> function_call .)
    MINUS           reduce using rule 60 (primary -> function_call .)
    LT              reduce using rule 60 (primary -> function_call .)
    LE              reduce using rule 60 (primary -> function_call .)
    GT              reduce using rule 60 (primary -> function_call .)
    GE              reduce using rule 60 (primary -> function_call .)
    EQ              reduce using rule 60 (primary -> function_call .)
    NEQ             reduce using rule 60 (primary -> function_call .)
    AND_OP          reduce using rule 60 (primary -> function_call .)
    OR_OP           reduce using rule 60 (primary -> function_call .)
    INCREMENT       reduce using rule 60 (primary -> function_call .)
    DECREMENT       reduce using rule 60 (primary -> function_call .)
    IDENTIFIER      reduce using rule 60 (primary -> function_call .)
    PRINT           reduce using rule 60 (primary -> function_call .)
    IF              reduce using rule 60 (primary -> function_call .)
    WHILE           reduce using rule 60 (primary -> function_call .)
    DEFINE          reduce using rule 60 (primary -> function_call .)
    FOR             reduce using rule 60 (primary -> function_call .)
    RESULT          reduce using rule 60 (primary -> function_call .)
    WAIT            reduce using rule 60 (primary -> function_call .)
    LBRACE          reduce using rule 60 (primary -> function_call .)
    FSTRING         reduce using rule 60 (primary -> function_call .)
    NOT             reduce using rule 60 (primary -> function_call .)
    TRUE            reduce using rule 60 (primary -> function_call .)
    FALSE           reduce using rule 60 (primary -> function_call .)
    NUMBER          reduce using rule 60 (primary -> function_call .)
    STRING          reduce using rule 60 (primary -> function_call .)
    LPAREN          reduce using rule 60 (primary -> function_call .)
    $end            reduce using rule 60 (primary -> function_call .)
    RPAREN          reduce using rule 60 (primary -> function_call .)
    RBRACE          reduce using rule 60 (primary -> function_call .)
    COMMA           reduce using rule 60 (primary -> function_call .)


state 38

    (61) primary -> TRUE .

    DOT             reduce using rule 61 (primary -> TRUE .)
    TIMES           reduce using rule 61 (primary -> TRUE .)
    DIVIDE          reduce using rule 61 (primary -> TRUE .)
    MOD             reduce using rule 61 (primary -> TRUE .)
    PLUS            reduce using rule 61 (primary -> TRUE .)
    MINUS           reduce using rule 61 (primary -> TRUE .)
    LT              reduce using rule 61 (primary -> TRUE .)
    LE              reduce using rule 61 (primary -> TRUE .)
    GT              reduce using rule 61 (primary -> TRUE .)
    GE              reduce using rule 61 (primary -> TRUE .)
    EQ              reduce using rule 61 (primary -> TRUE .)
    NEQ             reduce using rule 61 (primary -> TRUE .)
    AND_OP          reduce using rule 61 (primary -> TRUE .)
    OR_OP           reduce using rule 61 (primary -> TRUE .)
    INCREMENT       reduce using rule 61 (primary -> TRUE .)
    DECREMENT       reduce using rule 61 (primary -> TRUE .)
    IDENTIFIER      reduce using rule 61 (primary -> TRUE .)
    PRINT           reduce using rule 61 (primary -> TRUE .)
    IF              reduce using rule 61 (primary -> TRUE .)
    WHILE           reduce using rule 61 (primary -> TRUE .)
    DEFINE          reduce using rule 61 (primary -> TRUE .)
    FOR             reduce using rule 61 (primary -> TRUE .)
    RESULT          reduce using rule 61 (primary -> TRUE .)
    WAIT            reduce using rule 61 (primary -> TRUE .)
    LBRACE          reduce using rule 61 (primary -> TRUE .)
    FSTRING         reduce using rule 61 (primary -> TRUE .)
    NOT             reduce using rule 61 (primary -> TRUE .)
    TRUE            reduce using rule 61 (primary -> TRUE .)
    FALSE           reduce using rule 61 (primary -> TRUE .)
    NUMBER          reduce using rule 61 (primary -> TRUE .)
    STRING          reduce using rule 61 (primary -> TRUE .)
    LPAREN          reduce using rule 61 (primary -> TRUE .)
    $end            reduce using rule 61 (primary -> TRUE .)
    RPAREN          reduce using rule 61 (primary -> TRUE .)
    RBRACE          reduce using rule 61 (primary -> TRUE .)
    COMMA           reduce using rule 61 (primary -> TRUE .)


state 39

    (62) primary -> FALSE .

    DOT             reduce using rule 62 (primary -> FALSE .)
    TIMES           reduce using rule 62 (primary -> FALSE .)
    DIVIDE          reduce using rule 62 (primary -> FALSE .)
    MOD             reduce using rule 62 (primary -> FALSE .)
    PLUS            reduce using rule 62 (primary -> FALSE .)
    MINUS           reduce using rule 62 (primary -> FALSE .)
    LT              reduce using rule 62 (primary -> FALSE .)
    LE              reduce using rule 62 (primary -> FALSE .)
    GT              reduce using rule 62 (primary -> FALSE .)
    GE              reduce using rule 62 (primary -> FALSE .)
    EQ              reduce using rule 62 (primary -> FALSE .)
    NEQ             reduce using rule 62 (primary -> FALSE .)
    AND_OP          reduce using rule 62 (primary -> FALSE .)
    OR_OP           reduce using rule 62 (primary -> FALSE .)
    INCREMENT       reduce using rule 62 (primary -> FALSE .)
    DECREMENT       reduce using rule 62 (primary -> FALSE .)
    IDENTIFIER      reduce using rule 62 (primary -> FALSE .)
    PRINT           reduce using rule 62 (primary -> FALSE .)
    IF              reduce using rule 62 (primary -> FALSE .)
    WHILE           reduce using rule 62 (primary -> FALSE .)
    DEFINE          reduce using rule 62 (primary -> FALSE .)
    FOR             reduce using rule 62 (primary -> FALSE .)
    RESULT          reduce using rule 62 (primary -> FALSE .)
    WAIT            reduce using rule 62 (primary -> FALSE .)
    LBRACE          reduce using rule 62 (primary -> FALSE .)
    FSTRING         reduce using rule 62 (primary -> FALSE .)
    NOT             reduce using rule 62 (primary -> FALSE .)
    TRUE            reduce using rule 62 (primary -> FALSE .)
    FALSE           reduce using rule 62 (primary -> FALSE .)
    NUMBER          reduce using rule 62 (primary -> FALSE .)
    STRING          reduce using rule 62 (primary -> FALSE .)
    LPAREN          reduce using rule 62 (primary -> FALSE .)
    $end            reduce using rule 62 (primary -> FALSE .)
    RPAREN          reduce using rule 62 (primary -> FALSE .)
    RBRACE          reduce using rule 62 (primary -> FALSE .)
    COMMA           reduce using rule 62 (primary -> FALSE .)


state 40

    (63) primary -> NUMBER .

    DOT             reduce using rule 63 (primary -> NUMBER .)
    TIMES           reduce using rule 63 (primary -> NUMBER .)
    DIVIDE          reduce using rule 63 (primary -> NUMBER .)
    MOD             reduce using rule 63 (primary -> NUMBER .)
    PLUS            reduce using rule 63 (primary -> NUMBER .)
    MINUS           reduce using rule 63 (primary -> NUMBER .)
    LT              reduce using rule 63 (primary -> NUMBER .)
    LE              reduce using rule 63 (primary -> NUMBER .)
    GT              reduce using rule 63 (primary -> NUMBER .)
    GE              reduce using rule 63 (primary -> NUMBER .)
    EQ              reduce using rule 63 (primary -> NUMBER .)
    NEQ             reduce using rule 63 (primary -> NUMBER .)
    AND_OP          reduce using rule 63 (primary -> NUMBER .)
    OR_OP           reduce using rule 63 (primary -> NUMBER .)
    INCREMENT       reduce using rule 63 (primary -> NUMBER .)
    DECREMENT       reduce using rule 63 (primary -> NUMBER .)
    IDENTIFIER      reduce using rule 63 (primary -> NUMBER .)
    PRINT           reduce using rule 63 (primary -> NUMBER .)
    IF              reduce using rule 63 (primary -> NUMBER .)
    WHILE           reduce using rule 63 (primary -> NUMBER .)
    DEFINE          reduce using rule 63 (primary -> NUMBER .)
    FOR             reduce using rule 63 (primary -> NUMBER .)
    RESULT          reduce using rule 63 (primary -> NUMBER .)
    WAIT            reduce using rule 63 (primary -> NUMBER .)
    LBRACE          reduce using rule 63 (primary -> NUMBER .)
    FSTRING         reduce using rule 63 (primary -> NUMBER .)
    NOT             reduce using rule 63 (primary -> NUMBER .)
    TRUE            reduce using rule 63 (primary -> NUMBER .)
    FALSE           reduce using rule 63 (primary -> NUMBER .)
    NUMBER          reduce using rule 63 (primary -> NUMBER .)
    STRING          reduce using rule 63 (primary -> NUMBER .)
    LPAREN          reduce using rule 63 (primary -> NUMBER .)
    $end            reduce using rule 63 (primary -> NUMBER .)
    RPAREN          reduce using rule 63 (primary -> NUMBER .)
    RBRACE          reduce using rule 63 (primary -> NUMBER .)
    COMMA           reduce using rule 63 (primary -> NUMBER .)


state 41

    (64) primary -> STRING .

    DOT             reduce using rule 64 (primary -> STRING .)
    TIMES           reduce using rule 64 (primary -> STRING .)
    DIVIDE          reduce using rule 64 (primary -> STRING .)
    MOD             reduce using rule 64 (primary -> STRING .)
    PLUS            reduce using rule 64 (primary -> STRING .)
    MINUS           reduce using rule 64 (primary -> STRING .)
    LT              reduce using rule 64 (primary -> STRING .)
    LE              reduce using rule 64 (primary -> STRING .)
    GT              reduce using rule 64 (primary -> STRING .)
    GE              reduce using rule 64 (primary -> STRING .)
    EQ              reduce using rule 64 (primary -> STRING .)
    NEQ             reduce using rule 64 (primary -> STRING .)
    AND_OP          reduce using rule 64 (primary -> STRING .)
    OR_OP           reduce using rule 64 (primary -> STRING .)
    INCREMENT       reduce using rule 64 (primary -> STRING .)
    DECREMENT       reduce using rule 64 (primary -> STRING .)
    IDENTIFIER      reduce using rule 64 (primary -> STRING .)
    PRINT           reduce using rule 64 (primary -> STRING .)
    IF              reduce using rule 64 (primary -> STRING .)
    WHILE           reduce using rule 64 (primary -> STRING .)
    DEFINE          reduce using rule 64 (primary -> STRING .)
    FOR             reduce using rule 64 (primary -> STRING .)
    RESULT          reduce using rule 64 (primary -> STRING .)
    WAIT            reduce using rule 64 (primary -> STRING .)
    LBRACE          reduce using rule 64 (primary -> STRING .)
    FSTRING         reduce using rule 64 (primary -> STRING .)
    NOT             reduce using rule 64 (primary -> STRING .)
    TRUE            reduce using rule 64 (primary -> STRING .)
    FALSE           reduce using rule 64 (primary -> STRING .)
    NUMBER          reduce using rule 64 (primary -> STRING .)
    STRING          reduce using rule 64 (primary -> STRING .)
    LPAREN          reduce using rule 64 (primary -> STRING .)
    $end            reduce using rule 64 (primary -> STRING .)
    RPAREN          reduce using rule 64 (primary -> STRING .)
    RBRACE          reduce using rule 64 (primary -> STRING .)
    COMMA           reduce using rule 64 (primary -> STRING .)


state 42

    (2) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    DEFINE          reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 2 (statement_list -> statement_list statement .)
    WAIT            reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    FSTRING         reduce using rule 2 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 43

    (19) assignment -> IDENTIFIER EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 78
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 44

    (17) expression -> IDENTIFIER PLUS_EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 79
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 45

    (18) expression -> IDENTIFIER MINUS_EQUALS . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 80
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 46

    (68) function_call -> IDENTIFIER LPAREN . RPAREN
    (69) function_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (70) arg_list -> . expression
    (71) arg_list -> . arg_list COMMA expression
    (72) arg_list -> . empty
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (75) empty -> .
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 81
    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    COMMA           reduce using rule 75 (empty -> .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

  ! RPAREN          [ reduce using rule 75 (empty -> .) ]

    arg_list                       shift and go to state 82
    expression                     shift and go to state 83
    empty                          shift and go to state 84
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 47

    (15) expression -> expression INCREMENT .

    INCREMENT       reduce using rule 15 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 15 (expression -> expression INCREMENT .)
    IDENTIFIER      reduce using rule 15 (expression -> expression INCREMENT .)
    PRINT           reduce using rule 15 (expression -> expression INCREMENT .)
    IF              reduce using rule 15 (expression -> expression INCREMENT .)
    WHILE           reduce using rule 15 (expression -> expression INCREMENT .)
    DEFINE          reduce using rule 15 (expression -> expression INCREMENT .)
    FOR             reduce using rule 15 (expression -> expression INCREMENT .)
    RESULT          reduce using rule 15 (expression -> expression INCREMENT .)
    WAIT            reduce using rule 15 (expression -> expression INCREMENT .)
    LBRACE          reduce using rule 15 (expression -> expression INCREMENT .)
    FSTRING         reduce using rule 15 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 15 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 15 (expression -> expression INCREMENT .)
    NOT             reduce using rule 15 (expression -> expression INCREMENT .)
    TRUE            reduce using rule 15 (expression -> expression INCREMENT .)
    FALSE           reduce using rule 15 (expression -> expression INCREMENT .)
    NUMBER          reduce using rule 15 (expression -> expression INCREMENT .)
    STRING          reduce using rule 15 (expression -> expression INCREMENT .)
    LPAREN          reduce using rule 15 (expression -> expression INCREMENT .)
    $end            reduce using rule 15 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 15 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 15 (expression -> expression INCREMENT .)
    COMMA           reduce using rule 15 (expression -> expression INCREMENT .)


state 48

    (16) expression -> expression DECREMENT .

    INCREMENT       reduce using rule 16 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 16 (expression -> expression DECREMENT .)
    IDENTIFIER      reduce using rule 16 (expression -> expression DECREMENT .)
    PRINT           reduce using rule 16 (expression -> expression DECREMENT .)
    IF              reduce using rule 16 (expression -> expression DECREMENT .)
    WHILE           reduce using rule 16 (expression -> expression DECREMENT .)
    DEFINE          reduce using rule 16 (expression -> expression DECREMENT .)
    FOR             reduce using rule 16 (expression -> expression DECREMENT .)
    RESULT          reduce using rule 16 (expression -> expression DECREMENT .)
    WAIT            reduce using rule 16 (expression -> expression DECREMENT .)
    LBRACE          reduce using rule 16 (expression -> expression DECREMENT .)
    FSTRING         reduce using rule 16 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 16 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 16 (expression -> expression DECREMENT .)
    NOT             reduce using rule 16 (expression -> expression DECREMENT .)
    TRUE            reduce using rule 16 (expression -> expression DECREMENT .)
    FALSE           reduce using rule 16 (expression -> expression DECREMENT .)
    NUMBER          reduce using rule 16 (expression -> expression DECREMENT .)
    STRING          reduce using rule 16 (expression -> expression DECREMENT .)
    LPAREN          reduce using rule 16 (expression -> expression DECREMENT .)
    $end            reduce using rule 16 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 16 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 16 (expression -> expression DECREMENT .)
    COMMA           reduce using rule 16 (expression -> expression DECREMENT .)


state 49

    (20) print_statement -> PRINT LPAREN . expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 85
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 50

    (66) primary -> LPAREN expression . RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          shift and go to state 86
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 51

    (17) expression -> IDENTIFIER . PLUS_EQUALS expression
    (18) expression -> IDENTIFIER . MINUS_EQUALS expression
    (65) primary -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN RPAREN
    (69) function_call -> IDENTIFIER . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    PLUS_EQUALS     shift and go to state 44
    MINUS_EQUALS    shift and go to state 45
    DOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TIMES           reduce using rule 65 (primary -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (primary -> IDENTIFIER .)
    MOD             reduce using rule 65 (primary -> IDENTIFIER .)
    PLUS            reduce using rule 65 (primary -> IDENTIFIER .)
    MINUS           reduce using rule 65 (primary -> IDENTIFIER .)
    LT              reduce using rule 65 (primary -> IDENTIFIER .)
    LE              reduce using rule 65 (primary -> IDENTIFIER .)
    GT              reduce using rule 65 (primary -> IDENTIFIER .)
    GE              reduce using rule 65 (primary -> IDENTIFIER .)
    EQ              reduce using rule 65 (primary -> IDENTIFIER .)
    NEQ             reduce using rule 65 (primary -> IDENTIFIER .)
    AND_OP          reduce using rule 65 (primary -> IDENTIFIER .)
    OR_OP           reduce using rule 65 (primary -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (primary -> IDENTIFIER .)
    INCREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    DECREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    LBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 65 (primary -> IDENTIFIER .)
    PRINT           reduce using rule 65 (primary -> IDENTIFIER .)
    IF              reduce using rule 65 (primary -> IDENTIFIER .)
    WHILE           reduce using rule 65 (primary -> IDENTIFIER .)
    DEFINE          reduce using rule 65 (primary -> IDENTIFIER .)
    FOR             reduce using rule 65 (primary -> IDENTIFIER .)
    RESULT          reduce using rule 65 (primary -> IDENTIFIER .)
    WAIT            reduce using rule 65 (primary -> IDENTIFIER .)
    FSTRING         reduce using rule 65 (primary -> IDENTIFIER .)
    NOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TRUE            reduce using rule 65 (primary -> IDENTIFIER .)
    FALSE           reduce using rule 65 (primary -> IDENTIFIER .)
    NUMBER          reduce using rule 65 (primary -> IDENTIFIER .)
    STRING          reduce using rule 65 (primary -> IDENTIFIER .)
    $end            reduce using rule 65 (primary -> IDENTIFIER .)
    RBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    COMMA           reduce using rule 65 (primary -> IDENTIFIER .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 65 (primary -> IDENTIFIER .) ]


state 52

    (21) if_statement -> IF expression . block
    (22) if_statement -> IF expression . block ELSE block
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    LBRACE          shift and go to state 24

    block                          shift and go to state 87

state 53

    (27) while_statement -> WHILE expression . block
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48
    LBRACE          shift and go to state 24

    block                          shift and go to state 88

state 54

    (28) function_def -> DEFINE IDENTIFIER . LPAREN RPAREN block
    (29) function_def -> DEFINE IDENTIFIER . LPAREN param_list RPAREN block

    LPAREN          shift and go to state 89


state 55

    (23) for_loop -> FOR IDENTIFIER . IN iterable block

    IN              shift and go to state 90


state 56

    (33) return_statement -> RESULT expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IDENTIFIER      reduce using rule 33 (return_statement -> RESULT expression .)
    PRINT           reduce using rule 33 (return_statement -> RESULT expression .)
    IF              reduce using rule 33 (return_statement -> RESULT expression .)
    WHILE           reduce using rule 33 (return_statement -> RESULT expression .)
    DEFINE          reduce using rule 33 (return_statement -> RESULT expression .)
    FOR             reduce using rule 33 (return_statement -> RESULT expression .)
    RESULT          reduce using rule 33 (return_statement -> RESULT expression .)
    WAIT            reduce using rule 33 (return_statement -> RESULT expression .)
    LBRACE          reduce using rule 33 (return_statement -> RESULT expression .)
    FSTRING         reduce using rule 33 (return_statement -> RESULT expression .)
    PLUS            reduce using rule 33 (return_statement -> RESULT expression .)
    MINUS           reduce using rule 33 (return_statement -> RESULT expression .)
    NOT             reduce using rule 33 (return_statement -> RESULT expression .)
    TRUE            reduce using rule 33 (return_statement -> RESULT expression .)
    FALSE           reduce using rule 33 (return_statement -> RESULT expression .)
    NUMBER          reduce using rule 33 (return_statement -> RESULT expression .)
    STRING          reduce using rule 33 (return_statement -> RESULT expression .)
    LPAREN          reduce using rule 33 (return_statement -> RESULT expression .)
    $end            reduce using rule 33 (return_statement -> RESULT expression .)
    RBRACE          reduce using rule 33 (return_statement -> RESULT expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 57

    (67) wait_statement -> WAIT expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IDENTIFIER      reduce using rule 67 (wait_statement -> WAIT expression .)
    PRINT           reduce using rule 67 (wait_statement -> WAIT expression .)
    IF              reduce using rule 67 (wait_statement -> WAIT expression .)
    WHILE           reduce using rule 67 (wait_statement -> WAIT expression .)
    DEFINE          reduce using rule 67 (wait_statement -> WAIT expression .)
    FOR             reduce using rule 67 (wait_statement -> WAIT expression .)
    RESULT          reduce using rule 67 (wait_statement -> WAIT expression .)
    WAIT            reduce using rule 67 (wait_statement -> WAIT expression .)
    LBRACE          reduce using rule 67 (wait_statement -> WAIT expression .)
    FSTRING         reduce using rule 67 (wait_statement -> WAIT expression .)
    PLUS            reduce using rule 67 (wait_statement -> WAIT expression .)
    MINUS           reduce using rule 67 (wait_statement -> WAIT expression .)
    NOT             reduce using rule 67 (wait_statement -> WAIT expression .)
    TRUE            reduce using rule 67 (wait_statement -> WAIT expression .)
    FALSE           reduce using rule 67 (wait_statement -> WAIT expression .)
    NUMBER          reduce using rule 67 (wait_statement -> WAIT expression .)
    STRING          reduce using rule 67 (wait_statement -> WAIT expression .)
    LPAREN          reduce using rule 67 (wait_statement -> WAIT expression .)
    $end            reduce using rule 67 (wait_statement -> WAIT expression .)
    RBRACE          reduce using rule 67 (wait_statement -> WAIT expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 58

    (73) block -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 73 (block -> LBRACE RBRACE .)
    PRINT           reduce using rule 73 (block -> LBRACE RBRACE .)
    IF              reduce using rule 73 (block -> LBRACE RBRACE .)
    WHILE           reduce using rule 73 (block -> LBRACE RBRACE .)
    DEFINE          reduce using rule 73 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 73 (block -> LBRACE RBRACE .)
    RESULT          reduce using rule 73 (block -> LBRACE RBRACE .)
    WAIT            reduce using rule 73 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 73 (block -> LBRACE RBRACE .)
    FSTRING         reduce using rule 73 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 73 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 73 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 73 (block -> LBRACE RBRACE .)
    TRUE            reduce using rule 73 (block -> LBRACE RBRACE .)
    FALSE           reduce using rule 73 (block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 73 (block -> LBRACE RBRACE .)
    STRING          reduce using rule 73 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 73 (block -> LBRACE RBRACE .)
    $end            reduce using rule 73 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 73 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 73 (block -> LBRACE RBRACE .)


state 59

    (74) block -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . print_statement
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . function_def
    (9) statement -> . for_loop
    (10) statement -> . return_statement
    (11) statement -> . wait_statement
    (12) statement -> . block
    (13) statement -> . expression_statement
    (19) assignment -> . IDENTIFIER EQUALS expression
    (20) print_statement -> . PRINT LPAREN expression RPAREN
    (21) if_statement -> . IF expression block
    (22) if_statement -> . IF expression block ELSE block
    (27) while_statement -> . WHILE expression block
    (28) function_def -> . DEFINE IDENTIFIER LPAREN RPAREN block
    (29) function_def -> . DEFINE IDENTIFIER LPAREN param_list RPAREN block
    (23) for_loop -> . FOR IDENTIFIER IN iterable block
    (33) return_statement -> . RESULT expression
    (67) wait_statement -> . WAIT expression
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE
    (14) expression_statement -> . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RBRACE          shift and go to state 91
    IDENTIFIER      shift and go to state 14
    PRINT           shift and go to state 16
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEFINE          shift and go to state 20
    FOR             shift and go to state 21
    RESULT          shift and go to state 22
    WAIT            shift and go to state 23
    LBRACE          shift and go to state 24
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    statement                      shift and go to state 42
    assignment                     shift and go to state 4
    print_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    function_def                   shift and go to state 8
    for_loop                       shift and go to state 9
    return_statement               shift and go to state 10
    wait_statement                 shift and go to state 11
    block                          shift and go to state 12
    expression_statement           shift and go to state 13
    expression                     shift and go to state 15
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 60

    (35) logic_expr -> logic_expr OR_OP . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    logic_term                     shift and go to state 92
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 61

    (37) logic_term -> logic_term AND_OP . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    equality_expr                  shift and go to state 93
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 62

    (39) equality_expr -> equality_expr EQ . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    relational_expr                shift and go to state 94
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 63

    (40) equality_expr -> equality_expr NEQ . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    relational_expr                shift and go to state 95
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 64

    (42) relational_expr -> relational_expr LT . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    additive_expr                  shift and go to state 96
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 65

    (43) relational_expr -> relational_expr LE . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    additive_expr                  shift and go to state 97
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 66

    (44) relational_expr -> relational_expr GT . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    additive_expr                  shift and go to state 98
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 67

    (45) relational_expr -> relational_expr GE . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    additive_expr                  shift and go to state 99
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 68

    (47) additive_expr -> additive_expr PLUS . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    term                           shift and go to state 100
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 69

    (48) additive_expr -> additive_expr MINUS . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    term                           shift and go to state 101
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 70

    (54) factor -> PLUS factor .

    TIMES           reduce using rule 54 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 54 (factor -> PLUS factor .)
    MOD             reduce using rule 54 (factor -> PLUS factor .)
    PLUS            reduce using rule 54 (factor -> PLUS factor .)
    MINUS           reduce using rule 54 (factor -> PLUS factor .)
    LT              reduce using rule 54 (factor -> PLUS factor .)
    LE              reduce using rule 54 (factor -> PLUS factor .)
    GT              reduce using rule 54 (factor -> PLUS factor .)
    GE              reduce using rule 54 (factor -> PLUS factor .)
    EQ              reduce using rule 54 (factor -> PLUS factor .)
    NEQ             reduce using rule 54 (factor -> PLUS factor .)
    AND_OP          reduce using rule 54 (factor -> PLUS factor .)
    OR_OP           reduce using rule 54 (factor -> PLUS factor .)
    INCREMENT       reduce using rule 54 (factor -> PLUS factor .)
    DECREMENT       reduce using rule 54 (factor -> PLUS factor .)
    IDENTIFIER      reduce using rule 54 (factor -> PLUS factor .)
    PRINT           reduce using rule 54 (factor -> PLUS factor .)
    IF              reduce using rule 54 (factor -> PLUS factor .)
    WHILE           reduce using rule 54 (factor -> PLUS factor .)
    DEFINE          reduce using rule 54 (factor -> PLUS factor .)
    FOR             reduce using rule 54 (factor -> PLUS factor .)
    RESULT          reduce using rule 54 (factor -> PLUS factor .)
    WAIT            reduce using rule 54 (factor -> PLUS factor .)
    LBRACE          reduce using rule 54 (factor -> PLUS factor .)
    FSTRING         reduce using rule 54 (factor -> PLUS factor .)
    NOT             reduce using rule 54 (factor -> PLUS factor .)
    TRUE            reduce using rule 54 (factor -> PLUS factor .)
    FALSE           reduce using rule 54 (factor -> PLUS factor .)
    NUMBER          reduce using rule 54 (factor -> PLUS factor .)
    STRING          reduce using rule 54 (factor -> PLUS factor .)
    LPAREN          reduce using rule 54 (factor -> PLUS factor .)
    $end            reduce using rule 54 (factor -> PLUS factor .)
    RPAREN          reduce using rule 54 (factor -> PLUS factor .)
    RBRACE          reduce using rule 54 (factor -> PLUS factor .)
    COMMA           reduce using rule 54 (factor -> PLUS factor .)


state 71

    (65) primary -> IDENTIFIER .
    (68) function_call -> IDENTIFIER . LPAREN RPAREN
    (69) function_call -> IDENTIFIER . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TIMES           reduce using rule 65 (primary -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (primary -> IDENTIFIER .)
    MOD             reduce using rule 65 (primary -> IDENTIFIER .)
    PLUS            reduce using rule 65 (primary -> IDENTIFIER .)
    MINUS           reduce using rule 65 (primary -> IDENTIFIER .)
    LT              reduce using rule 65 (primary -> IDENTIFIER .)
    LE              reduce using rule 65 (primary -> IDENTIFIER .)
    GT              reduce using rule 65 (primary -> IDENTIFIER .)
    GE              reduce using rule 65 (primary -> IDENTIFIER .)
    EQ              reduce using rule 65 (primary -> IDENTIFIER .)
    NEQ             reduce using rule 65 (primary -> IDENTIFIER .)
    AND_OP          reduce using rule 65 (primary -> IDENTIFIER .)
    OR_OP           reduce using rule 65 (primary -> IDENTIFIER .)
    INCREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    DECREMENT       reduce using rule 65 (primary -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 65 (primary -> IDENTIFIER .)
    PRINT           reduce using rule 65 (primary -> IDENTIFIER .)
    IF              reduce using rule 65 (primary -> IDENTIFIER .)
    WHILE           reduce using rule 65 (primary -> IDENTIFIER .)
    DEFINE          reduce using rule 65 (primary -> IDENTIFIER .)
    FOR             reduce using rule 65 (primary -> IDENTIFIER .)
    RESULT          reduce using rule 65 (primary -> IDENTIFIER .)
    WAIT            reduce using rule 65 (primary -> IDENTIFIER .)
    LBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    FSTRING         reduce using rule 65 (primary -> IDENTIFIER .)
    NOT             reduce using rule 65 (primary -> IDENTIFIER .)
    TRUE            reduce using rule 65 (primary -> IDENTIFIER .)
    FALSE           reduce using rule 65 (primary -> IDENTIFIER .)
    NUMBER          reduce using rule 65 (primary -> IDENTIFIER .)
    STRING          reduce using rule 65 (primary -> IDENTIFIER .)
    $end            reduce using rule 65 (primary -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (primary -> IDENTIFIER .)
    RBRACE          reduce using rule 65 (primary -> IDENTIFIER .)
    COMMA           reduce using rule 65 (primary -> IDENTIFIER .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 65 (primary -> IDENTIFIER .) ]


state 72

    (50) term -> term TIMES . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 102
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 73

    (51) term -> term DIVIDE . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 103
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 74

    (52) term -> term MOD . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 17

    factor                         shift and go to state 104
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 75

    (55) factor -> MINUS factor .

    TIMES           reduce using rule 55 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 55 (factor -> MINUS factor .)
    MOD             reduce using rule 55 (factor -> MINUS factor .)
    PLUS            reduce using rule 55 (factor -> MINUS factor .)
    MINUS           reduce using rule 55 (factor -> MINUS factor .)
    LT              reduce using rule 55 (factor -> MINUS factor .)
    LE              reduce using rule 55 (factor -> MINUS factor .)
    GT              reduce using rule 55 (factor -> MINUS factor .)
    GE              reduce using rule 55 (factor -> MINUS factor .)
    EQ              reduce using rule 55 (factor -> MINUS factor .)
    NEQ             reduce using rule 55 (factor -> MINUS factor .)
    AND_OP          reduce using rule 55 (factor -> MINUS factor .)
    OR_OP           reduce using rule 55 (factor -> MINUS factor .)
    INCREMENT       reduce using rule 55 (factor -> MINUS factor .)
    DECREMENT       reduce using rule 55 (factor -> MINUS factor .)
    IDENTIFIER      reduce using rule 55 (factor -> MINUS factor .)
    PRINT           reduce using rule 55 (factor -> MINUS factor .)
    IF              reduce using rule 55 (factor -> MINUS factor .)
    WHILE           reduce using rule 55 (factor -> MINUS factor .)
    DEFINE          reduce using rule 55 (factor -> MINUS factor .)
    FOR             reduce using rule 55 (factor -> MINUS factor .)
    RESULT          reduce using rule 55 (factor -> MINUS factor .)
    WAIT            reduce using rule 55 (factor -> MINUS factor .)
    LBRACE          reduce using rule 55 (factor -> MINUS factor .)
    FSTRING         reduce using rule 55 (factor -> MINUS factor .)
    NOT             reduce using rule 55 (factor -> MINUS factor .)
    TRUE            reduce using rule 55 (factor -> MINUS factor .)
    FALSE           reduce using rule 55 (factor -> MINUS factor .)
    NUMBER          reduce using rule 55 (factor -> MINUS factor .)
    STRING          reduce using rule 55 (factor -> MINUS factor .)
    LPAREN          reduce using rule 55 (factor -> MINUS factor .)
    $end            reduce using rule 55 (factor -> MINUS factor .)
    RPAREN          reduce using rule 55 (factor -> MINUS factor .)
    RBRACE          reduce using rule 55 (factor -> MINUS factor .)
    COMMA           reduce using rule 55 (factor -> MINUS factor .)


state 76

    (56) factor -> NOT factor .

    TIMES           reduce using rule 56 (factor -> NOT factor .)
    DIVIDE          reduce using rule 56 (factor -> NOT factor .)
    MOD             reduce using rule 56 (factor -> NOT factor .)
    PLUS            reduce using rule 56 (factor -> NOT factor .)
    MINUS           reduce using rule 56 (factor -> NOT factor .)
    LT              reduce using rule 56 (factor -> NOT factor .)
    LE              reduce using rule 56 (factor -> NOT factor .)
    GT              reduce using rule 56 (factor -> NOT factor .)
    GE              reduce using rule 56 (factor -> NOT factor .)
    EQ              reduce using rule 56 (factor -> NOT factor .)
    NEQ             reduce using rule 56 (factor -> NOT factor .)
    AND_OP          reduce using rule 56 (factor -> NOT factor .)
    OR_OP           reduce using rule 56 (factor -> NOT factor .)
    INCREMENT       reduce using rule 56 (factor -> NOT factor .)
    DECREMENT       reduce using rule 56 (factor -> NOT factor .)
    IDENTIFIER      reduce using rule 56 (factor -> NOT factor .)
    PRINT           reduce using rule 56 (factor -> NOT factor .)
    IF              reduce using rule 56 (factor -> NOT factor .)
    WHILE           reduce using rule 56 (factor -> NOT factor .)
    DEFINE          reduce using rule 56 (factor -> NOT factor .)
    FOR             reduce using rule 56 (factor -> NOT factor .)
    RESULT          reduce using rule 56 (factor -> NOT factor .)
    WAIT            reduce using rule 56 (factor -> NOT factor .)
    LBRACE          reduce using rule 56 (factor -> NOT factor .)
    FSTRING         reduce using rule 56 (factor -> NOT factor .)
    NOT             reduce using rule 56 (factor -> NOT factor .)
    TRUE            reduce using rule 56 (factor -> NOT factor .)
    FALSE           reduce using rule 56 (factor -> NOT factor .)
    NUMBER          reduce using rule 56 (factor -> NOT factor .)
    STRING          reduce using rule 56 (factor -> NOT factor .)
    LPAREN          reduce using rule 56 (factor -> NOT factor .)
    $end            reduce using rule 56 (factor -> NOT factor .)
    RPAREN          reduce using rule 56 (factor -> NOT factor .)
    RBRACE          reduce using rule 56 (factor -> NOT factor .)
    COMMA           reduce using rule 56 (factor -> NOT factor .)


state 77

    (58) primary -> primary DOT . IDENTIFIER
    (59) primary -> primary DOT . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 105


state 78

    (19) assignment -> IDENTIFIER EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    IDENTIFIER      reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    PRINT           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    IF              reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    WHILE           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    DEFINE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    FOR             reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    RESULT          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    WAIT            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    LBRACE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    FSTRING         reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    PLUS            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    MINUS           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    NOT             reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    TRUE            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    FALSE           reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    NUMBER          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    STRING          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    LPAREN          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 19 (assignment -> IDENTIFIER EQUALS expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 79

    (17) expression -> IDENTIFIER PLUS_EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    IDENTIFIER      reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    PRINT           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    IF              reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    WHILE           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    DEFINE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    FOR             reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RESULT          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    WAIT            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    LBRACE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    FSTRING         reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    PLUS            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    MINUS           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    NOT             reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    TRUE            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    FALSE           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    NUMBER          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    STRING          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    LPAREN          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    $end            reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RPAREN          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    RBRACE          reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    COMMA           reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48

  ! INCREMENT       [ reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .) ]
  ! DECREMENT       [ reduce using rule 17 (expression -> IDENTIFIER PLUS_EQUALS expression .) ]


state 80

    (18) expression -> IDENTIFIER MINUS_EQUALS expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    IDENTIFIER      reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    PRINT           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    IF              reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    WHILE           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    DEFINE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    FOR             reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RESULT          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    WAIT            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    LBRACE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    FSTRING         reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    PLUS            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    MINUS           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    NOT             reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    TRUE            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    FALSE           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    NUMBER          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    STRING          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    LPAREN          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    $end            reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RPAREN          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    RBRACE          reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    COMMA           reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48

  ! INCREMENT       [ reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .) ]
  ! DECREMENT       [ reduce using rule 18 (expression -> IDENTIFIER MINUS_EQUALS expression .) ]


state 81

    (68) function_call -> IDENTIFIER LPAREN RPAREN .

    DOT             reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MOD             reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    GE              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    EQ              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NEQ             reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    AND_OP          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    OR_OP           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    INCREMENT       reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DECREMENT       reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    PRINT           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    IF              reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    WHILE           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    DEFINE          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    FOR             reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RESULT          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    WAIT            reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    FSTRING         reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NOT             reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    TRUE            reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    FALSE           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    NUMBER          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    STRING          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    LPAREN          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    $end            reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 68 (function_call -> IDENTIFIER LPAREN RPAREN .)


state 82

    (69) function_call -> IDENTIFIER LPAREN arg_list . RPAREN
    (71) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 107


state 83

    (70) arg_list -> expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          reduce using rule 70 (arg_list -> expression .)
    COMMA           reduce using rule 70 (arg_list -> expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 84

    (72) arg_list -> empty .

    RPAREN          reduce using rule 72 (arg_list -> empty .)
    COMMA           reduce using rule 72 (arg_list -> empty .)


state 85

    (20) print_statement -> PRINT LPAREN expression . RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          shift and go to state 108
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 86

    (66) primary -> LPAREN expression RPAREN .

    DOT             reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    MOD             reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    LT              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    LE              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    GT              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    GE              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    EQ              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    IF              reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    DEFINE          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    FOR             reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    RESULT          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    WAIT            reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    FSTRING         reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    NOT             reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    STRING          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    $end            reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 66 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 66 (primary -> LPAREN expression RPAREN .)


state 87

    (21) if_statement -> IF expression block .
    (22) if_statement -> IF expression block . ELSE block

    IDENTIFIER      reduce using rule 21 (if_statement -> IF expression block .)
    PRINT           reduce using rule 21 (if_statement -> IF expression block .)
    IF              reduce using rule 21 (if_statement -> IF expression block .)
    WHILE           reduce using rule 21 (if_statement -> IF expression block .)
    DEFINE          reduce using rule 21 (if_statement -> IF expression block .)
    FOR             reduce using rule 21 (if_statement -> IF expression block .)
    RESULT          reduce using rule 21 (if_statement -> IF expression block .)
    WAIT            reduce using rule 21 (if_statement -> IF expression block .)
    LBRACE          reduce using rule 21 (if_statement -> IF expression block .)
    FSTRING         reduce using rule 21 (if_statement -> IF expression block .)
    PLUS            reduce using rule 21 (if_statement -> IF expression block .)
    MINUS           reduce using rule 21 (if_statement -> IF expression block .)
    NOT             reduce using rule 21 (if_statement -> IF expression block .)
    TRUE            reduce using rule 21 (if_statement -> IF expression block .)
    FALSE           reduce using rule 21 (if_statement -> IF expression block .)
    NUMBER          reduce using rule 21 (if_statement -> IF expression block .)
    STRING          reduce using rule 21 (if_statement -> IF expression block .)
    LPAREN          reduce using rule 21 (if_statement -> IF expression block .)
    $end            reduce using rule 21 (if_statement -> IF expression block .)
    RBRACE          reduce using rule 21 (if_statement -> IF expression block .)
    ELSE            shift and go to state 109


state 88

    (27) while_statement -> WHILE expression block .

    IDENTIFIER      reduce using rule 27 (while_statement -> WHILE expression block .)
    PRINT           reduce using rule 27 (while_statement -> WHILE expression block .)
    IF              reduce using rule 27 (while_statement -> WHILE expression block .)
    WHILE           reduce using rule 27 (while_statement -> WHILE expression block .)
    DEFINE          reduce using rule 27 (while_statement -> WHILE expression block .)
    FOR             reduce using rule 27 (while_statement -> WHILE expression block .)
    RESULT          reduce using rule 27 (while_statement -> WHILE expression block .)
    WAIT            reduce using rule 27 (while_statement -> WHILE expression block .)
    LBRACE          reduce using rule 27 (while_statement -> WHILE expression block .)
    FSTRING         reduce using rule 27 (while_statement -> WHILE expression block .)
    PLUS            reduce using rule 27 (while_statement -> WHILE expression block .)
    MINUS           reduce using rule 27 (while_statement -> WHILE expression block .)
    NOT             reduce using rule 27 (while_statement -> WHILE expression block .)
    TRUE            reduce using rule 27 (while_statement -> WHILE expression block .)
    FALSE           reduce using rule 27 (while_statement -> WHILE expression block .)
    NUMBER          reduce using rule 27 (while_statement -> WHILE expression block .)
    STRING          reduce using rule 27 (while_statement -> WHILE expression block .)
    LPAREN          reduce using rule 27 (while_statement -> WHILE expression block .)
    $end            reduce using rule 27 (while_statement -> WHILE expression block .)
    RBRACE          reduce using rule 27 (while_statement -> WHILE expression block .)


state 89

    (28) function_def -> DEFINE IDENTIFIER LPAREN . RPAREN block
    (29) function_def -> DEFINE IDENTIFIER LPAREN . param_list RPAREN block
    (30) param_list -> . IDENTIFIER
    (31) param_list -> . param_list COMMA IDENTIFIER
    (32) param_list -> . empty
    (75) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 111
    IDENTIFIER      shift and go to state 110
    COMMA           reduce using rule 75 (empty -> .)

  ! RPAREN          [ reduce using rule 75 (empty -> .) ]

    param_list                     shift and go to state 112
    empty                          shift and go to state 113

state 90

    (23) for_loop -> FOR IDENTIFIER IN . iterable block
    (24) iterable -> . expression
    (25) iterable -> . RANGE LPAREN expression COMMA expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RANGE           shift and go to state 116
    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    iterable                       shift and go to state 114
    expression                     shift and go to state 115
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 91

    (74) block -> LBRACE statement_list RBRACE .

    IDENTIFIER      reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    DEFINE          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    RESULT          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    WAIT            reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    FSTRING         reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 74 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 74 (block -> LBRACE statement_list RBRACE .)


state 92

    (35) logic_expr -> logic_expr OR_OP logic_term .
    (37) logic_term -> logic_term . AND_OP equality_expr

    OR_OP           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    INCREMENT       reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    DECREMENT       reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    IDENTIFIER      reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    PRINT           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    IF              reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    WHILE           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    DEFINE          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    FOR             reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    RESULT          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    WAIT            reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    LBRACE          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    FSTRING         reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    PLUS            reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    MINUS           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    NOT             reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    TRUE            reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    FALSE           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    NUMBER          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    STRING          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    LPAREN          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    $end            reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    RPAREN          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    RBRACE          reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    COMMA           reduce using rule 35 (logic_expr -> logic_expr OR_OP logic_term .)
    AND_OP          shift and go to state 61


state 93

    (37) logic_term -> logic_term AND_OP equality_expr .
    (39) equality_expr -> equality_expr . EQ relational_expr
    (40) equality_expr -> equality_expr . NEQ relational_expr

    AND_OP          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    OR_OP           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    INCREMENT       reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    DECREMENT       reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    IDENTIFIER      reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    PRINT           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    IF              reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    WHILE           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    DEFINE          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    FOR             reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    RESULT          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    WAIT            reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    LBRACE          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    FSTRING         reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    PLUS            reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    MINUS           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    NOT             reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    TRUE            reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    FALSE           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    NUMBER          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    STRING          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    LPAREN          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    $end            reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    RPAREN          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    RBRACE          reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    COMMA           reduce using rule 37 (logic_term -> logic_term AND_OP equality_expr .)
    EQ              shift and go to state 62
    NEQ             shift and go to state 63


state 94

    (39) equality_expr -> equality_expr EQ relational_expr .
    (42) relational_expr -> relational_expr . LT additive_expr
    (43) relational_expr -> relational_expr . LE additive_expr
    (44) relational_expr -> relational_expr . GT additive_expr
    (45) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    NEQ             reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    AND_OP          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    OR_OP           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    INCREMENT       reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    DECREMENT       reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    IDENTIFIER      reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    PRINT           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    IF              reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    WHILE           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    DEFINE          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    FOR             reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    RESULT          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    WAIT            reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    LBRACE          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    FSTRING         reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    PLUS            reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    MINUS           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    NOT             reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    TRUE            reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    FALSE           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    NUMBER          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    STRING          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    LPAREN          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    $end            reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    RPAREN          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    RBRACE          reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    COMMA           reduce using rule 39 (equality_expr -> equality_expr EQ relational_expr .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67


state 95

    (40) equality_expr -> equality_expr NEQ relational_expr .
    (42) relational_expr -> relational_expr . LT additive_expr
    (43) relational_expr -> relational_expr . LE additive_expr
    (44) relational_expr -> relational_expr . GT additive_expr
    (45) relational_expr -> relational_expr . GE additive_expr

    EQ              reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    NEQ             reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    AND_OP          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    OR_OP           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    INCREMENT       reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    DECREMENT       reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    IDENTIFIER      reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    PRINT           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    IF              reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    WHILE           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    DEFINE          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    FOR             reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    RESULT          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    WAIT            reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    LBRACE          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    FSTRING         reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    PLUS            reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    MINUS           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    NOT             reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    TRUE            reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    FALSE           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    NUMBER          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    STRING          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    LPAREN          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    $end            reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    RPAREN          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    RBRACE          reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    COMMA           reduce using rule 40 (equality_expr -> equality_expr NEQ relational_expr .)
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67


state 96

    (42) relational_expr -> relational_expr LT additive_expr .
    (47) additive_expr -> additive_expr . PLUS term
    (48) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    LE              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    GT              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    GE              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    EQ              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    NEQ             reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    AND_OP          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    OR_OP           reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    INCREMENT       reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    DECREMENT       reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    IDENTIFIER      reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    PRINT           reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    IF              reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    WHILE           reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    DEFINE          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    FOR             reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    RESULT          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    WAIT            reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    LBRACE          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    FSTRING         reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    NOT             reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    TRUE            reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    FALSE           reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    NUMBER          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    STRING          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    LPAREN          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    $end            reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    RPAREN          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    RBRACE          reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    COMMA           reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .) ]
  ! MINUS           [ reduce using rule 42 (relational_expr -> relational_expr LT additive_expr .) ]


state 97

    (43) relational_expr -> relational_expr LE additive_expr .
    (47) additive_expr -> additive_expr . PLUS term
    (48) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    LE              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    GT              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    GE              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    EQ              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    NEQ             reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    AND_OP          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    OR_OP           reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    INCREMENT       reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    DECREMENT       reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    IDENTIFIER      reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    PRINT           reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    IF              reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    WHILE           reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    DEFINE          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    FOR             reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    RESULT          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    WAIT            reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    LBRACE          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    FSTRING         reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    NOT             reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    TRUE            reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    FALSE           reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    NUMBER          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    STRING          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    LPAREN          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    $end            reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    RPAREN          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    RBRACE          reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    COMMA           reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .) ]
  ! MINUS           [ reduce using rule 43 (relational_expr -> relational_expr LE additive_expr .) ]


state 98

    (44) relational_expr -> relational_expr GT additive_expr .
    (47) additive_expr -> additive_expr . PLUS term
    (48) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    LE              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    GT              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    GE              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    EQ              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    NEQ             reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    AND_OP          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    OR_OP           reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    INCREMENT       reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    DECREMENT       reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    IDENTIFIER      reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    PRINT           reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    IF              reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    WHILE           reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    DEFINE          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    FOR             reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    RESULT          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    WAIT            reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    LBRACE          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    FSTRING         reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    NOT             reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    TRUE            reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    FALSE           reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    NUMBER          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    STRING          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    LPAREN          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    $end            reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    RPAREN          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    RBRACE          reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    COMMA           reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .) ]
  ! MINUS           [ reduce using rule 44 (relational_expr -> relational_expr GT additive_expr .) ]


state 99

    (45) relational_expr -> relational_expr GE additive_expr .
    (47) additive_expr -> additive_expr . PLUS term
    (48) additive_expr -> additive_expr . MINUS term

    LT              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    LE              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    GT              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    GE              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    EQ              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    NEQ             reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    AND_OP          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    OR_OP           reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    INCREMENT       reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    DECREMENT       reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    IDENTIFIER      reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    PRINT           reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    IF              reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    WHILE           reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    DEFINE          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    FOR             reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    RESULT          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    WAIT            reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    LBRACE          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    FSTRING         reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    NOT             reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    TRUE            reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    FALSE           reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    NUMBER          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    STRING          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    LPAREN          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    $end            reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    RPAREN          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    RBRACE          reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    COMMA           reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69

  ! PLUS            [ reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .) ]
  ! MINUS           [ reduce using rule 45 (relational_expr -> relational_expr GE additive_expr .) ]


state 100

    (47) additive_expr -> additive_expr PLUS term .
    (50) term -> term . TIMES factor
    (51) term -> term . DIVIDE factor
    (52) term -> term . MOD factor

    PLUS            reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    MINUS           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    LT              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    LE              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    GT              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    GE              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    EQ              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    NEQ             reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    AND_OP          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    OR_OP           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    INCREMENT       reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    DECREMENT       reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    IDENTIFIER      reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    PRINT           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    IF              reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    WHILE           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    DEFINE          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    FOR             reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    RESULT          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    WAIT            reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    LBRACE          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    FSTRING         reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    NOT             reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    TRUE            reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    FALSE           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    NUMBER          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    STRING          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    LPAREN          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    $end            reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    RPAREN          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    RBRACE          reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    COMMA           reduce using rule 47 (additive_expr -> additive_expr PLUS term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 101

    (48) additive_expr -> additive_expr MINUS term .
    (50) term -> term . TIMES factor
    (51) term -> term . DIVIDE factor
    (52) term -> term . MOD factor

    PLUS            reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    MINUS           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    LT              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    LE              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    GT              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    GE              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    EQ              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    NEQ             reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    AND_OP          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    OR_OP           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    INCREMENT       reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    DECREMENT       reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    IDENTIFIER      reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    PRINT           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    IF              reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    WHILE           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    DEFINE          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    FOR             reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    RESULT          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    WAIT            reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    LBRACE          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    FSTRING         reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    NOT             reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    TRUE            reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    FALSE           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    NUMBER          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    STRING          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    LPAREN          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    $end            reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    RPAREN          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    RBRACE          reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    COMMA           reduce using rule 48 (additive_expr -> additive_expr MINUS term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 102

    (50) term -> term TIMES factor .

    TIMES           reduce using rule 50 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 50 (term -> term TIMES factor .)
    MOD             reduce using rule 50 (term -> term TIMES factor .)
    PLUS            reduce using rule 50 (term -> term TIMES factor .)
    MINUS           reduce using rule 50 (term -> term TIMES factor .)
    LT              reduce using rule 50 (term -> term TIMES factor .)
    LE              reduce using rule 50 (term -> term TIMES factor .)
    GT              reduce using rule 50 (term -> term TIMES factor .)
    GE              reduce using rule 50 (term -> term TIMES factor .)
    EQ              reduce using rule 50 (term -> term TIMES factor .)
    NEQ             reduce using rule 50 (term -> term TIMES factor .)
    AND_OP          reduce using rule 50 (term -> term TIMES factor .)
    OR_OP           reduce using rule 50 (term -> term TIMES factor .)
    INCREMENT       reduce using rule 50 (term -> term TIMES factor .)
    DECREMENT       reduce using rule 50 (term -> term TIMES factor .)
    IDENTIFIER      reduce using rule 50 (term -> term TIMES factor .)
    PRINT           reduce using rule 50 (term -> term TIMES factor .)
    IF              reduce using rule 50 (term -> term TIMES factor .)
    WHILE           reduce using rule 50 (term -> term TIMES factor .)
    DEFINE          reduce using rule 50 (term -> term TIMES factor .)
    FOR             reduce using rule 50 (term -> term TIMES factor .)
    RESULT          reduce using rule 50 (term -> term TIMES factor .)
    WAIT            reduce using rule 50 (term -> term TIMES factor .)
    LBRACE          reduce using rule 50 (term -> term TIMES factor .)
    FSTRING         reduce using rule 50 (term -> term TIMES factor .)
    NOT             reduce using rule 50 (term -> term TIMES factor .)
    TRUE            reduce using rule 50 (term -> term TIMES factor .)
    FALSE           reduce using rule 50 (term -> term TIMES factor .)
    NUMBER          reduce using rule 50 (term -> term TIMES factor .)
    STRING          reduce using rule 50 (term -> term TIMES factor .)
    LPAREN          reduce using rule 50 (term -> term TIMES factor .)
    $end            reduce using rule 50 (term -> term TIMES factor .)
    RPAREN          reduce using rule 50 (term -> term TIMES factor .)
    RBRACE          reduce using rule 50 (term -> term TIMES factor .)
    COMMA           reduce using rule 50 (term -> term TIMES factor .)


state 103

    (51) term -> term DIVIDE factor .

    TIMES           reduce using rule 51 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 51 (term -> term DIVIDE factor .)
    MOD             reduce using rule 51 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 51 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 51 (term -> term DIVIDE factor .)
    LT              reduce using rule 51 (term -> term DIVIDE factor .)
    LE              reduce using rule 51 (term -> term DIVIDE factor .)
    GT              reduce using rule 51 (term -> term DIVIDE factor .)
    GE              reduce using rule 51 (term -> term DIVIDE factor .)
    EQ              reduce using rule 51 (term -> term DIVIDE factor .)
    NEQ             reduce using rule 51 (term -> term DIVIDE factor .)
    AND_OP          reduce using rule 51 (term -> term DIVIDE factor .)
    OR_OP           reduce using rule 51 (term -> term DIVIDE factor .)
    INCREMENT       reduce using rule 51 (term -> term DIVIDE factor .)
    DECREMENT       reduce using rule 51 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 51 (term -> term DIVIDE factor .)
    PRINT           reduce using rule 51 (term -> term DIVIDE factor .)
    IF              reduce using rule 51 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 51 (term -> term DIVIDE factor .)
    DEFINE          reduce using rule 51 (term -> term DIVIDE factor .)
    FOR             reduce using rule 51 (term -> term DIVIDE factor .)
    RESULT          reduce using rule 51 (term -> term DIVIDE factor .)
    WAIT            reduce using rule 51 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 51 (term -> term DIVIDE factor .)
    FSTRING         reduce using rule 51 (term -> term DIVIDE factor .)
    NOT             reduce using rule 51 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 51 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 51 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 51 (term -> term DIVIDE factor .)
    STRING          reduce using rule 51 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 51 (term -> term DIVIDE factor .)
    $end            reduce using rule 51 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 51 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 51 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 51 (term -> term DIVIDE factor .)


state 104

    (52) term -> term MOD factor .

    TIMES           reduce using rule 52 (term -> term MOD factor .)
    DIVIDE          reduce using rule 52 (term -> term MOD factor .)
    MOD             reduce using rule 52 (term -> term MOD factor .)
    PLUS            reduce using rule 52 (term -> term MOD factor .)
    MINUS           reduce using rule 52 (term -> term MOD factor .)
    LT              reduce using rule 52 (term -> term MOD factor .)
    LE              reduce using rule 52 (term -> term MOD factor .)
    GT              reduce using rule 52 (term -> term MOD factor .)
    GE              reduce using rule 52 (term -> term MOD factor .)
    EQ              reduce using rule 52 (term -> term MOD factor .)
    NEQ             reduce using rule 52 (term -> term MOD factor .)
    AND_OP          reduce using rule 52 (term -> term MOD factor .)
    OR_OP           reduce using rule 52 (term -> term MOD factor .)
    INCREMENT       reduce using rule 52 (term -> term MOD factor .)
    DECREMENT       reduce using rule 52 (term -> term MOD factor .)
    IDENTIFIER      reduce using rule 52 (term -> term MOD factor .)
    PRINT           reduce using rule 52 (term -> term MOD factor .)
    IF              reduce using rule 52 (term -> term MOD factor .)
    WHILE           reduce using rule 52 (term -> term MOD factor .)
    DEFINE          reduce using rule 52 (term -> term MOD factor .)
    FOR             reduce using rule 52 (term -> term MOD factor .)
    RESULT          reduce using rule 52 (term -> term MOD factor .)
    WAIT            reduce using rule 52 (term -> term MOD factor .)
    LBRACE          reduce using rule 52 (term -> term MOD factor .)
    FSTRING         reduce using rule 52 (term -> term MOD factor .)
    NOT             reduce using rule 52 (term -> term MOD factor .)
    TRUE            reduce using rule 52 (term -> term MOD factor .)
    FALSE           reduce using rule 52 (term -> term MOD factor .)
    NUMBER          reduce using rule 52 (term -> term MOD factor .)
    STRING          reduce using rule 52 (term -> term MOD factor .)
    LPAREN          reduce using rule 52 (term -> term MOD factor .)
    $end            reduce using rule 52 (term -> term MOD factor .)
    RPAREN          reduce using rule 52 (term -> term MOD factor .)
    RBRACE          reduce using rule 52 (term -> term MOD factor .)
    COMMA           reduce using rule 52 (term -> term MOD factor .)


state 105

    (58) primary -> primary DOT IDENTIFIER .
    (59) primary -> primary DOT IDENTIFIER . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    TIMES           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    DIVIDE          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    MOD             reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    PLUS            reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    MINUS           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    LT              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    LE              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    GT              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    GE              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    EQ              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    NEQ             reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    AND_OP          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    OR_OP           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    INCREMENT       reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    DECREMENT       reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    PRINT           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    IF              reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    WHILE           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    DEFINE          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    FOR             reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    RESULT          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    WAIT            reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    LBRACE          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    FSTRING         reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    NOT             reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    TRUE            reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    FALSE           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    NUMBER          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    STRING          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    $end            reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    RPAREN          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    RBRACE          reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    COMMA           reduce using rule 58 (primary -> primary DOT IDENTIFIER .)
    LPAREN          shift and go to state 117

  ! LPAREN          [ reduce using rule 58 (primary -> primary DOT IDENTIFIER .) ]


state 106

    (69) function_call -> IDENTIFIER LPAREN arg_list RPAREN .

    DOT             reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AND_OP          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OR_OP           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    INCREMENT       reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DECREMENT       reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    PRINT           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEFINE          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RESULT          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    WAIT            reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FSTRING         reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NOT             reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TRUE            reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FALSE           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    STRING          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 69 (function_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 107

    (71) arg_list -> arg_list COMMA . expression
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 118
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 108

    (20) print_statement -> PRINT LPAREN expression RPAREN .

    IDENTIFIER      reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEFINE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    RESULT          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    WAIT            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    LBRACE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FSTRING         reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    PLUS            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    MINUS           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    NOT             reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    TRUE            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    FALSE           reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    NUMBER          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    STRING          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACE          reduce using rule 20 (print_statement -> PRINT LPAREN expression RPAREN .)


state 109

    (22) if_statement -> IF expression block ELSE . block
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 119

state 110

    (30) param_list -> IDENTIFIER .

    RPAREN          reduce using rule 30 (param_list -> IDENTIFIER .)
    COMMA           reduce using rule 30 (param_list -> IDENTIFIER .)


state 111

    (28) function_def -> DEFINE IDENTIFIER LPAREN RPAREN . block
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 120

state 112

    (29) function_def -> DEFINE IDENTIFIER LPAREN param_list . RPAREN block
    (31) param_list -> param_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 113

    (32) param_list -> empty .

    RPAREN          reduce using rule 32 (param_list -> empty .)
    COMMA           reduce using rule 32 (param_list -> empty .)


state 114

    (23) for_loop -> FOR IDENTIFIER IN iterable . block
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 123

state 115

    (24) iterable -> expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    LBRACE          reduce using rule 24 (iterable -> expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 116

    (25) iterable -> RANGE . LPAREN expression COMMA expression RPAREN

    LPAREN          shift and go to state 124


state 117

    (59) primary -> primary DOT IDENTIFIER LPAREN . arg_list RPAREN
    (70) arg_list -> . expression
    (71) arg_list -> . arg_list COMMA expression
    (72) arg_list -> . empty
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (75) empty -> .
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    RPAREN          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    primary                        shift and go to state 36
    arg_list                       shift and go to state 125
    expression                     shift and go to state 83
    empty                          shift and go to state 84
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    function_call                  shift and go to state 37

state 118

    (71) arg_list -> arg_list COMMA expression .
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          reduce using rule 71 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 71 (arg_list -> arg_list COMMA expression .)
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 119

    (22) if_statement -> IF expression block ELSE block .

    IDENTIFIER      reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    PRINT           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    IF              reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    WHILE           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    DEFINE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    FOR             reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    RESULT          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    WAIT            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    LBRACE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    FSTRING         reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    PLUS            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    MINUS           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    NOT             reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    TRUE            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    FALSE           reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    NUMBER          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    STRING          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    LPAREN          reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    $end            reduce using rule 22 (if_statement -> IF expression block ELSE block .)
    RBRACE          reduce using rule 22 (if_statement -> IF expression block ELSE block .)


state 120

    (28) function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .

    IDENTIFIER      reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    PRINT           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    IF              reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    WHILE           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    DEFINE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    FOR             reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    RESULT          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    WAIT            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    LBRACE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    FSTRING         reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    PLUS            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    MINUS           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    NOT             reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    TRUE            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    FALSE           reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    NUMBER          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    STRING          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    LPAREN          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    $end            reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)
    RBRACE          reduce using rule 28 (function_def -> DEFINE IDENTIFIER LPAREN RPAREN block .)


state 121

    (29) function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN . block
    (73) block -> . LBRACE RBRACE
    (74) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 126

state 122

    (31) param_list -> param_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 127


state 123

    (23) for_loop -> FOR IDENTIFIER IN iterable block .

    IDENTIFIER      reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    PRINT           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    IF              reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    WHILE           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    DEFINE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    FOR             reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    RESULT          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    WAIT            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    LBRACE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    FSTRING         reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    PLUS            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    MINUS           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    NOT             reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    TRUE            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    FALSE           reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    NUMBER          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    STRING          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    LPAREN          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    $end            reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)
    RBRACE          reduce using rule 23 (for_loop -> FOR IDENTIFIER IN iterable block .)


state 124

    (25) iterable -> RANGE LPAREN . expression COMMA expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 128
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 125

    (59) primary -> primary DOT IDENTIFIER LPAREN arg_list . RPAREN
    (71) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 129
    COMMA           shift and go to state 107


state 126

    (29) function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .

    IDENTIFIER      reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    PRINT           reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    IF              reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    WHILE           reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    DEFINE          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    FOR             reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    RESULT          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    WAIT            reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    LBRACE          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    FSTRING         reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    PLUS            reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    MINUS           reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    NOT             reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    TRUE            reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    FALSE           reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    NUMBER          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    STRING          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    LPAREN          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    $end            reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)
    RBRACE          reduce using rule 29 (function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block .)


state 127

    (31) param_list -> param_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 31 (param_list -> param_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 31 (param_list -> param_list COMMA IDENTIFIER .)


state 128

    (25) iterable -> RANGE LPAREN expression . COMMA expression RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    COMMA           shift and go to state 130
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 129

    (59) primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .

    DOT             reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    AND_OP          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    OR_OP           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    INCREMENT       reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DECREMENT       reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    PRINT           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    DEFINE          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RESULT          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    WAIT            reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FSTRING         reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NOT             reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    TRUE            reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    FALSE           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    STRING          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 59 (primary -> primary DOT IDENTIFIER LPAREN arg_list RPAREN .)


state 130

    (25) iterable -> RANGE LPAREN expression COMMA . expression RPAREN
    (15) expression -> . expression INCREMENT
    (16) expression -> . expression DECREMENT
    (17) expression -> . IDENTIFIER PLUS_EQUALS expression
    (18) expression -> . IDENTIFIER MINUS_EQUALS expression
    (26) expression -> . FSTRING
    (34) expression -> . logic_expr
    (35) logic_expr -> . logic_expr OR_OP logic_term
    (36) logic_expr -> . logic_term
    (37) logic_term -> . logic_term AND_OP equality_expr
    (38) logic_term -> . equality_expr
    (39) equality_expr -> . equality_expr EQ relational_expr
    (40) equality_expr -> . equality_expr NEQ relational_expr
    (41) equality_expr -> . relational_expr
    (42) relational_expr -> . relational_expr LT additive_expr
    (43) relational_expr -> . relational_expr LE additive_expr
    (44) relational_expr -> . relational_expr GT additive_expr
    (45) relational_expr -> . relational_expr GE additive_expr
    (46) relational_expr -> . additive_expr
    (47) additive_expr -> . additive_expr PLUS term
    (48) additive_expr -> . additive_expr MINUS term
    (49) additive_expr -> . term
    (50) term -> . term TIMES factor
    (51) term -> . term DIVIDE factor
    (52) term -> . term MOD factor
    (53) term -> . factor
    (54) factor -> . PLUS factor
    (55) factor -> . MINUS factor
    (56) factor -> . NOT factor
    (57) factor -> . primary
    (58) primary -> . primary DOT IDENTIFIER
    (59) primary -> . primary DOT IDENTIFIER LPAREN arg_list RPAREN
    (60) primary -> . function_call
    (61) primary -> . TRUE
    (62) primary -> . FALSE
    (63) primary -> . NUMBER
    (64) primary -> . STRING
    (65) primary -> . IDENTIFIER
    (66) primary -> . LPAREN expression RPAREN
    (68) function_call -> . IDENTIFIER LPAREN RPAREN
    (69) function_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 51
    FSTRING         shift and go to state 25
    PLUS            shift and go to state 31
    MINUS           shift and go to state 33
    NOT             shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    LPAREN          shift and go to state 17

    expression                     shift and go to state 131
    logic_expr                     shift and go to state 26
    logic_term                     shift and go to state 27
    equality_expr                  shift and go to state 28
    relational_expr                shift and go to state 29
    additive_expr                  shift and go to state 30
    term                           shift and go to state 32
    factor                         shift and go to state 34
    primary                        shift and go to state 36
    function_call                  shift and go to state 37

state 131

    (25) iterable -> RANGE LPAREN expression COMMA expression . RPAREN
    (15) expression -> expression . INCREMENT
    (16) expression -> expression . DECREMENT

    RPAREN          shift and go to state 132
    INCREMENT       shift and go to state 47
    DECREMENT       shift and go to state 48


state 132

    (25) iterable -> RANGE LPAREN expression COMMA expression RPAREN .

    LBRACE          reduce using rule 25 (iterable -> RANGE LPAREN expression COMMA expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 46 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 79 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 79 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 80 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 80 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 105 resolved as shift
