
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftOR_OPORleftAND_OPANDnonassocEQNEQnonassocLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODrightNOTUMINUSAND AND_OP COMMA DECREMENT DEFINE DIVIDE DOT ELSE EQ EQUALS FALSE FOR F_QUOTE GE GT IDENTIFIER IF IMPORT IN INCREMENT LBRACE LE LPAREN LT MINUS MINUS_EQUALS MOD NEQ NEWLINE NOT NUMBER OR OR_OP PLUS PLUS_EQUALS PRINT QUOTE RANGE RBRACE RESULT RPAREN STRING STRING_CONTENT TIMES TRUE WAIT WHILEprogram : statement_list\n               | statement_list NEWLINEstatement_list : statement_list NEWLINE statement\n                      | statement\n    statement : assignment\n                 | print_statement\n                 | if_statement\n                 | while_statement\n                 | function_def\n                 | for_loop\n                 | return_statement\n                 | wait_statement\n                 | block\n                 | expression_statement\n    expression_statement : expressionexpression : expression INCREMENT\n                  | expression DECREMENT\n    expression : IDENTIFIER PLUS_EQUALS expression\n                  | IDENTIFIER MINUS_EQUALS expression\n    assignment : IDENTIFIER EQUALS expressionprint_statement : PRINT LPAREN expression RPAREN\n    if_statement : IF expression block\n                 | IF expression block ELSE block\n    for_loop : FOR IDENTIFIER IN iterable blockiterable : expression\n                | RANGE LPAREN expression COMMA expression RPAREN\n    while_statement : WHILE expression blockfunction_def : DEFINE IDENTIFIER LPAREN RPAREN block\n                    | DEFINE IDENTIFIER LPAREN param_list RPAREN block\n    param_list : IDENTIFIER\n                  | param_list COMMA IDENTIFIER\n                  | empty\n    statement : IMPORT IDENTIFIERreturn_statement : RESULT expressionexpression : equality_exprfstring : F_QUOTE fstring_content QUOTEfstring_content : fstring_content fstring_part\n                       | fstring_partfstring_part : STRING_CONTENT\n                    | LBRACE expression RBRACElogic_expr : logic_expr OR_OP logic_term\n                  | logic_term\n    logic_term : logic_term AND_OP equality_expr\n                  | equality_expr\n    equality_expr : relational_expr\n                     | equality_expr EQ relational_expr\n                     | equality_expr NEQ relational_exprrelational_expr : additive_expr\n                       | relational_expr LT additive_expr\n                       | relational_expr GT additive_expr\n                       | relational_expr LE additive_expr\n                       | relational_expr GE additive_expradditive_expr : additive_expr PLUS term\n                     | additive_expr MINUS term\n                     | term\n    term : term TIMES factor\n            | term DIVIDE factor\n            | term MOD factor\n            | factor\n    factor : PLUS factor\n              | MINUS factor %prec UMINUS\n              | NOT factor\n              | primary\n    primary : atom\n               | primary DOT IDENTIFIER\n               | primary LPAREN arg_list RPAREN\n               | primary LPAREN RPAREN\n    atom : IDENTIFIER\n            | NUMBER\n            | STRING\n            | TRUE\n            | FALSE\n            | LPAREN expression RPARENmember_access : DOT IDENTIFIER\n                      | DOT IDENTIFIER LPAREN arg_list RPAREN\n                      | DOT IDENTIFIER LPAREN RPARENwait_statement : WAIT expressionfunction_call : IDENTIFIER LPAREN arg_list RPAREN\n                     | IDENTIFIER LPAREN RPAREN\n                     | primary DOT IDENTIFIER LPAREN arg_list RPAREN\n                     | primary DOT IDENTIFIER LPAREN RPAREN\n    arg_list : expression\n                | arg_list COMMA expression\n                | empty\n    block : LBRACE RBRACE\n             | LBRACE statement_list RBRACEempty :'
    
_lr_action_items = {'IMPORT':([0,25,40,86,],[14,14,14,14,]),'IDENTIFIER':([0,14,18,19,20,21,22,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,73,74,83,84,86,113,117,119,124,],[15,41,49,49,49,52,53,49,49,15,67,67,67,15,49,49,49,49,67,67,67,67,67,67,67,67,67,67,67,98,49,105,49,15,49,122,49,49,]),'PRINT':([0,25,40,86,],[17,17,17,17,]),'IF':([0,25,40,86,],[19,19,19,19,]),'WHILE':([0,25,40,86,],[20,20,20,20,]),'DEFINE':([0,25,40,86,],[21,21,21,21,]),'FOR':([0,25,40,86,],[22,22,22,22,]),'RESULT':([0,25,40,86,],[23,23,23,23,]),'WAIT':([0,25,40,86,],[24,24,24,24,]),'LBRACE':([0,25,26,27,28,30,32,34,35,36,37,38,39,40,45,46,49,50,51,66,67,71,72,77,78,80,86,87,88,89,90,91,92,93,94,95,96,97,98,100,104,106,109,110,112,116,126,],[25,25,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,25,-16,-17,-68,25,25,-60,-68,-61,-62,-18,-19,-73,25,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,25,25,25,-25,-66,25,-26,]),'PLUS':([0,15,18,19,20,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,47,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,80,84,86,89,90,91,92,93,94,95,96,97,98,100,112,113,119,124,],[29,-68,29,29,29,29,29,29,64,29,-55,29,-59,29,-63,-64,-69,-70,-71,-72,29,29,29,29,29,-68,29,29,29,29,29,29,29,29,-60,-68,29,29,29,-61,-62,29,-73,29,29,64,64,64,64,-53,-54,-56,-57,-58,-65,-67,-66,29,29,29,]),'MINUS':([0,15,18,19,20,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,47,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,80,84,86,89,90,91,92,93,94,95,96,97,98,100,112,113,119,124,],[31,-68,31,31,31,31,31,31,65,31,-55,31,-59,31,-63,-64,-69,-70,-71,-72,31,31,31,31,31,-68,31,31,31,31,31,31,31,31,-60,-68,31,31,31,-61,-62,31,-73,31,31,65,65,65,65,-53,-54,-56,-57,-58,-65,-67,-66,31,31,31,]),'NOT':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'NUMBER':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'STRING':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'TRUE':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FALSE':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LPAREN':([0,15,17,18,19,20,23,24,25,29,31,33,34,35,36,37,38,39,40,42,43,44,47,49,52,58,59,60,61,62,63,64,65,67,68,69,70,74,80,84,86,98,100,111,112,113,119,124,],[18,-68,47,18,18,18,18,18,18,18,18,18,74,-64,-69,-70,-71,-72,18,18,18,18,18,-68,83,18,18,18,18,18,18,18,18,-68,18,18,18,18,-73,18,18,-65,-67,119,-66,18,18,18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,26,27,28,30,32,34,35,36,37,38,39,40,41,45,46,49,54,55,56,66,67,71,72,75,76,77,78,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,100,103,112,114,115,118,121,],[0,-1,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-68,-15,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-2,-33,-16,-17,-68,-34,-77,-85,-60,-68,-61,-62,-3,-20,-18,-19,-73,-22,-27,-86,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-21,-66,-23,-28,-24,-29,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,26,27,28,30,32,34,35,36,37,38,39,41,45,46,49,54,55,56,57,66,67,71,72,75,76,77,78,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,100,103,112,114,115,118,121,],[40,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-68,-15,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-33,-16,-17,-68,-34,-77,-85,86,-60,-68,-61,-62,-3,-20,-18,-19,-73,-22,-27,-86,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-21,-66,-23,-28,-24,-29,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,15,16,25,26,27,28,30,32,34,35,36,37,38,39,41,45,46,49,54,55,56,57,66,67,71,72,75,76,77,78,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,100,103,112,114,115,118,121,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-68,-15,56,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-33,-16,-17,-68,-34,-77,-85,85,-60,-68,-61,-62,-3,-20,-18,-19,-73,-22,-27,-86,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-21,-66,-23,-28,-24,-29,]),'EQUALS':([15,],[42,]),'PLUS_EQUALS':([15,49,],[43,43,]),'MINUS_EQUALS':([15,49,],[44,44,]),'DOT':([15,34,35,36,37,38,39,49,67,80,98,100,112,],[-68,73,-64,-69,-70,-71,-72,-68,-68,-73,-65,-67,-66,]),'TIMES':([15,30,32,34,35,36,37,38,39,49,66,67,71,72,80,93,94,95,96,97,98,100,112,],[-68,68,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,68,68,-56,-57,-58,-65,-67,-66,]),'DIVIDE':([15,30,32,34,35,36,37,38,39,49,66,67,71,72,80,93,94,95,96,97,98,100,112,],[-68,69,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,69,69,-56,-57,-58,-65,-67,-66,]),'MOD':([15,30,32,34,35,36,37,38,39,49,66,67,71,72,80,93,94,95,96,97,98,100,112,],[-68,70,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,70,70,-56,-57,-58,-65,-67,-66,]),'LT':([15,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,60,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,60,60,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'GT':([15,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,61,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,61,61,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'LE':([15,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,62,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,62,62,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'GE':([15,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,63,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,63,63,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'EQ':([15,26,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,58,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'NEQ':([15,26,27,28,30,32,34,35,36,37,38,39,49,66,67,71,72,80,87,88,89,90,91,92,93,94,95,96,97,98,100,112,],[-68,59,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-68,-60,-68,-61,-62,-73,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,-66,]),'INCREMENT':([15,16,26,27,28,30,32,34,35,36,37,38,39,45,46,48,49,50,51,54,55,66,67,71,72,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,100,101,110,112,120,123,125,],[-68,45,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-16,-17,45,-68,45,45,45,45,-60,-68,-61,-62,45,45,45,45,-73,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,45,45,-66,45,45,45,]),'DECREMENT':([15,16,26,27,28,30,32,34,35,36,37,38,39,45,46,48,49,50,51,54,55,66,67,71,72,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,100,101,110,112,120,123,125,],[-68,46,-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-16,-17,46,-68,46,46,46,46,-60,-68,-61,-62,46,46,46,46,-73,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,-67,46,46,-66,46,46,46,]),'RPAREN':([26,27,28,30,32,34,35,36,37,38,39,45,46,48,49,66,67,71,72,74,77,78,79,80,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,108,112,120,122,125,],[-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-16,-17,80,-68,-60,-68,-61,-62,100,-18,-19,103,-73,106,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,112,-67,-82,-84,-30,116,-32,-66,-83,-31,126,]),'COMMA':([26,27,28,30,32,34,35,36,37,38,39,45,46,49,66,67,71,72,74,77,78,80,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,108,112,120,122,123,],[-35,-45,-48,-55,-59,-63,-64,-69,-70,-71,-72,-16,-17,-68,-60,-68,-61,-62,-87,-18,-19,-73,-87,-46,-47,-49,-50,-51,-52,-53,-54,-56,-57,-58,-65,113,-67,-82,-84,-30,117,-32,-66,-83,-31,124,]),'IN':([53,],[84,]),'ELSE':([56,81,85,],[-85,104,-86,]),'RANGE':([84,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,25,],[2,57,]),'statement':([0,25,40,86,],[3,3,75,75,]),'assignment':([0,25,40,86,],[4,4,4,4,]),'print_statement':([0,25,40,86,],[5,5,5,5,]),'if_statement':([0,25,40,86,],[6,6,6,6,]),'while_statement':([0,25,40,86,],[7,7,7,7,]),'function_def':([0,25,40,86,],[8,8,8,8,]),'for_loop':([0,25,40,86,],[9,9,9,9,]),'return_statement':([0,25,40,86,],[10,10,10,10,]),'wait_statement':([0,25,40,86,],[11,11,11,11,]),'block':([0,25,40,50,51,86,104,106,109,116,],[12,12,12,81,82,12,114,115,118,121,]),'expression_statement':([0,25,40,86,],[13,13,13,13,]),'expression':([0,18,19,20,23,24,25,40,42,43,44,47,74,84,86,113,119,124,],[16,48,50,51,54,55,16,16,76,77,78,79,101,110,16,120,123,125,]),'equality_expr':([0,18,19,20,23,24,25,40,42,43,44,47,74,84,86,113,119,124,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'relational_expr':([0,18,19,20,23,24,25,40,42,43,44,47,58,59,74,84,86,113,119,124,],[27,27,27,27,27,27,27,27,27,27,27,27,87,88,27,27,27,27,27,27,]),'additive_expr':([0,18,19,20,23,24,25,40,42,43,44,47,58,59,60,61,62,63,74,84,86,113,119,124,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,89,90,91,92,28,28,28,28,28,28,]),'term':([0,18,19,20,23,24,25,40,42,43,44,47,58,59,60,61,62,63,64,65,74,84,86,113,119,124,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,93,94,30,30,30,30,30,30,]),'factor':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[32,32,32,32,32,32,32,66,71,72,32,32,32,32,32,32,32,32,32,32,32,32,32,95,96,97,32,32,32,32,32,32,]),'primary':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'atom':([0,18,19,20,23,24,25,29,31,33,40,42,43,44,47,58,59,60,61,62,63,64,65,68,69,70,74,84,86,113,119,124,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'arg_list':([74,],[99,]),'empty':([74,83,],[102,108,]),'param_list':([83,],[107,]),'iterable':([84,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','deprecated_interpreter.py',353),
  ('program -> statement_list NEWLINE','program',2,'p_program','deprecated_interpreter.py',354),
  ('statement_list -> statement_list NEWLINE statement','statement_list',3,'p_statement_list','deprecated_interpreter.py',362),
  ('statement_list -> statement','statement_list',1,'p_statement_list','deprecated_interpreter.py',363),
  ('statement -> assignment','statement',1,'p_statement','deprecated_interpreter.py',371),
  ('statement -> print_statement','statement',1,'p_statement','deprecated_interpreter.py',372),
  ('statement -> if_statement','statement',1,'p_statement','deprecated_interpreter.py',373),
  ('statement -> while_statement','statement',1,'p_statement','deprecated_interpreter.py',374),
  ('statement -> function_def','statement',1,'p_statement','deprecated_interpreter.py',375),
  ('statement -> for_loop','statement',1,'p_statement','deprecated_interpreter.py',376),
  ('statement -> return_statement','statement',1,'p_statement','deprecated_interpreter.py',377),
  ('statement -> wait_statement','statement',1,'p_statement','deprecated_interpreter.py',378),
  ('statement -> block','statement',1,'p_statement','deprecated_interpreter.py',379),
  ('statement -> expression_statement','statement',1,'p_statement','deprecated_interpreter.py',380),
  ('expression_statement -> expression','expression_statement',1,'p_expression_statement','deprecated_interpreter.py',385),
  ('expression -> expression INCREMENT','expression',2,'p_expression_increment','deprecated_interpreter.py',389),
  ('expression -> expression DECREMENT','expression',2,'p_expression_increment','deprecated_interpreter.py',390),
  ('expression -> IDENTIFIER PLUS_EQUALS expression','expression',3,'p_expression_compound_assignment','deprecated_interpreter.py',398),
  ('expression -> IDENTIFIER MINUS_EQUALS expression','expression',3,'p_expression_compound_assignment','deprecated_interpreter.py',399),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','deprecated_interpreter.py',408),
  ('print_statement -> PRINT LPAREN expression RPAREN','print_statement',4,'p_print_statement','deprecated_interpreter.py',412),
  ('if_statement -> IF expression block','if_statement',3,'p_if_statement','deprecated_interpreter.py',417),
  ('if_statement -> IF expression block ELSE block','if_statement',5,'p_if_statement','deprecated_interpreter.py',418),
  ('for_loop -> FOR IDENTIFIER IN iterable block','for_loop',5,'p_for_loop','deprecated_interpreter.py',426),
  ('iterable -> expression','iterable',1,'p_iterable','deprecated_interpreter.py',430),
  ('iterable -> RANGE LPAREN expression COMMA expression RPAREN','iterable',6,'p_iterable','deprecated_interpreter.py',431),
  ('while_statement -> WHILE expression block','while_statement',3,'p_while_statement','deprecated_interpreter.py',441),
  ('function_def -> DEFINE IDENTIFIER LPAREN RPAREN block','function_def',5,'p_function_def','deprecated_interpreter.py',445),
  ('function_def -> DEFINE IDENTIFIER LPAREN param_list RPAREN block','function_def',6,'p_function_def','deprecated_interpreter.py',446),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','deprecated_interpreter.py',454),
  ('param_list -> param_list COMMA IDENTIFIER','param_list',3,'p_param_list','deprecated_interpreter.py',455),
  ('param_list -> empty','param_list',1,'p_param_list','deprecated_interpreter.py',456),
  ('statement -> IMPORT IDENTIFIER','statement',2,'p_import_statement','deprecated_interpreter.py',466),
  ('return_statement -> RESULT expression','return_statement',2,'p_return_statement','deprecated_interpreter.py',470),
  ('expression -> equality_expr','expression',1,'p_expression','deprecated_interpreter.py',474),
  ('fstring -> F_QUOTE fstring_content QUOTE','fstring',3,'p_fstring','deprecated_interpreter.py',478),
  ('fstring_content -> fstring_content fstring_part','fstring_content',2,'p_fstring_content','deprecated_interpreter.py',482),
  ('fstring_content -> fstring_part','fstring_content',1,'p_fstring_content','deprecated_interpreter.py',483),
  ('fstring_part -> STRING_CONTENT','fstring_part',1,'p_fstring_part','deprecated_interpreter.py',490),
  ('fstring_part -> LBRACE expression RBRACE','fstring_part',3,'p_fstring_part','deprecated_interpreter.py',491),
  ('logic_expr -> logic_expr OR_OP logic_term','logic_expr',3,'p_logic_expr','deprecated_interpreter.py',498),
  ('logic_expr -> logic_term','logic_expr',1,'p_logic_expr','deprecated_interpreter.py',499),
  ('logic_term -> logic_term AND_OP equality_expr','logic_term',3,'p_logic_term','deprecated_interpreter.py',507),
  ('logic_term -> equality_expr','logic_term',1,'p_logic_term','deprecated_interpreter.py',508),
  ('equality_expr -> relational_expr','equality_expr',1,'p_equality_expr','deprecated_interpreter.py',516),
  ('equality_expr -> equality_expr EQ relational_expr','equality_expr',3,'p_equality_expr','deprecated_interpreter.py',517),
  ('equality_expr -> equality_expr NEQ relational_expr','equality_expr',3,'p_equality_expr','deprecated_interpreter.py',518),
  ('relational_expr -> additive_expr','relational_expr',1,'p_relational_expr','deprecated_interpreter.py',525),
  ('relational_expr -> relational_expr LT additive_expr','relational_expr',3,'p_relational_expr','deprecated_interpreter.py',526),
  ('relational_expr -> relational_expr GT additive_expr','relational_expr',3,'p_relational_expr','deprecated_interpreter.py',527),
  ('relational_expr -> relational_expr LE additive_expr','relational_expr',3,'p_relational_expr','deprecated_interpreter.py',528),
  ('relational_expr -> relational_expr GE additive_expr','relational_expr',3,'p_relational_expr','deprecated_interpreter.py',529),
  ('additive_expr -> additive_expr PLUS term','additive_expr',3,'p_additive_expr','deprecated_interpreter.py',536),
  ('additive_expr -> additive_expr MINUS term','additive_expr',3,'p_additive_expr','deprecated_interpreter.py',537),
  ('additive_expr -> term','additive_expr',1,'p_additive_expr','deprecated_interpreter.py',538),
  ('term -> term TIMES factor','term',3,'p_term','deprecated_interpreter.py',546),
  ('term -> term DIVIDE factor','term',3,'p_term','deprecated_interpreter.py',547),
  ('term -> term MOD factor','term',3,'p_term','deprecated_interpreter.py',548),
  ('term -> factor','term',1,'p_term','deprecated_interpreter.py',549),
  ('factor -> PLUS factor','factor',2,'p_factor','deprecated_interpreter.py',557),
  ('factor -> MINUS factor','factor',2,'p_factor','deprecated_interpreter.py',558),
  ('factor -> NOT factor','factor',2,'p_factor','deprecated_interpreter.py',559),
  ('factor -> primary','factor',1,'p_factor','deprecated_interpreter.py',560),
  ('primary -> atom','primary',1,'p_primary','deprecated_interpreter.py',568),
  ('primary -> primary DOT IDENTIFIER','primary',3,'p_primary','deprecated_interpreter.py',569),
  ('primary -> primary LPAREN arg_list RPAREN','primary',4,'p_primary','deprecated_interpreter.py',570),
  ('primary -> primary LPAREN RPAREN','primary',3,'p_primary','deprecated_interpreter.py',571),
  ('atom -> IDENTIFIER','atom',1,'p_atom','deprecated_interpreter.py',582),
  ('atom -> NUMBER','atom',1,'p_atom','deprecated_interpreter.py',583),
  ('atom -> STRING','atom',1,'p_atom','deprecated_interpreter.py',584),
  ('atom -> TRUE','atom',1,'p_atom','deprecated_interpreter.py',585),
  ('atom -> FALSE','atom',1,'p_atom','deprecated_interpreter.py',586),
  ('atom -> LPAREN expression RPAREN','atom',3,'p_atom','deprecated_interpreter.py',587),
  ('member_access -> DOT IDENTIFIER','member_access',2,'p_member_access','deprecated_interpreter.py',614),
  ('member_access -> DOT IDENTIFIER LPAREN arg_list RPAREN','member_access',5,'p_member_access','deprecated_interpreter.py',615),
  ('member_access -> DOT IDENTIFIER LPAREN RPAREN','member_access',4,'p_member_access','deprecated_interpreter.py',616),
  ('wait_statement -> WAIT expression','wait_statement',2,'p_wait_statement','deprecated_interpreter.py',631),
  ('function_call -> IDENTIFIER LPAREN arg_list RPAREN','function_call',4,'p_function_call','deprecated_interpreter.py',635),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','deprecated_interpreter.py',636),
  ('function_call -> primary DOT IDENTIFIER LPAREN arg_list RPAREN','function_call',6,'p_function_call','deprecated_interpreter.py',637),
  ('function_call -> primary DOT IDENTIFIER LPAREN RPAREN','function_call',5,'p_function_call','deprecated_interpreter.py',638),
  ('arg_list -> expression','arg_list',1,'p_arg_list','deprecated_interpreter.py',660),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','deprecated_interpreter.py',661),
  ('arg_list -> empty','arg_list',1,'p_arg_list','deprecated_interpreter.py',662),
  ('block -> LBRACE RBRACE','block',2,'p_block','deprecated_interpreter.py',672),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','deprecated_interpreter.py',673),
  ('empty -> <empty>','empty',0,'p_empty','deprecated_interpreter.py',680),
]
